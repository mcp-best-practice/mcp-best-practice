{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP Best Practices Guide","text":""},{"location":"#welcome-to-the-model-context-protocol-best-practices-guide","title":"Welcome to the Model Context Protocol Best Practices Guide","text":"<p>This comprehensive guide provides best practices, patterns, and practical guidance for developing, deploying, and maintaining Model Context Protocol (MCP) servers in production environments.</p>"},{"location":"#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol (MCP) is an open protocol that standardizes how applications provide context to large language models (LLMs). Think of MCP like a USB-C port for AI applications\u2014it provides a standardized way to connect AI models to different data sources and tools.</p>"},{"location":"#what-this-guide-covers","title":"What This Guide Covers","text":"<p>This guide is organized into practical sections that cover the entire MCP server lifecycle:</p>"},{"location":"#overview","title":"\ud83e\udded Overview","text":"<p>Get started with MCP fundamentals, architecture, and core concepts. Learn about the protocol standards and set up your first server.</p>"},{"location":"#best-practices","title":"\u2b50 Best Practices","text":"<p>Essential standards for building robust, maintainable MCP servers including project structure, dependency management, and coding conventions.</p>"},{"location":"#development","title":"\ud83d\udcbb Development","text":"<p>Language-specific guides for Python, JavaScript/TypeScript, and Go with real-world examples, patterns, and implementation details.</p>"},{"location":"#testing","title":"\ud83e\uddea Testing","text":"<p>Comprehensive testing strategies including unit, integration, and end-to-end testing approaches for MCP servers.</p>"},{"location":"#packaging","title":"\ud83d\udce6 Packaging","text":"<p>How to package and distribute MCP servers using language-specific package managers and container technologies.</p>"},{"location":"#deployment","title":"\ud83d\ude80 Deployment","text":"<p>Deployment strategies for cloud platforms, on-premise environments, Kubernetes, and CI/CD pipelines.</p>"},{"location":"#operations","title":"\u2699\ufe0f Operations","text":"<p>Production operations including monitoring, logging, performance optimization, scaling, and incident response.</p>"},{"location":"#management","title":"\ud83d\udd27 Management","text":"<p>Lifecycle management covering versioning, updates, rollbacks, and configuration management.</p>"},{"location":"#security","title":"\ud83d\udee1\ufe0f Security","text":"<p>Security best practices including authentication, authorization, secrets management, and vulnerability scanning.</p>"},{"location":"#integration","title":"\ud83d\udd0c Integration","text":"<p>How to integrate MCP servers with Claude Desktop, gateways, and other AI applications and platforms.</p>"},{"location":"#faq","title":"\u2753 FAQ","text":"<p>Common questions, troubleshooting guides, and migration assistance.</p>"},{"location":"#who-this-guide-is-for","title":"Who This Guide Is For","text":"<ul> <li>Developers building MCP servers and integrations</li> <li>DevOps Engineers deploying and operating MCP infrastructure</li> <li>Engineering Teams adopting MCP in production environments</li> <li>Technical Leaders evaluating MCP for their organizations</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to MCP, start with:</p> <ol> <li>Overview - Learn MCP fundamentals and architecture</li> <li>Getting Started - Build your first MCP server</li> <li>Best Practices - Understand essential standards</li> <li>Development Guide - Deep dive into implementation</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>This guide is community-driven. We welcome contributions, corrections, and improvements. The content reflects real-world experience and evolving best practices from the MCP community.</p>"},{"location":"#protocol-information","title":"Protocol Information","text":"<ul> <li>Current Protocol Version: 2025-06-18</li> <li>Transport Mechanisms: stdio, Streamable HTTP</li> <li>Message Format: JSON-RPC 2.0</li> <li>Official Specification: Model Context Protocol Specification</li> </ul> <p>Ready to build production-grade MCP servers? Let's get started! \ud83d\ude80</p>"},{"location":"best-practice/mcp-best-practices/","title":"Best Practices","text":""},{"location":"best-practice/mcp-best-practices/#input-and-output-santitization","title":"Input and output santitization","text":"<p>Ensure your inputs and outputs are sanitized. In Python, we recommend using Pydantic V2.</p>"},{"location":"best-practice/mcp-best-practices/#self-containment","title":"\ud83d\udce6 Self-Containment","text":"<p>Each MCP server must be a standalone repository that includes all necessary code and documentation. Example: <code>git clone; make serve</code></p>"},{"location":"best-practice/mcp-best-practices/#makefile-requirements","title":"\ud83d\udee0 Makefile Requirements","text":"<p>All MCP repositories must include a <code>Makefile</code> with the following standard targets. These targets ensure consistency, enable automation, and support local development and containerization.</p>"},{"location":"best-practice/mcp-best-practices/#required-make-targets","title":"\u2705 Required Make Targets","text":"<p>Make targets are grouped by functionality. Use <code>make help</code> to see them all in your terminal.</p>"},{"location":"best-practice/mcp-best-practices/#virtual-environment-installation","title":"\ud83c\udf31 VIRTUAL ENVIRONMENT &amp; INSTALLATION","text":"Target Description <code>make venv</code> Create a new Python virtual environment in <code>~/.venv/&lt;project&gt;</code>. <code>make activate</code> Output the command to activate the virtual environment. <code>make install</code> Install all dependencies using <code>uv</code> from <code>pyproject.toml</code>. <code>make clean</code> Remove virtualenv, Python artifacts, build files, and containers."},{"location":"best-practice/mcp-best-practices/#run-server-testing","title":"\u25b6\ufe0f RUN SERVER &amp; TESTING","text":"Target Description <code>make serve</code> Run the MCP server locally (e.g., <code>mcp-time-server</code>). <code>make test</code> Run all unit and integration tests with <code>pytest</code>. <code>make test-curl</code> Run public API integration tests using a <code>curl</code> script."},{"location":"best-practice/mcp-best-practices/#documentation-sbom","title":"\ud83d\udcda DOCUMENTATION &amp; SBOM","text":"Target Description <code>make docs</code> Generate project documentation and SBOM using <code>handsdown</code>. <code>make sbom</code> Create a software bill of materials (SBOM) and scan dependencies."},{"location":"best-practice/mcp-best-practices/#linting-static-analysis","title":"\ud83d\udd0d LINTING &amp; STATIC ANALYSIS","text":"Target Description <code>make lint</code> Run all linters (e.g., <code>ruff check</code>, <code>ruff format</code>)."},{"location":"best-practice/mcp-best-practices/#container-build-run","title":"\ud83d\udc33 CONTAINER BUILD &amp; RUN","text":"Target Description <code>make podman</code> Build a production-ready container image with Podman. <code>make podman-run</code> Run the container locally and expose it on port 8080. <code>make podman-stop</code> Stop and remove the running container. <code>make podman-test</code> Test the container with a <code>curl</code> script."},{"location":"best-practice/mcp-best-practices/#security-package-scanning","title":"\ud83d\udee1\ufe0f SECURITY &amp; PACKAGE SCANNING","text":"Target Description <code>make trivy</code> Scan the container image for vulnerabilities using Trivy. <p>Tip: These commands should work out-of-the-box after cloning a repo and running <code>make venv install serve</code>.</p>"},{"location":"best-practice/mcp-best-practices/#containerfile","title":"\ud83d\udc33 Containerfile","text":"<p>Each repo must include a <code>Containerfile</code> (Podman-compatible, Docker-compatible) to support containerized execution.</p>"},{"location":"best-practice/mcp-best-practices/#containerfile-requirements","title":"Containerfile Requirements:","text":"<ul> <li>Must start from a secure base (e.g., latest Red Hat UBI9 minimal image <code>registry.access.redhat.com/ubi9-minimal:9.5-1741850109</code>)</li> <li>Should use <code>uv</code> or <code>pdm</code> to install dependencies via <code>pyproject.toml</code></li> <li>Must run the server using the same entry point as <code>make serve</code></li> <li>Should expose relevant ports (<code>EXPOSE 8080</code>)</li> <li>Should define a non-root user for runtime</li> </ul>"},{"location":"best-practice/mcp-best-practices/#dependency-management","title":"\ud83d\udcda Dependency Management","text":"<ul> <li>All Python projects must use <code>pyproject.toml</code> and follow PEP standards.</li> <li>Dependencies must either be:</li> <li>Included in the repo</li> <li>Pulled from PyPI (no external links)</li> </ul>"},{"location":"best-practice/mcp-best-practices/#clear-role-definition","title":"\ud83c\udfaf Clear Role Definition","text":"<ul> <li>State the specific role of the server (e.g., GitHub tools).</li> <li>Group related tools together.</li> <li>Do not mix roles (e.g., GitHub \u2260 Jira \u2260 GitLab).</li> </ul>"},{"location":"best-practice/mcp-best-practices/#standardized-tools","title":"\ud83e\uddf0 Standardized Tools","text":"<p>Each MCP server should expose tools that follow the MCP conventions, e.g.:</p> <ul> <li><code>create_ticket</code></li> <li><code>create_pr</code></li> <li><code>read_file</code></li> </ul>"},{"location":"best-practice/mcp-best-practices/#consistent-structure","title":"\ud83d\udcc1 Consistent Structure","text":"<p>Repos must follow a common structure. For example, from the time_server</p> <pre><code>time_server/\n\u251c\u2500\u2500 Containerfile                  # Container build definition (Podman/Docker compatible)\n\u251c\u2500\u2500 Makefile                       # Build, run, test, and container automation targets\n\u251c\u2500\u2500 pyproject.toml                 # Python project and dependency configuration (PEP 621)\n\u251c\u2500\u2500 README.md                      # Main documentation: overview, setup, usage, env vars\n\u251c\u2500\u2500 CONTRIBUTING.md                # Guidelines for contributing, PRs, and issue management\n\u251c\u2500\u2500 .gitignore                     # Exclude venvs, artifacts, and secrets from Git\n\u251c\u2500\u2500 docs/                          # (Optional) Diagrams, specs, and additional documentation\n\u251c\u2500\u2500 tests/                         # Unit and integration tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_main.py               # Tests for main entrypoint behavior\n\u2502   \u2514\u2500\u2500 test_tools.py              # Tests for core tool functionality\n\u2514\u2500\u2500 src/                           # Application source code\n    \u2514\u2500\u2500 mcp_time_server/           # Main package named after your server\n        \u251c\u2500\u2500 __init__.py            # Marks this directory as a Python package\n        \u251c\u2500\u2500 main.py                # Entrypoint that wires everything together\n        \u251c\u2500\u2500 mcp_server_base.py     # Optional base class for shared server behavior\n        \u251c\u2500\u2500 server.py              # Server logic (e.g., tool registration, lifecycle hooks)\n        \u2514\u2500\u2500 tools/                 # Directory for all MCP tool implementations\n            \u251c\u2500\u2500 __init__.py\n            \u251c\u2500\u2500 tools.py           # Tool business logic (e.g., `get_time`, `format_time`)\n            \u2514\u2500\u2500 tools_registration.py # Registers tools into the MCP framework\n</code></pre>"},{"location":"best-practice/mcp-best-practices/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>Each repo must include:</p> <ul> <li>A comprehensive <code>README.md</code></li> <li>Setup and usage instructions</li> <li>Environment variable documentation</li> </ul>"},{"location":"best-practice/mcp-best-practices/#modular-design","title":"\ud83e\udde9 Modular Design","text":"<p>Code should be cleanly separated into modules for easier maintenance and scaling.</p>"},{"location":"best-practice/mcp-best-practices/#testing","title":"\u2705 Testing","text":"<p>Include unit and integration tests to validate functionality.</p>"},{"location":"best-practice/mcp-best-practices/#contribution-guidelines","title":"\ud83e\udd1d Contribution Guidelines","text":"<p>Add a <code>CONTRIBUTING.md</code> with:</p> <ul> <li>How to file issues</li> <li>How to submit pull requests</li> <li>Review and merge process</li> </ul>"},{"location":"best-practice/mcp-best-practices/#versioning-and-releases","title":"\ud83c\udff7 Versioning and Releases","text":"<p>Use semantic versioning. Include release notes for all changes.</p>"},{"location":"best-practice/mcp-best-practices/#pull-request-process","title":"\ud83d\udd04 Pull Request Process","text":"<p>Submit new MCP servers via pull request to the org's main repo. PR must:</p> <ul> <li>Follow all standards</li> <li>Include all documentation</li> </ul>"},{"location":"best-practice/mcp-best-practices/#environment-variables-and-secrets","title":"\ud83d\udd10 Environment Variables and Secrets","text":"<ul> <li>Use environment variables for secrets</li> <li>Use a clear, role-based prefix (e.g., <code>MCP_GITHUB_</code>)</li> </ul> <p>Example:</p> <pre><code>MCP_GITHUB_ACCESS_TOKEN=...\nMCP_GITHUB_BASE_URL=...\n</code></pre>"},{"location":"best-practice/mcp-best-practices/#required-capabilities-readme-metadata-tags","title":"\ud83c\udff7 Required Capabilities (README Metadata Tags)","text":"<p>Add tags at the top of <code>README.md</code> between YAML markers to declare your server's required capabilities.</p>"},{"location":"best-practice/mcp-best-practices/#available-tags","title":"Available Tags:","text":"<ul> <li> <p><code>needs_filesystem_access</code>   Indicates the server requires access to the local filesystem (e.g., for reading/writing files).</p> </li> <li> <p><code>needs_api_key_user</code>   Requires a user-specific API key to interact with external services on behalf of the user.</p> </li> <li> <p><code>needs_api_key_central</code>   Requires a centrally managed API key, typically provisioned and stored by the platform.</p> </li> <li> <p><code>needs_database</code>   The server interacts with a persistent database (e.g., PostgreSQL, MongoDB).</p> </li> <li> <p><code>needs_network_access_inbound</code>   The server expects to receive inbound network requests (e.g., runs a web server or webhook listener).</p> </li> <li> <p><code>needs_network_access_outbound</code>   The server needs to make outbound network requests (e.g., calling external APIs or services).</p> </li> </ul>"},{"location":"best-practice/mcp-best-practices/#example","title":"Example:","text":"<pre><code>---\ntags:\n  - needs_filesystem_access\n  - needs_api_key_user\n---\n</code></pre>"},{"location":"best-practice/principles/","title":"MCP Design Principles","text":""},{"location":"best-practice/principles/#core-principles","title":"Core Principles","text":"<p>These fundamental principles guide the design and implementation of effective MCP servers and should inform all development decisions.</p>"},{"location":"best-practice/principles/#1-single-responsibility-principle","title":"1. Single Responsibility Principle","text":""},{"location":"best-practice/principles/#definition","title":"Definition","text":"<p>Each MCP server should have one clear, well-defined purpose and focus on a specific domain or service.</p>"},{"location":"best-practice/principles/#guidelines","title":"Guidelines","text":"<ul> <li>One Domain Per Server: GitHub server, Database server, Email server</li> <li>Cohesive Functionality: All tools within a server should be related</li> <li>Clear Boundaries: Easy to explain what the server does in one sentence</li> </ul>"},{"location":"best-practice/principles/#good-examples","title":"\u2705 Good Examples","text":"<pre><code>\u2705 GitHub MCP Server\n   Tools: create_issue, get_pull_request, merge_branch, list_repositories\n\n\u2705 Database MCP Server  \n   Tools: query_table, insert_record, update_record, get_schema\n\n\u2705 Email MCP Server\n   Tools: send_email, list_inbox, search_messages, create_draft\n</code></pre>"},{"location":"best-practice/principles/#anti-patterns","title":"\u274c Anti-Patterns","text":"<pre><code>\u274c \"Everything\" MCP Server\n   Tools: create_github_issue, send_email, query_database, upload_file\n   Problem: Mixed responsibilities, hard to maintain and test\n\n\u274c Over-Specific Server\n   Tools: create_urgent_bug_report_for_frontend_team\n   Problem: Too narrow, not reusable\n</code></pre>"},{"location":"best-practice/principles/#benefits","title":"Benefits","text":"<ul> <li>Easier testing and debugging</li> <li>Clearer ownership and responsibilities  </li> <li>Better reusability across applications</li> <li>Simpler deployment and scaling</li> </ul>"},{"location":"best-practice/principles/#2-stateless-design","title":"2. Stateless Design","text":""},{"location":"best-practice/principles/#definition_1","title":"Definition","text":"<p>MCP servers should avoid storing state between requests and be designed for stateless operation.</p>"},{"location":"best-practice/principles/#guidelines_1","title":"Guidelines","text":"<ul> <li>No Persistent State: Don't store request data between calls</li> <li>Idempotent Operations: Same input produces same output</li> <li>External State Only: Use databases, APIs, or files for persistence</li> <li>Session Independence: Each request is self-contained</li> </ul>"},{"location":"best-practice/principles/#implementation","title":"Implementation","text":"<pre><code># \u2705 Good: Stateless operation\n@server.call_tool()\nasync def get_user_data(name: str, arguments: dict):\n    user_id = arguments[\"user_id\"]\n    # Fetch from external system\n    user = await database.get_user(user_id)\n    return [TextContent(type=\"text\", text=str(user))]\n\n# \u274c Bad: Storing state\nclass BadServer:\n    def __init__(self):\n        self.user_cache = {}  # Problematic state storage\n    \n    async def get_user_data(self, user_id):\n        if user_id in self.user_cache:  # Relies on internal state\n            return self.user_cache[user_id]\n</code></pre>"},{"location":"best-practice/principles/#benefits_1","title":"Benefits","text":"<ul> <li>Better scalability and load balancing</li> <li>Easier debugging and testing</li> <li>More reliable under high load</li> <li>Simpler deployment patterns</li> </ul>"},{"location":"best-practice/principles/#3-fail-fast-and-explicit","title":"3. Fail Fast and Explicit","text":""},{"location":"best-practice/principles/#definition_2","title":"Definition","text":"<p>Detect and report errors as early as possible with clear, actionable error messages.</p>"},{"location":"best-practice/principles/#guidelines_2","title":"Guidelines","text":"<ul> <li>Input Validation: Validate parameters before processing</li> <li>Clear Error Messages: Specific, actionable error descriptions  </li> <li>Structured Errors: Use consistent error formats</li> <li>Early Detection: Check preconditions before expensive operations</li> </ul>"},{"location":"best-practice/principles/#implementation_1","title":"Implementation","text":"<pre><code>@server.call_tool()\nasync def process_file(name: str, arguments: dict):\n    file_path = arguments.get(\"file_path\")\n    \n    # \u2705 Validate early and explicitly\n    if not file_path:\n        raise ValueError(\"file_path parameter is required\")\n    \n    if not file_path.endswith('.json'):\n        raise ValueError(\"Only JSON files are supported\")\n    \n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    \n    # Continue with processing...\n</code></pre>"},{"location":"best-practice/principles/#error-response-format","title":"Error Response Format","text":"<pre><code># Use structured error responses\n{\n    \"error\": {\n        \"code\": -32602,  # JSON-RPC error code\n        \"message\": \"Invalid file format\",\n        \"data\": {\n            \"parameter\": \"file_path\",\n            \"expected\": \"*.json\",\n            \"received\": \"document.txt\"\n        }\n    }\n}\n</code></pre>"},{"location":"best-practice/principles/#4-self-documenting-apis","title":"4. Self-Documenting APIs","text":""},{"location":"best-practice/principles/#definition_3","title":"Definition","text":"<p>Tools, resources, and prompts should be self-describing through comprehensive metadata.</p>"},{"location":"best-practice/principles/#guidelines_3","title":"Guidelines","text":"<ul> <li>Descriptive Names: Clear, unambiguous tool and parameter names</li> <li>Comprehensive Descriptions: Explain purpose, behavior, and side effects</li> <li>Rich Schemas: Detailed input/output specifications</li> <li>Usage Examples: Include examples in descriptions when helpful</li> </ul>"},{"location":"best-practice/principles/#implementation_2","title":"Implementation","text":"<pre><code>Tool(\n    name=\"search_github_issues\",\n    description=\"Search for GitHub issues using flexible query criteria. Supports text search, labels, assignees, and state filters.\",\n    inputSchema={\n        \"type\": \"object\",\n        \"properties\": {\n            \"repository\": {\n                \"type\": \"string\", \n                \"description\": \"Repository in format 'owner/repo' (e.g., 'microsoft/vscode')\"\n            },\n            \"query\": {\n                \"type\": \"string\",\n                \"description\": \"Search query text. Supports GitHub search syntax.\"\n            },\n            \"state\": {\n                \"type\": \"string\",\n                \"enum\": [\"open\", \"closed\", \"all\"],\n                \"default\": \"open\",\n                \"description\": \"Issue state to filter by\"\n            },\n            \"labels\": {\n                \"type\": \"array\",\n                \"items\": {\"type\": \"string\"},\n                \"description\": \"Array of label names to filter by (AND logic)\"\n            }\n        },\n        \"required\": [\"repository\"]\n    }\n)\n</code></pre>"},{"location":"best-practice/principles/#5-graceful-degradation","title":"5. Graceful Degradation","text":""},{"location":"best-practice/principles/#definition_4","title":"Definition","text":"<p>Servers should handle errors and edge cases gracefully, providing partial results when possible.</p>"},{"location":"best-practice/principles/#guidelines_4","title":"Guidelines","text":"<ul> <li>Partial Success: Return available data even if some operations fail</li> <li>Timeout Handling: Set reasonable timeouts and handle them gracefully</li> <li>Rate Limiting: Respect API limits and retry appropriately</li> <li>Circuit Breaker: Fail fast when external services are unavailable</li> </ul>"},{"location":"best-practice/principles/#implementation_3","title":"Implementation","text":"<pre><code>@server.call_tool()\nasync def get_user_profiles(name: str, arguments: dict):\n    user_ids = arguments[\"user_ids\"]\n    results = []\n    errors = []\n    \n    for user_id in user_ids:\n        try:\n            profile = await api_client.get_profile(user_id)\n            results.append(profile)\n        except APIError as e:\n            errors.append(f\"Failed to fetch user {user_id}: {e}\")\n            continue  # Continue with other users\n    \n    # Return partial results with error summary\n    response = {\n        \"profiles\": results,\n        \"successful_count\": len(results),\n        \"total_count\": len(user_ids)\n    }\n    \n    if errors:\n        response[\"errors\"] = errors\n    \n    return [TextContent(type=\"text\", text=json.dumps(response))]\n</code></pre>"},{"location":"best-practice/principles/#6-security-by-default","title":"6. Security by Default","text":""},{"location":"best-practice/principles/#definition_5","title":"Definition","text":"<p>Implement security best practices as the default behavior, not as an optional feature.</p>"},{"location":"best-practice/principles/#guidelines_5","title":"Guidelines","text":"<ul> <li>Input Sanitization: Always validate and sanitize inputs</li> <li>Least Privilege: Request minimal necessary permissions</li> <li>No Secrets in Logs: Never log sensitive information</li> <li>Secure Defaults: Err on the side of being more restrictive</li> </ul>"},{"location":"best-practice/principles/#implementation_4","title":"Implementation","text":"<pre><code>import re\nfrom pathlib import Path\n\n@server.call_tool()\nasync def read_file(name: str, arguments: dict):\n    file_path = arguments[\"file_path\"]\n    \n    # \u2705 Security validations\n    # Prevent path traversal\n    if \"..\" in file_path or file_path.startswith(\"/\"):\n        raise ValueError(\"Invalid file path: path traversal not allowed\")\n    \n    # Restrict to allowed directories\n    allowed_dirs = [\"/app/data\", \"/app/uploads\"]\n    abs_path = Path(file_path).resolve()\n    \n    if not any(str(abs_path).startswith(allowed) for allowed in allowed_dirs):\n        raise ValueError(\"File access outside allowed directories\")\n    \n    # Check file size before reading\n    if abs_path.stat().st_size &gt; 10_000_000:  # 10MB limit\n        raise ValueError(\"File too large to process\")\n</code></pre>"},{"location":"best-practice/principles/#7-observable-operations","title":"7. Observable Operations","text":""},{"location":"best-practice/principles/#definition_6","title":"Definition","text":"<p>Provide visibility into server operations through structured logging, metrics, and health checks.</p>"},{"location":"best-practice/principles/#guidelines_6","title":"Guidelines","text":"<ul> <li>Structured Logging: Use consistent, machine-readable log formats</li> <li>Operation Tracing: Log request lifecycle events</li> <li>Health Endpoints: Provide health and readiness checks</li> <li>Performance Metrics: Track response times and error rates</li> </ul>"},{"location":"best-practice/principles/#implementation_5","title":"Implementation","text":"<pre><code>import logging\nimport time\nfrom contextvars import ContextVar\n\n# Set up structured logging\nlogger = logging.getLogger(__name__)\nrequest_id: ContextVar[str] = ContextVar('request_id')\n\n@server.call_tool()\nasync def process_request(name: str, arguments: dict):\n    req_id = f\"req_{int(time.time() * 1000)}\"\n    request_id.set(req_id)\n    \n    logger.info(\"tool_execution_started\", extra={\n        \"tool\": name,\n        \"request_id\": req_id,\n        \"args_size\": len(str(arguments))\n    })\n    \n    start_time = time.time()\n    try:\n        result = await execute_tool(name, arguments)\n        \n        logger.info(\"tool_execution_completed\", extra={\n            \"tool\": name,\n            \"request_id\": req_id,\n            \"duration_ms\": int((time.time() - start_time) * 1000),\n            \"success\": True\n        })\n        \n        return result\n        \n    except Exception as e:\n        logger.error(\"tool_execution_failed\", extra={\n            \"tool\": name,\n            \"request_id\": req_id,\n            \"duration_ms\": int((time.time() - start_time) * 1000),\n            \"error\": str(e),\n            \"error_type\": type(e).__name__\n        })\n        raise\n</code></pre>"},{"location":"best-practice/principles/#8-resource-efficiency","title":"8. Resource Efficiency","text":""},{"location":"best-practice/principles/#definition_7","title":"Definition","text":"<p>Use system resources responsibly and implement appropriate limits and cleanup.</p>"},{"location":"best-practice/principles/#guidelines_7","title":"Guidelines","text":"<ul> <li>Memory Limits: Set bounds on memory usage</li> <li>Connection Pooling: Reuse connections to external services</li> <li>Cleanup Resources: Properly close files, connections, and handles</li> <li>Timeout Operations: Don't let operations run indefinitely</li> </ul>"},{"location":"best-practice/principles/#implementation_6","title":"Implementation","text":"<pre><code>import asyncio\nimport aiofiles\nfrom contextlib import asynccontextmanager\n\nclass ResourceManager:\n    def __init__(self):\n        self.connection_pool = None\n        self.max_concurrent = 10\n        self.semaphore = asyncio.Semaphore(self.max_concurrent)\n    \n    @asynccontextmanager\n    async def get_connection(self):\n        async with self.semaphore:  # Limit concurrent connections\n            conn = await self.connection_pool.acquire()\n            try:\n                yield conn\n            finally:\n                await self.connection_pool.release(conn)\n    \n    async def process_file(self, file_path: str):\n        # Use async file handling with automatic cleanup\n        async with aiofiles.open(file_path, 'r') as f:\n            # Process file with memory-efficient streaming\n            async for line in f:\n                if len(line) &gt; 10000:  # Skip overly long lines\n                    continue\n                yield line.strip()\n</code></pre>"},{"location":"best-practice/principles/#applying-these-principles","title":"Applying These Principles","text":""},{"location":"best-practice/principles/#during-design","title":"During Design","text":"<ul> <li>Principle-First Design: Consider these principles when designing your MCP server</li> <li>Trade-off Decisions: When principles conflict, document your reasoning</li> <li>Regular Review: Revisit designs against these principles as requirements evolve</li> </ul>"},{"location":"best-practice/principles/#during-implementation","title":"During Implementation","text":"<ul> <li>Code Reviews: Check implementations against these principles</li> <li>Testing Strategy: Test for principle adherence (security, error handling, etc.)</li> <li>Documentation: Document how your server follows these principles</li> </ul>"},{"location":"best-practice/principles/#during-operation","title":"During Operation","text":"<ul> <li>Monitoring: Track metrics that validate principle adherence</li> <li>Incident Analysis: Review incidents for principle violations</li> <li>Continuous Improvement: Refactor when principles are violated</li> </ul>"},{"location":"best-practice/principles/#principle-trade-offs","title":"Principle Trade-offs","text":"<p>Sometimes principles conflict. Here's how to handle common tensions:</p>"},{"location":"best-practice/principles/#performance-vs-security","title":"Performance vs. Security","text":"<ul> <li>Default: Choose security, optimize later</li> <li>Exception: When performance is critical and risks are well understood</li> </ul>"},{"location":"best-practice/principles/#simplicity-vs-flexibility","title":"Simplicity vs. Flexibility","text":"<ul> <li>Default: Start simple, add flexibility when needed</li> <li>Exception: When future requirements are well known</li> </ul>"},{"location":"best-practice/principles/#stateless-vs-performance","title":"Stateless vs. Performance","text":"<ul> <li>Default: Choose stateless design</li> <li>Exception: When caching provides significant benefits and complexity is manageable</li> </ul> <p>Remember: principles guide decisions but shouldn't be followed blindly. Use judgment and document your reasoning when deviating from these principles.</p>"},{"location":"best-practice/when-to-use-mcp/","title":"When to Use MCP","text":""},{"location":"best-practice/when-to-use-mcp/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a powerful tool for connecting AI applications with external systems, but it's not always the right solution. This guide helps you determine when MCP is the best choice for your use case.</p>"},{"location":"best-practice/when-to-use-mcp/#ideal-use-cases-for-mcp","title":"Ideal Use Cases for MCP","text":""},{"location":"best-practice/when-to-use-mcp/#tool-integration","title":"\ud83d\udd0c Tool Integration","text":"<p>Use MCP when you need to provide AI applications with executable functions:</p> <ul> <li>Database Operations: Query, insert, update database records</li> <li>File System Access: Read, write, search files and directories  </li> <li>API Integrations: Call external REST APIs, web services</li> <li>System Commands: Execute shell commands, system utilities</li> <li>Custom Business Logic: Domain-specific operations and workflows</li> </ul> <p>Example: A customer service AI that can look up order information, update tickets, and send notifications.</p>"},{"location":"best-practice/when-to-use-mcp/#contextual-data-access","title":"\ud83d\udcca Contextual Data Access","text":"<p>Use MCP when AI applications need access to rich contextual information:</p> <ul> <li>Configuration Data: Application settings, feature flags</li> <li>Reference Information: Documentation, knowledge bases, schemas</li> <li>Real-time Data: Status dashboards, metrics, live feeds</li> <li>Historical Data: Logs, analytics, audit trails</li> <li>User-specific Data: Preferences, history, personalized content</li> </ul> <p>Example: A coding assistant that can access project documentation, code standards, and deployment configurations.</p>"},{"location":"best-practice/when-to-use-mcp/#prompt-templates","title":"\ud83c\udfaf Prompt Templates","text":"<p>Use MCP when you have reusable interaction patterns:</p> <ul> <li>Domain-specific Prompts: Industry or business-specific templates</li> <li>Multi-step Workflows: Complex interaction sequences</li> <li>Few-shot Examples: Standardized example sets</li> <li>Role-based Prompts: Different prompts for different user types</li> <li>Parameterized Templates: Dynamic prompts with variables</li> </ul> <p>Example: A legal AI with templates for contract review, compliance checks, and document generation.</p>"},{"location":"best-practice/when-to-use-mcp/#when-mcp-is-the-right-choice","title":"When MCP Is the Right Choice","text":""},{"location":"best-practice/when-to-use-mcp/#you-should-use-mcp-when","title":"\u2705 You Should Use MCP When:","text":""},{"location":"best-practice/when-to-use-mcp/#standardization-matters","title":"Standardization Matters","text":"<ul> <li>You want consistent integration patterns across multiple AI applications</li> <li>You're building for an ecosystem where interoperability is important</li> <li>You need to support multiple AI models or clients</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#security-and-control-are-important","title":"Security and Control Are Important","text":"<ul> <li>You need fine-grained access control to external resources</li> <li>You want to audit and monitor AI system interactions</li> <li>You need to implement rate limiting or usage quotas</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#you-have-multiple-integrations","title":"You Have Multiple Integrations","text":"<ul> <li>You're connecting AI to 3+ external systems</li> <li>Different teams will build and maintain different integrations</li> <li>You want to avoid tight coupling between AI and external systems</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#future-flexibility-is-valued","title":"Future Flexibility Is Valued","text":"<ul> <li>You might switch AI models or providers</li> <li>You want to reuse integrations across different applications</li> <li>You need to support both local and remote deployments</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#you-might-not-need-mcp-when","title":"\u274c You Might Not Need MCP When:","text":""},{"location":"best-practice/when-to-use-mcp/#simple-direct-integrations","title":"Simple, Direct Integrations","text":"<ul> <li>Single AI application with 1-2 external systems</li> <li>Direct API calls are sufficient and straightforward</li> <li>No need for standardized patterns</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#prototype-or-proof-of-concept","title":"Prototype or Proof of Concept","text":"<ul> <li>Quick experimentation with AI capabilities</li> <li>Short-term projects with no long-term maintenance</li> <li>Learning or educational purposes</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#existing-integration-patterns","title":"Existing Integration Patterns","text":"<ul> <li>You already have robust, well-tested integration systems</li> <li>Significant investment in current architecture</li> <li>Current solution meets all requirements</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#decision-framework","title":"Decision Framework","text":""},{"location":"best-practice/when-to-use-mcp/#questions-to-ask","title":"Questions to Ask","text":"<ol> <li>Scale: Will you have more than 2-3 external integrations?</li> <li>Reusability: Will multiple AI applications use the same integrations?</li> <li>Longevity: Is this a long-term, production system?</li> <li>Team Size: Will multiple teams work on different integrations?</li> <li>Security: Do you need granular access control and auditing?</li> <li>Flexibility: Might you change AI models or deployment patterns?</li> </ol>"},{"location":"best-practice/when-to-use-mcp/#decision-matrix","title":"Decision Matrix","text":"Factor Direct Integration MCP Integration Development Speed Fast (1-2 integrations) Moderate setup, fast scaling Maintenance Overhead Low (simple cases) Moderate but standardized Flexibility Low High Reusability Low High Standardization Low High Learning Curve Low Moderate"},{"location":"best-practice/when-to-use-mcp/#common-patterns","title":"Common Patterns","text":""},{"location":"best-practice/when-to-use-mcp/#start-simple-migrate-to-mcp","title":"Start Simple, Migrate to MCP","text":"<p>Many successful projects start with direct integrations and migrate to MCP as they scale:</p> <ol> <li>Phase 1: Direct API calls for initial functionality</li> <li>Phase 2: Extract reusable components  </li> <li>Phase 3: Implement MCP servers for standardization</li> <li>Phase 4: Full MCP ecosystem with multiple servers</li> </ol>"},{"location":"best-practice/when-to-use-mcp/#hybrid-approaches","title":"Hybrid Approaches","text":"<p>You don't have to choose all-or-nothing:</p> <ul> <li>Core Functions: Use MCP for frequently used, standardized operations</li> <li>Specialized Cases: Direct integration for unique, one-off requirements</li> <li>Legacy Systems: Gradual migration as systems are updated</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#architecture-considerations","title":"Architecture Considerations","text":""},{"location":"best-practice/when-to-use-mcp/#when-mcp-adds-value","title":"When MCP Adds Value","text":"<ul> <li>Microservices Architecture: MCP servers as service adapters</li> <li>Multi-tenant Systems: Shared MCP servers with tenant isolation  </li> <li>Edge Deployments: Local MCP servers for reduced latency</li> <li>Compliance Environments: Centralized audit and control</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#when-direct-integration-is-simpler","title":"When Direct Integration Is Simpler","text":"<ul> <li>Monolithic Applications: Single codebase with embedded logic</li> <li>Simple CRUD Operations: Basic database or API interactions</li> <li>Temporary Implementations: Short-term or experimental features</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#migration-path","title":"Migration Path","text":""},{"location":"best-practice/when-to-use-mcp/#from-direct-integration-to-mcp","title":"From Direct Integration to MCP","text":"<ol> <li>Identify Patterns: Look for repeated integration code</li> <li>Extract Functions: Create standalone functions for common operations</li> <li>Implement MCP Server: Wrap functions in MCP protocol</li> <li>Gradual Migration: Move one integration at a time</li> <li>Deprecate Direct Calls: Remove old integration code</li> </ol>"},{"location":"best-practice/when-to-use-mcp/#migration-checklist","title":"Migration Checklist","text":"<ul> <li> Document existing integrations and their usage patterns</li> <li> Identify common operations that could be standardized</li> <li> Create MCP servers for high-value integrations first</li> <li> Implement side-by-side testing</li> <li> Plan rollback strategy for each migration step</li> <li> Update documentation and team training</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#success-metrics","title":"Success Metrics","text":""},{"location":"best-practice/when-to-use-mcp/#indicators-mcp-is-working-well","title":"Indicators MCP Is Working Well","text":"<ul> <li>Reduced time to add new AI integrations</li> <li>Consistent patterns across different applications</li> <li>Easier testing and debugging of AI interactions</li> <li>Improved security and compliance posture</li> <li>Higher developer satisfaction with integration development</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#warning-signs","title":"Warning Signs","text":"<ul> <li>MCP servers becoming overly complex or monolithic</li> <li>Significant performance overhead from protocol layer</li> <li>Team struggling with MCP concepts and implementation</li> <li>More time spent on MCP infrastructure than business value</li> </ul>"},{"location":"best-practice/when-to-use-mcp/#conclusion","title":"Conclusion","text":"<p>MCP shines when you need standardization, flexibility, and long-term maintainability for AI integrations. It's particularly valuable in:</p> <ul> <li>Enterprise environments with multiple AI applications</li> <li>Teams building AI ecosystems rather than single applications  </li> <li>Organizations prioritizing security and auditability</li> <li>Projects expecting significant growth in integration complexity</li> </ul> <p>Choose MCP when the long-term benefits of standardization outweigh the initial learning curve and setup overhead. For simple, short-term, or highly specialized use cases, direct integration might be more appropriate.</p> <p>Remember: you can always start simple and migrate to MCP as your needs evolve. The key is making an informed decision based on your specific context and requirements.</p>"},{"location":"deploy/","title":"Deployment Guide","text":""},{"location":"deploy/#deploying-mcp-servers-to-production","title":"Deploying MCP Servers to Production","text":"<p>This guide covers deployment strategies, platforms, and best practices for running MCP servers in production environments.</p>"},{"location":"deploy/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"deploy/#blue-green-deployment","title":"Blue-Green Deployment","text":"<p>Switch between two identical production environments: <pre><code># Blue environment (current)\nblue:\n  version: 1.0.0\n  status: active\n  health: healthy\n\n# Green environment (new)\ngreen:\n  version: 1.1.0\n  status: standby\n  health: testing\n\n# Switch traffic to green after validation\n</code></pre></p>"},{"location":"deploy/#canary-deployment","title":"Canary Deployment","text":"<p>Gradually roll out changes to a subset of users: <pre><code>deployment:\n  strategy: canary\n  stages:\n    - traffic: 5%\n      duration: 1h\n    - traffic: 25%\n      duration: 2h\n    - traffic: 50%\n      duration: 4h\n    - traffic: 100%\n</code></pre></p>"},{"location":"deploy/#rolling-deployment","title":"Rolling Deployment","text":"<p>Update instances one at a time: <pre><code>deployment:\n  strategy: rolling\n  max_surge: 1\n  max_unavailable: 0\n</code></pre></p>"},{"location":"deploy/#deployment-platforms","title":"Deployment Platforms","text":""},{"location":"deploy/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Kubernetes: Enterprise-grade orchestration</li> <li>Docker Swarm: Simple orchestration</li> <li>Nomad: Flexible workload orchestration</li> <li>ECS/Fargate: AWS managed containers</li> </ul>"},{"location":"deploy/#serverless","title":"Serverless","text":"<ul> <li>AWS Lambda: Event-driven compute</li> <li>Google Cloud Functions: Auto-scaling functions</li> <li>Azure Functions: Serverless compute</li> <li>Vercel/Netlify: Edge functions</li> </ul>"},{"location":"deploy/#traditional","title":"Traditional","text":"<ul> <li>VMs: Full control, higher overhead</li> <li>Bare Metal: Maximum performance</li> <li>PaaS: Heroku, Railway, Render</li> </ul>"},{"location":"deploy/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":""},{"location":"deploy/#code-readiness","title":"Code Readiness","text":"<ul> <li> All tests passing</li> <li> Security scan completed</li> <li> Dependencies updated</li> <li> Documentation current</li> <li> Version tagged</li> </ul>"},{"location":"deploy/#infrastructure","title":"Infrastructure","text":"<ul> <li> Resources provisioned</li> <li> Network configured</li> <li> SSL certificates ready</li> <li> DNS configured</li> <li> Monitoring setup</li> </ul>"},{"location":"deploy/#configuration","title":"Configuration","text":"<ul> <li> Environment variables set</li> <li> Secrets stored securely</li> <li> Feature flags configured</li> <li> Rate limits defined</li> <li> Backup configured</li> </ul>"},{"location":"deploy/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deploy/#deployment-manifest","title":"Deployment Manifest","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-server\n  labels:\n    app: mcp-server\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mcp-server\n  template:\n    metadata:\n      labels:\n        app: mcp-server\n    spec:\n      containers:\n      - name: mcp-server\n        image: mcp-server:1.0.0\n        ports:\n        - containerPort: 8000\n        env:\n        - name: MCP_ENV\n          value: production\n        - name: MCP_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: mcp-secrets\n              key: api-key\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre>"},{"location":"deploy/#service-configuration","title":"Service Configuration","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: mcp-server-service\nspec:\n  selector:\n    app: mcp-server\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8000\n  type: LoadBalancer\n</code></pre>"},{"location":"deploy/#docker-compose-deployment","title":"Docker Compose Deployment","text":""},{"location":"deploy/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  mcp-server:\n    image: mcp-server:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - MCP_ENV=production\n      - MCP_DB_HOST=postgres\n    depends_on:\n      - postgres\n      - redis\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 3s\n      retries: 3\n\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: mcp\n      POSTGRES_USER: mcp\n      POSTGRES_PASSWORD_FILE: /run/secrets/db_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    secrets:\n      - db_password\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n</code></pre>"},{"location":"deploy/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"deploy/#aws-deployment","title":"AWS Deployment","text":"<pre><code># Build and push to ECR\naws ecr get-login-password --region us-east-1 | \\\n  docker login --username AWS --password-stdin $ECR_URI\n\ndocker build -t mcp-server .\ndocker tag mcp-server:latest $ECR_URI/mcp-server:latest\ndocker push $ECR_URI/mcp-server:latest\n\n# Deploy with ECS\naws ecs update-service \\\n  --cluster mcp-cluster \\\n  --service mcp-server \\\n  --force-new-deployment\n</code></pre>"},{"location":"deploy/#google-cloud-deployment","title":"Google Cloud Deployment","text":"<pre><code># Build and push to GCR\ngcloud builds submit --tag gcr.io/$PROJECT_ID/mcp-server\n\n# Deploy to Cloud Run\ngcloud run deploy mcp-server \\\n  --image gcr.io/$PROJECT_ID/mcp-server \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated\n</code></pre>"},{"location":"deploy/#azure-deployment","title":"Azure Deployment","text":"<pre><code># Build and push to ACR\naz acr build --registry $ACR_NAME --image mcp-server .\n\n# Deploy to Container Instances\naz container create \\\n  --resource-group mcp-rg \\\n  --name mcp-server \\\n  --image $ACR_NAME.azurecr.io/mcp-server:latest \\\n  --dns-name-label mcp-server \\\n  --ports 8000\n</code></pre>"},{"location":"deploy/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deploy/#production-settings","title":"Production Settings","text":"<pre><code># config/production.py\nimport os\n\nclass ProductionConfig:\n    DEBUG = False\n    TESTING = False\n    \n    # Server\n    HOST = '0.0.0.0'\n    PORT = int(os.getenv('PORT', 8000))\n    WORKERS = int(os.getenv('WORKERS', 4))\n    \n    # Security\n    SECRET_KEY = os.getenv('SECRET_KEY')\n    SSL_REDIRECT = True\n    SESSION_COOKIE_SECURE = True\n    \n    # Database\n    DATABASE_URL = os.getenv('DATABASE_URL')\n    DATABASE_POOL_SIZE = 20\n    \n    # Caching\n    REDIS_URL = os.getenv('REDIS_URL')\n    CACHE_TTL = 3600\n    \n    # Monitoring\n    SENTRY_DSN = os.getenv('SENTRY_DSN')\n    LOG_LEVEL = 'INFO'\n</code></pre>"},{"location":"deploy/#load-balancing","title":"Load Balancing","text":""},{"location":"deploy/#nginx-configuration","title":"NGINX Configuration","text":"<pre><code>upstream mcp_servers {\n    least_conn;\n    server mcp1.example.com:8000 weight=3;\n    server mcp2.example.com:8000 weight=2;\n    server mcp3.example.com:8000 weight=1;\n    \n    keepalive 32;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name api.example.com;\n    \n    ssl_certificate /etc/ssl/certs/api.crt;\n    ssl_certificate_key /etc/ssl/private/api.key;\n    \n    location / {\n        proxy_pass http://mcp_servers;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n</code></pre>"},{"location":"deploy/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"deploy/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'mcp-server'\n    static_configs:\n      - targets: ['mcp1:8000', 'mcp2:8000', 'mcp3:8000']\n    metrics_path: '/metrics'\n</code></pre>"},{"location":"deploy/#grafana-dashboard","title":"Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Server Monitoring\",\n    \"panels\": [\n      {\n        \"title\": \"Request Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(mcp_requests_total[5m])\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Error Rate\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(mcp_errors_total[5m])\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Response Time\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, mcp_request_duration_seconds)\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"deploy/#post-deployment","title":"Post-Deployment","text":""},{"location":"deploy/#smoke-tests","title":"Smoke Tests","text":"<pre><code>#!/bin/bash\n# smoke_test.sh\n\nset -e\n\nURL=\"${1:-http://localhost:8000}\"\n\necho \"Running smoke tests for $URL\"\n\n# Health check\ncurl -f \"$URL/health\" || exit 1\n\n# Tool listing\ncurl -f \"$URL/mcp\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}' || exit 1\n\n# Sample tool execution\ncurl -f \"$URL/mcp\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/call\",\"params\":{\"name\":\"echo\",\"arguments\":{\"text\":\"test\"}},\"id\":2}' || exit 1\n\necho \"Smoke tests passed!\"\n</code></pre>"},{"location":"deploy/#rollback-procedure","title":"Rollback Procedure","text":"<pre><code>#!/bin/bash\n# rollback.sh\n\nPREVIOUS_VERSION=\"${1:-1.0.0}\"\n\necho \"Rolling back to version $PREVIOUS_VERSION\"\n\n# Kubernetes rollback\nkubectl rollout undo deployment/mcp-server\n\n# Docker rollback\ndocker service update --image mcp-server:$PREVIOUS_VERSION mcp-server\n\n# Verify rollback\n./smoke_test.sh\n</code></pre>"},{"location":"deploy/#next-steps","title":"Next Steps","text":"<ul> <li>\u2601\ufe0f Cloud Deployment Details</li> <li>\ud83c\udfed On-Premise Deployment</li> <li>\u2638\ufe0f Kubernetes Deep Dive</li> <li>\ud83d\udd04 CI/CD Pipelines</li> <li>\ud83c\udf10 Edge Deployment</li> </ul>"},{"location":"develop/","title":"Development Guide","text":""},{"location":"develop/#building-mcp-servers","title":"Building MCP Servers","text":"<p>This guide covers development best practices for creating MCP servers in various programming languages.</p>"},{"location":"develop/#language-support","title":"Language Support","text":"<p>MCP has official SDKs and community support for multiple languages:</p>"},{"location":"develop/#official-sdks","title":"Official SDKs","text":"<ul> <li>\ud83d\udc0d Python - Full-featured SDK with FastMCP framework</li> <li>\ud83d\udcdc JavaScript/TypeScript - Node.js and browser support</li> <li>\ud83d\udc39 Go - High-performance native implementation</li> </ul>"},{"location":"develop/#community-sdks","title":"Community SDKs","text":"<ul> <li>\ud83e\udd80 Rust - Systems programming with safety</li> <li>\u2615 Java - Enterprise applications</li> <li>\ud83d\udc8e Ruby - Web applications</li> </ul>"},{"location":"develop/#development-workflow","title":"Development Workflow","text":""},{"location":"develop/#1-setup-environment","title":"1. Setup Environment","text":"<pre><code># Create project directory\nmkdir my-mcp-server\ncd my-mcp-server\n\n# Initialize version control\ngit init\n\n# Setup language-specific environment\nmake venv  # Python\nnpm init   # JavaScript\ngo mod init # Go\n</code></pre>"},{"location":"develop/#2-project-structure","title":"2. Project Structure","text":"<pre><code>my-mcp-server/\n\u251c\u2500\u2500 src/              # Source code\n\u251c\u2500\u2500 tests/            # Test files\n\u251c\u2500\u2500 docs/             # Documentation\n\u251c\u2500\u2500 Makefile          # Build automation\n\u251c\u2500\u2500 Containerfile     # Container definition\n\u251c\u2500\u2500 README.md         # Project documentation\n\u2514\u2500\u2500 pyproject.toml    # Dependencies (Python)\n</code></pre>"},{"location":"develop/#3-development-cycle","title":"3. Development Cycle","text":"<ol> <li>Write code with type hints/annotations</li> <li>Add comprehensive tests</li> <li>Document with docstrings</li> <li>Run linters and formatters</li> <li>Build and test locally</li> <li>Container testing</li> <li>Integration testing</li> </ol>"},{"location":"develop/#core-development-principles","title":"Core Development Principles","text":""},{"location":"develop/#1-single-responsibility","title":"1. Single Responsibility","text":"<p>Each MCP server should have a clear, focused purpose: - \u2705 GitHub integration server - \u2705 Database connector server - \u274c GitHub + Jira + Database server</p>"},{"location":"develop/#2-type-safety","title":"2. Type Safety","text":"<p>Use strong typing for all interfaces: <pre><code>def process_data(input: str, count: int) -&gt; dict[str, Any]:\n    \"\"\"Process input data with type hints\"\"\"\n</code></pre></p>"},{"location":"develop/#3-error-handling","title":"3. Error Handling","text":"<p>Implement comprehensive error handling: <pre><code>try:\n    result = risky_operation()\nexcept SpecificError as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise McpError(\"User-friendly error message\")\n</code></pre></p>"},{"location":"develop/#4-input-validation","title":"4. Input Validation","text":"<p>Always validate and sanitize inputs: <pre><code>from pydantic import BaseModel, validator\n\nclass ToolInput(BaseModel):\n    text: str\n    \n    @validator('text')\n    def validate_text(cls, v):\n        if not v.strip():\n            raise ValueError(\"Text cannot be empty\")\n        return v\n</code></pre></p>"},{"location":"develop/#testing-strategy","title":"Testing Strategy","text":""},{"location":"develop/#unit-tests","title":"Unit Tests","text":"<p>Test individual functions and methods: <pre><code>def test_tool_function():\n    result = my_tool(\"input\")\n    assert result == \"expected\"\n</code></pre></p>"},{"location":"develop/#integration-tests","title":"Integration Tests","text":"<p>Test server endpoints and protocols: <pre><code>curl -X POST http://localhost:8000/mcp \\\n  -d '{\"method\": \"tools/call\", ...}'\n</code></pre></p>"},{"location":"develop/#end-to-end-tests","title":"End-to-End Tests","text":"<p>Test complete workflows through gateway: <pre><code>mcp-cli cmd --server my-server \\\n  --tool my_tool --tool-args '{...}'\n</code></pre></p>"},{"location":"develop/#performance-considerations","title":"Performance Considerations","text":""},{"location":"develop/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Async Operations: Use async/await for I/O operations</li> <li>Connection Pooling: Reuse database/API connections</li> <li>Caching: Cache frequently accessed data</li> <li>Batch Processing: Group operations when possible</li> <li>Resource Limits: Set timeouts and memory limits</li> </ol>"},{"location":"develop/#monitoring","title":"Monitoring","text":"<ul> <li>Request/response times</li> <li>Error rates</li> <li>Resource usage</li> <li>Concurrent connections</li> </ul>"},{"location":"develop/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never hardcode secrets</li> <li>Validate all inputs</li> <li>Use environment variables</li> <li>Implement rate limiting</li> <li>Log security events</li> <li>Regular dependency updates</li> </ol>"},{"location":"develop/#documentation-requirements","title":"Documentation Requirements","text":"<p>Every MCP server must include: - README with setup instructions - API documentation - Environment variable reference - Example usage - Troubleshooting guide</p>"},{"location":"develop/#quick-links","title":"Quick Links","text":"<ul> <li>\ud83c\udfaf Common Patterns</li> <li>\ud83d\udd27 Development Tools</li> <li>\ud83d\udcda Tutorials</li> <li>\ud83e\uddea Testing Guide</li> <li>\ud83d\udce6 Packaging Guide</li> </ul>"},{"location":"develop/go/","title":"Go Development","text":""},{"location":"develop/go/#mcp-server-development-with-go","title":"MCP Server Development with Go","text":"<p>Go provides excellent performance and concurrency for MCP servers, making it ideal for high-throughput applications.</p>"},{"location":"develop/go/#quick-start","title":"Quick Start","text":""},{"location":"develop/go/#installation","title":"Installation","text":"<pre><code>go get github.com/modelcontextprotocol/go-mcp\n</code></pre>"},{"location":"develop/go/#basic-server","title":"Basic Server","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \n    \"github.com/modelcontextprotocol/go-mcp/server\"\n    \"github.com/modelcontextprotocol/go-mcp/types\"\n)\n\nfunc main() {\n    // Create server\n    srv := server.New(\"my-go-server\", \"1.0.0\")\n    \n    // Register tool\n    srv.RegisterTool(\"greet\", types.Tool{\n        Description: \"Greet someone\",\n        Parameters: types.Parameters{\n            Type: \"object\",\n            Properties: map[string]types.Property{\n                \"name\": {Type: \"string\", Description: \"Name to greet\"},\n            },\n            Required: []string{\"name\"},\n        },\n    }, greetHandler)\n    \n    // Start server\n    if err := srv.Start(\":8000\"); err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc greetHandler(ctx context.Context, params map[string]interface{}) (interface{}, error) {\n    name, ok := params[\"name\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"name must be a string\")\n    }\n    \n    return fmt.Sprintf(\"Hello, %s!\", name), nil\n}\n</code></pre>"},{"location":"develop/go/#project-structure","title":"Project Structure","text":""},{"location":"develop/go/#standard-layout","title":"Standard Layout","text":"<pre><code>my-go-server/\n\u251c\u2500\u2500 cmd/\n\u2502   \u2514\u2500\u2500 server/\n\u2502       \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 internal/\n\u2502   \u251c\u2500\u2500 handlers/\n\u2502   \u2502   \u2514\u2500\u2500 tools.go\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 types.go\n\u2502   \u2514\u2500\u2500 service/\n\u2502       \u2514\u2500\u2500 service.go\n\u251c\u2500\u2500 pkg/\n\u2502   \u2514\u2500\u2500 client/\n\u2502       \u2514\u2500\u2500 client.go\n\u251c\u2500\u2500 configs/\n\u2502   \u2514\u2500\u2500 config.yaml\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 build.sh\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"develop/go/#go-module","title":"Go Module","text":"<pre><code>// go.mod\nmodule github.com/yourusername/my-mcp-server\n\ngo 1.21\n\nrequire (\n    github.com/modelcontextprotocol/go-mcp v1.0.0\n    github.com/gorilla/mux v1.8.0\n    github.com/spf13/viper v1.16.0\n)\n</code></pre>"},{"location":"develop/go/#advanced-implementation","title":"Advanced Implementation","text":""},{"location":"develop/go/#structured-tools","title":"Structured Tools","text":"<pre><code>type GreetRequest struct {\n    Name     string `json:\"name\" validate:\"required\"`\n    Greeting string `json:\"greeting,omitempty\"`\n}\n\ntype GreetResponse struct {\n    Message   string    `json:\"message\"`\n    Timestamp time.Time `json:\"timestamp\"`\n}\n\nfunc (s *Server) RegisterTools() {\n    s.mcp.RegisterTool(\"greet\", types.Tool{\n        Description: \"Greet someone with timestamp\",\n        Parameters:  generateSchema(GreetRequest{}),\n    }, s.handleGreet)\n}\n\nfunc (s *Server) handleGreet(ctx context.Context, params json.RawMessage) (interface{}, error) {\n    var req GreetRequest\n    if err := json.Unmarshal(params, &amp;req); err != nil {\n        return nil, fmt.Errorf(\"invalid parameters: %w\", err)\n    }\n    \n    if err := s.validator.Struct(req); err != nil {\n        return nil, fmt.Errorf(\"validation failed: %w\", err)\n    }\n    \n    greeting := \"Hello\"\n    if req.Greeting != \"\" {\n        greeting = req.Greeting\n    }\n    \n    return GreetResponse{\n        Message:   fmt.Sprintf(\"%s, %s!\", greeting, req.Name),\n        Timestamp: time.Now(),\n    }, nil\n}\n</code></pre>"},{"location":"develop/go/#concurrent-operations","title":"Concurrent Operations","text":"<pre><code>func (s *Server) handleBatchProcess(ctx context.Context, items []string) ([]Result, error) {\n    results := make([]Result, len(items))\n    errChan := make(chan error, len(items))\n    \n    var wg sync.WaitGroup\n    for i, item := range items {\n        wg.Add(1)\n        go func(index int, data string) {\n            defer wg.Done()\n            \n            result, err := s.processItem(ctx, data)\n            if err != nil {\n                errChan &lt;- err\n                return\n            }\n            results[index] = result\n        }(i, item)\n    }\n    \n    wg.Wait()\n    close(errChan)\n    \n    // Check for errors\n    for err := range errChan {\n        if err != nil {\n            return nil, fmt.Errorf(\"batch processing failed: %w\", err)\n        }\n    }\n    \n    return results, nil\n}\n</code></pre>"},{"location":"develop/go/#resource-management","title":"Resource Management","text":"<pre><code>type ResourceManager struct {\n    pool *sql.DB\n    cache *cache.Cache\n    mu    sync.RWMutex\n}\n\nfunc NewResourceManager(config *Config) (*ResourceManager, error) {\n    db, err := sql.Open(\"postgres\", config.DatabaseURL)\n    if err != nil {\n        return nil, err\n    }\n    \n    db.SetMaxOpenConns(25)\n    db.SetMaxIdleConns(5)\n    db.SetConnMaxLifetime(5 * time.Minute)\n    \n    return &amp;ResourceManager{\n        pool:  db,\n        cache: cache.New(5*time.Minute, 10*time.Minute),\n    }, nil\n}\n\nfunc (rm *ResourceManager) Get(ctx context.Context, key string) (interface{}, error) {\n    // Check cache first\n    if val, found := rm.cache.Get(key); found {\n        return val, nil\n    }\n    \n    // Query database\n    var result interface{}\n    err := rm.pool.QueryRowContext(ctx, \n        \"SELECT data FROM resources WHERE key = $1\", key).Scan(&amp;result)\n    \n    if err == nil {\n        rm.cache.Set(key, result, cache.DefaultExpiration)\n    }\n    \n    return result, err\n}\n</code></pre>"},{"location":"develop/go/#error-handling","title":"Error Handling","text":""},{"location":"develop/go/#custom-error-types","title":"Custom Error Types","text":"<pre><code>type McpError struct {\n    Code    int    `json:\"code\"`\n    Message string `json:\"message\"`\n    Details any    `json:\"details,omitempty\"`\n}\n\nfunc (e *McpError) Error() string {\n    return fmt.Sprintf(\"MCP Error %d: %s\", e.Code, e.Message)\n}\n\nfunc NewMcpError(code int, message string, details ...any) *McpError {\n    err := &amp;McpError{\n        Code:    code,\n        Message: message,\n    }\n    if len(details) &gt; 0 {\n        err.Details = details[0]\n    }\n    return err\n}\n\n// Error codes\nconst (\n    ErrInvalidParams = -32602\n    ErrInternal      = -32603\n    ErrTimeout       = -32001\n    ErrRateLimit     = -32002\n)\n</code></pre>"},{"location":"develop/go/#error-middleware","title":"Error Middleware","text":"<pre><code>func ErrorMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        defer func() {\n            if err := recover(); err != nil {\n                log.Printf(\"Panic recovered: %v\", err)\n                \n                mcpErr := NewMcpError(ErrInternal, \"Internal server error\")\n                respondWithError(w, mcpErr)\n            }\n        }()\n        \n        next.ServeHTTP(w, r)\n    })\n}\n</code></pre>"},{"location":"develop/go/#testing","title":"Testing","text":""},{"location":"develop/go/#unit-tests","title":"Unit Tests","text":"<pre><code>func TestGreetHandler(t *testing.T) {\n    tests := []struct {\n        name    string\n        params  map[string]interface{}\n        want    string\n        wantErr bool\n    }{\n        {\n            name:    \"valid name\",\n            params:  map[string]interface{}{\"name\": \"Alice\"},\n            want:    \"Hello, Alice!\",\n            wantErr: false,\n        },\n        {\n            name:    \"missing name\",\n            params:  map[string]interface{}{},\n            want:    \"\",\n            wantErr: true,\n        },\n    }\n    \n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            got, err := greetHandler(context.Background(), tt.params)\n            \n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"greetHandler() error = %v, wantErr %v\", err, tt.wantErr)\n                return\n            }\n            \n            if !tt.wantErr &amp;&amp; got != tt.want {\n                t.Errorf(\"greetHandler() = %v, want %v\", got, tt.want)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"develop/go/#integration-tests","title":"Integration Tests","text":"<pre><code>func TestServerIntegration(t *testing.T) {\n    // Start test server\n    srv := NewTestServer(t)\n    defer srv.Close()\n    \n    // Test tool invocation\n    resp, err := srv.CallTool(\"greet\", map[string]interface{}{\n        \"name\": \"Test\",\n    })\n    \n    require.NoError(t, err)\n    assert.Equal(t, \"Hello, Test!\", resp)\n}\n</code></pre>"},{"location":"develop/go/#performance","title":"Performance","text":""},{"location":"develop/go/#benchmarking","title":"Benchmarking","text":"<pre><code>func BenchmarkGreetHandler(b *testing.B) {\n    params := map[string]interface{}{\"name\": \"Benchmark\"}\n    ctx := context.Background()\n    \n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        _, _ = greetHandler(ctx, params)\n    }\n}\n</code></pre>"},{"location":"develop/go/#profiling","title":"Profiling","text":"<pre><code>import _ \"net/http/pprof\"\n\nfunc main() {\n    // Enable profiling\n    go func() {\n        log.Println(http.ListenAndServe(\"localhost:6060\", nil))\n    }()\n    \n    // Start MCP server\n    startServer()\n}\n</code></pre>"},{"location":"develop/go/#configuration","title":"Configuration","text":""},{"location":"develop/go/#using-viper","title":"Using Viper","text":"<pre><code>type Config struct {\n    Server   ServerConfig   `mapstructure:\"server\"`\n    Database DatabaseConfig `mapstructure:\"database\"`\n    MCP      MCPConfig      `mapstructure:\"mcp\"`\n}\n\nfunc LoadConfig(path string) (*Config, error) {\n    viper.SetConfigFile(path)\n    viper.SetEnvPrefix(\"MCP\")\n    viper.AutomaticEnv()\n    \n    if err := viper.ReadInConfig(); err != nil {\n        return nil, err\n    }\n    \n    var config Config\n    if err := viper.Unmarshal(&amp;config); err != nil {\n        return nil, err\n    }\n    \n    return &amp;config, nil\n}\n</code></pre>"},{"location":"develop/go/#build-and-deploy","title":"Build and Deploy","text":""},{"location":"develop/go/#makefile","title":"Makefile","text":"<pre><code>.PHONY: build test run\n\nbuild:\n\tgo build -o bin/server cmd/server/main.go\n\ntest:\n\tgo test -v -cover ./...\n\nrun:\n\tgo run cmd/server/main.go\n\ndocker:\n\tdocker build -t my-mcp-server .\n\nclean:\n\trm -rf bin/\n</code></pre>"},{"location":"develop/go/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83c\udfd7\ufe0f Project Structure</li> <li>\ud83d\udd27 Implementation Details</li> <li>\ud83e\uddea Testing Strategies</li> <li>\ud83d\udce6 Building &amp; Packaging</li> <li>\ud83c\udfaf Go Best Practices</li> </ul>"},{"location":"develop/javascript/","title":"JavaScript/TypeScript Development","text":""},{"location":"develop/javascript/#mcp-server-development-with-javascript","title":"MCP Server Development with JavaScript","text":"<p>Build MCP servers using JavaScript or TypeScript with the official SDK.</p>"},{"location":"develop/javascript/#quick-start","title":"Quick Start","text":""},{"location":"develop/javascript/#installation","title":"Installation","text":"<pre><code># npm\nnpm install @modelcontextprotocol/sdk\n\n# yarn\nyarn add @modelcontextprotocol/sdk\n\n# pnpm\npnpm add @modelcontextprotocol/sdk\n</code></pre>"},{"location":"develop/javascript/#basic-server-javascript","title":"Basic Server (JavaScript)","text":"<pre><code>const { Server } = require('@modelcontextprotocol/sdk');\n\nconst server = new Server({\n  name: 'my-js-server',\n  version: '1.0.0'\n});\n\nserver.tool('greet', {\n  description: 'Greet someone',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n    },\n    required: ['name']\n  }\n}, async ({ name }) =&gt; {\n  return `Hello, ${name}!`;\n});\n\nserver.start();\n</code></pre>"},{"location":"develop/javascript/#typescript-server","title":"TypeScript Server","text":"<pre><code>import { Server, Tool } from '@modelcontextprotocol/sdk';\n\ninterface GreetParams {\n  name: string;\n  greeting?: string;\n}\n\nconst server = new Server({\n  name: 'my-ts-server',\n  version: '1.0.0'\n});\n\nconst greetTool: Tool&lt;GreetParams&gt; = {\n  name: 'greet',\n  description: 'Greet someone',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' },\n      greeting: { type: 'string', default: 'Hello' }\n    },\n    required: ['name']\n  },\n  handler: async ({ name, greeting = 'Hello' }) =&gt; {\n    return `${greeting}, ${name}!`;\n  }\n};\n\nserver.registerTool(greetTool);\nserver.start();\n</code></pre>"},{"location":"develop/javascript/#project-setup","title":"Project Setup","text":""},{"location":"develop/javascript/#packagejson","title":"Package.json","text":"<pre><code>{\n  \"name\": \"my-mcp-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"start\": \"node dist/index.js\",\n    \"dev\": \"tsx watch src/index.ts\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint src/**/*.ts\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"tsx\": \"^4.0.0\",\n    \"jest\": \"^29.0.0\",\n    \"@types/jest\": \"^29.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\"\n  }\n}\n</code></pre>"},{"location":"develop/javascript/#typescript-configuration","title":"TypeScript Configuration","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2022\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\"]\n}\n</code></pre>"},{"location":"develop/javascript/#advanced-features","title":"Advanced Features","text":""},{"location":"develop/javascript/#async-operations","title":"Async Operations","text":"<pre><code>server.tool('fetchData', {\n  description: 'Fetch data from API',\n  parameters: {\n    type: 'object',\n    properties: {\n      url: { type: 'string', format: 'uri' }\n    },\n    required: ['url']\n  }\n}, async ({ url }) =&gt; {\n  const response = await fetch(url);\n  const data = await response.json();\n  return JSON.stringify(data, null, 2);\n});\n</code></pre>"},{"location":"develop/javascript/#resource-providers","title":"Resource Providers","text":"<pre><code>server.resource('config', {\n  description: 'Server configuration',\n  handler: async () =&gt; {\n    return {\n      version: '1.0.0',\n      features: ['tools', 'resources'],\n      environment: process.env.NODE_ENV\n    };\n  }\n});\n</code></pre>"},{"location":"develop/javascript/#error-handling","title":"Error Handling","text":"<pre><code>class McpError extends Error {\n  constructor(message: string, public code: number = -32000) {\n    super(message);\n    this.name = 'McpError';\n  }\n}\n\nserver.tool('riskyOperation', {\n  // ... parameters\n}, async (params) =&gt; {\n  try {\n    return await performOperation(params);\n  } catch (error) {\n    if (error instanceof ValidationError) {\n      throw new McpError('Invalid input', -32602);\n    }\n    throw new McpError('Operation failed', -32000);\n  }\n});\n</code></pre>"},{"location":"develop/javascript/#testing","title":"Testing","text":""},{"location":"develop/javascript/#jest-configuration","title":"Jest Configuration","text":"<pre><code>// jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['&lt;rootDir&gt;/src'],\n  testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],\n  collectCoverageFrom: [\n    'src/**/*.ts',\n    '!src/**/*.d.ts',\n    '!src/**/*.test.ts'\n  ]\n};\n</code></pre>"},{"location":"develop/javascript/#unit-tests","title":"Unit Tests","text":"<pre><code>// src/__tests__/tools.test.ts\nimport { greetTool } from '../tools';\n\ndescribe('greet tool', () =&gt; {\n  it('should greet with name', async () =&gt; {\n    const result = await greetTool.handler({ name: 'Alice' });\n    expect(result).toBe('Hello, Alice!');\n  });\n\n  it('should use custom greeting', async () =&gt; {\n    const result = await greetTool.handler({ \n      name: 'Bob', \n      greeting: 'Hi' \n    });\n    expect(result).toBe('Hi, Bob!');\n  });\n});\n</code></pre>"},{"location":"develop/javascript/#deployment","title":"Deployment","text":""},{"location":"develop/javascript/#docker","title":"Docker","text":"<pre><code>FROM node:20-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY dist ./dist\n\nEXPOSE 8000\n\nCMD [\"node\", \"dist/index.js\"]\n</code></pre>"},{"location":"develop/javascript/#environment-variables","title":"Environment Variables","text":"<pre><code>const config = {\n  port: process.env.MCP_PORT || 8000,\n  apiKey: process.env.MCP_API_KEY,\n  debug: process.env.MCP_DEBUG === 'true'\n};\n\nif (!config.apiKey) {\n  throw new Error('MCP_API_KEY is required');\n}\n</code></pre>"},{"location":"develop/javascript/#performance-optimization","title":"Performance Optimization","text":""},{"location":"develop/javascript/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import { Pool } from 'pg';\n\nconst pool = new Pool({\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nserver.tool('queryDatabase', {\n  // parameters...\n}, async ({ query }) =&gt; {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(query);\n    return result.rows;\n  } finally {\n    client.release();\n  }\n});\n</code></pre>"},{"location":"develop/javascript/#caching","title":"Caching","text":"<pre><code>const cache = new Map&lt;string, { data: any; expires: number }&gt;();\n\nfunction cached&lt;T&gt;(key: string, ttl: number, fn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; {\n  const now = Date.now();\n  const cached = cache.get(key);\n  \n  if (cached &amp;&amp; cached.expires &gt; now) {\n    return Promise.resolve(cached.data);\n  }\n  \n  return fn().then(data =&gt; {\n    cache.set(key, { data, expires: now + ttl });\n    return data;\n  });\n}\n</code></pre>"},{"location":"develop/javascript/#common-patterns","title":"Common Patterns","text":""},{"location":"develop/javascript/#middleware-pattern","title":"Middleware Pattern","text":"<pre><code>type Middleware = (context: any, next: () =&gt; Promise&lt;any&gt;) =&gt; Promise&lt;any&gt;;\n\nclass MiddlewareServer extends Server {\n  private middlewares: Middleware[] = [];\n  \n  use(middleware: Middleware) {\n    this.middlewares.push(middleware);\n  }\n  \n  async execute(context: any, handler: () =&gt; Promise&lt;any&gt;) {\n    let index = 0;\n    \n    const next = async (): Promise&lt;any&gt; =&gt; {\n      if (index &gt;= this.middlewares.length) {\n        return handler();\n      }\n      \n      const middleware = this.middlewares[index++];\n      return middleware(context, next);\n    };\n    \n    return next();\n  }\n}\n</code></pre>"},{"location":"develop/javascript/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udd37 TypeScript Best Practices</li> <li>\ud83d\ude80 Node.js Specifics</li> <li>\ud83c\udf10 Browser Integration</li> <li>\ud83e\uddea Testing Guide</li> <li>\ud83d\udce6 Packaging &amp; Distribution</li> </ul>"},{"location":"develop/javascript/browser/","title":"Browser Development","text":""},{"location":"develop/javascript/browser/#mcp-clients-in-the-browser","title":"MCP Clients in the Browser","text":"<p>Building browser-based MCP clients enables rich web applications to interact with MCP servers through various transport mechanisms.</p>"},{"location":"develop/javascript/browser/#browser-transport-options","title":"Browser Transport Options","text":""},{"location":"develop/javascript/browser/#http-transport","title":"HTTP Transport","text":"<p>The primary transport for browser-based MCP clients, using the Streamable HTTP specification.</p> <pre><code>// src/client.js\nimport { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { HTTPTransport } from '@modelcontextprotocol/sdk/client/http.js';\n\nclass BrowserMCPClient {\n  constructor(serverUrl) {\n    this.transport = new HTTPTransport(serverUrl);\n    this.client = new Client(\n      {\n        name: 'browser-mcp-client',\n        version: '1.0.0'\n      },\n      {\n        capabilities: {}\n      }\n    );\n  }\n\n  async connect() {\n    await this.client.connect(this.transport);\n    console.log('Connected to MCP server');\n  }\n\n  async listTools() {\n    const response = await this.client.request(\n      { method: 'tools/list' },\n      { method: 'tools/list' }\n    );\n    return response.tools;\n  }\n\n  async callTool(name, arguments = {}) {\n    const response = await this.client.request(\n      { \n        method: 'tools/call',\n        params: { name, arguments }\n      },\n      { \n        method: 'tools/call',\n        params: { name, arguments }\n      }\n    );\n    return response.content;\n  }\n\n  async disconnect() {\n    await this.client.close();\n    console.log('Disconnected from MCP server');\n  }\n}\n\n// Usage\nconst client = new BrowserMCPClient('http://localhost:8000/mcp');\nawait client.connect();\n</code></pre>"},{"location":"develop/javascript/browser/#websocket-transport","title":"WebSocket Transport","text":"<p>For real-time communication with MCP servers (when supported):</p> <pre><code>// src/websocket-client.js\nclass WebSocketMCPClient {\n  constructor(wsUrl) {\n    this.wsUrl = wsUrl;\n    this.ws = null;\n    this.requestId = 1;\n    this.pendingRequests = new Map();\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) =&gt; {\n      this.ws = new WebSocket(this.wsUrl);\n      \n      this.ws.onopen = () =&gt; {\n        console.log('WebSocket connected');\n        resolve();\n      };\n      \n      this.ws.onmessage = (event) =&gt; {\n        this.handleMessage(JSON.parse(event.data));\n      };\n      \n      this.ws.onerror = (error) =&gt; {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n      \n      this.ws.onclose = () =&gt; {\n        console.log('WebSocket disconnected');\n      };\n    });\n  }\n\n  handleMessage(message) {\n    if (message.id &amp;&amp; this.pendingRequests.has(message.id)) {\n      const { resolve, reject } = this.pendingRequests.get(message.id);\n      this.pendingRequests.delete(message.id);\n      \n      if (message.error) {\n        reject(new Error(message.error.message));\n      } else {\n        resolve(message.result);\n      }\n    }\n  }\n\n  async sendRequest(method, params = {}) {\n    const id = this.requestId++;\n    const message = {\n      jsonrpc: '2.0',\n      id,\n      method,\n      params\n    };\n\n    return new Promise((resolve, reject) =&gt; {\n      this.pendingRequests.set(id, { resolve, reject });\n      \n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify(message));\n      } else {\n        this.pendingRequests.delete(id);\n        reject(new Error('WebSocket not connected'));\n      }\n    });\n  }\n\n  async listTools() {\n    return await this.sendRequest('tools/list');\n  }\n\n  async callTool(name, arguments) {\n    return await this.sendRequest('tools/call', { name, arguments });\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n</code></pre>"},{"location":"develop/javascript/browser/#building-a-web-interface","title":"Building a Web Interface","text":""},{"location":"develop/javascript/browser/#html-structure","title":"HTML Structure","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;MCP Web Client&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        \n        .container {\n            background: white;\n            border-radius: 8px;\n            padding: 24px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        }\n        \n        .tool-card {\n            border: 1px solid #e1e5e9;\n            border-radius: 6px;\n            padding: 16px;\n            margin: 12px 0;\n            background: #fafbfc;\n        }\n        \n        .tool-input {\n            width: 100%;\n            padding: 8px 12px;\n            border: 1px solid #d0d7de;\n            border-radius: 4px;\n            margin: 8px 0;\n        }\n        \n        .btn {\n            background-color: #0969da;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n        }\n        \n        .btn:hover {\n            background-color: #0550ae;\n        }\n        \n        .result {\n            background: #f6f8fa;\n            border: 1px solid #d0d7de;\n            border-radius: 4px;\n            padding: 12px;\n            margin: 12px 0;\n            white-space: pre-wrap;\n            font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\n        }\n        \n        .status {\n            padding: 8px 12px;\n            border-radius: 4px;\n            margin: 8px 0;\n            font-weight: 500;\n        }\n        \n        .status.connected {\n            background-color: #dafbe1;\n            color: #1a7f37;\n        }\n        \n        .status.disconnected {\n            background-color: #ffebe9;\n            color: #cf222e;\n        }\n        \n        .loading {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;MCP Web Client&lt;/h1&gt;\n        \n        &lt;div class=\"connection-section\"&gt;\n            &lt;h2&gt;Connection&lt;/h2&gt;\n            &lt;input type=\"text\" id=\"serverUrl\" placeholder=\"http://localhost:8000/mcp\" class=\"tool-input\"&gt;\n            &lt;button id=\"connectBtn\" class=\"btn\"&gt;Connect&lt;/button&gt;\n            &lt;button id=\"disconnectBtn\" class=\"btn\" style=\"display: none;\"&gt;Disconnect&lt;/button&gt;\n            &lt;div id=\"connectionStatus\" class=\"status disconnected\"&gt;Disconnected&lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;div class=\"tools-section\" style=\"display: none;\"&gt;\n            &lt;h2&gt;Available Tools&lt;/h2&gt;\n            &lt;div id=\"toolsList\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;div class=\"results-section\"&gt;\n            &lt;h2&gt;Results&lt;/h2&gt;\n            &lt;div id=\"results\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"develop/javascript/browser/#application-logic","title":"Application Logic","text":"<pre><code>// app.js\nclass MCPWebClient {\n  constructor() {\n    this.client = null;\n    this.isConnected = false;\n    this.tools = [];\n    \n    this.initializeEventListeners();\n  }\n\n  initializeEventListeners() {\n    document.getElementById('connectBtn').addEventListener('click', () =&gt; {\n      this.connect();\n    });\n    \n    document.getElementById('disconnectBtn').addEventListener('click', () =&gt; {\n      this.disconnect();\n    });\n  }\n\n  async connect() {\n    const serverUrl = document.getElementById('serverUrl').value.trim();\n    if (!serverUrl) {\n      this.addResult('Error: Please enter a server URL', 'error');\n      return;\n    }\n\n    try {\n      this.setLoading(true);\n      \n      // Use fetch-based HTTP transport for browser compatibility\n      this.client = new HTTPMCPClient(serverUrl);\n      await this.client.connect();\n      \n      this.isConnected = true;\n      this.updateConnectionStatus(true);\n      \n      // Load available tools\n      await this.loadTools();\n      \n      this.addResult('Connected successfully!', 'success');\n    } catch (error) {\n      this.addResult(`Connection failed: ${error.message}`, 'error');\n      this.updateConnectionStatus(false);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  async disconnect() {\n    if (this.client) {\n      await this.client.disconnect();\n      this.client = null;\n    }\n    \n    this.isConnected = false;\n    this.updateConnectionStatus(false);\n    this.clearTools();\n    this.addResult('Disconnected', 'info');\n  }\n\n  async loadTools() {\n    try {\n      this.tools = await this.client.listTools();\n      this.renderTools();\n    } catch (error) {\n      this.addResult(`Failed to load tools: ${error.message}`, 'error');\n    }\n  }\n\n  renderTools() {\n    const toolsList = document.getElementById('toolsList');\n    toolsList.innerHTML = '';\n\n    if (this.tools.length === 0) {\n      toolsList.innerHTML = '&lt;p&gt;No tools available&lt;/p&gt;';\n      return;\n    }\n\n    this.tools.forEach(tool =&gt; {\n      const toolCard = this.createToolCard(tool);\n      toolsList.appendChild(toolCard);\n    });\n\n    document.querySelector('.tools-section').style.display = 'block';\n  }\n\n  createToolCard(tool) {\n    const card = document.createElement('div');\n    card.className = 'tool-card';\n    \n    card.innerHTML = `\n      &lt;h3&gt;${tool.name}&lt;/h3&gt;\n      &lt;p&gt;${tool.description}&lt;/p&gt;\n      &lt;div class=\"tool-inputs\" id=\"inputs-${tool.name}\"&gt;&lt;/div&gt;\n      &lt;button class=\"btn\" onclick=\"mcpClient.callTool('${tool.name}')\"&gt;\n        Call Tool\n      &lt;/button&gt;\n    `;\n\n    // Generate input fields based on schema\n    const inputsContainer = card.querySelector(`#inputs-${tool.name}`);\n    this.generateInputFields(tool.inputSchema, inputsContainer, tool.name);\n\n    return card;\n  }\n\n  generateInputFields(schema, container, toolName) {\n    if (!schema || !schema.properties) {\n      return;\n    }\n\n    Object.entries(schema.properties).forEach(([propName, propSchema]) =&gt; {\n      const inputGroup = document.createElement('div');\n      \n      const label = document.createElement('label');\n      label.textContent = propName + (schema.required?.includes(propName) ? ' *' : '');\n      label.style.display = 'block';\n      label.style.marginBottom = '4px';\n      label.style.fontWeight = '500';\n      \n      const input = document.createElement('input');\n      input.className = 'tool-input';\n      input.id = `${toolName}-${propName}`;\n      input.placeholder = propSchema.description || '';\n      \n      // Set input type based on schema\n      if (propSchema.type === 'number') {\n        input.type = 'number';\n      } else if (propSchema.type === 'boolean') {\n        input.type = 'checkbox';\n      } else if (propSchema.enum) {\n        const select = document.createElement('select');\n        select.className = 'tool-input';\n        select.id = `${toolName}-${propName}`;\n        \n        propSchema.enum.forEach(value =&gt; {\n          const option = document.createElement('option');\n          option.value = value;\n          option.textContent = value;\n          select.appendChild(option);\n        });\n        \n        inputGroup.appendChild(label);\n        inputGroup.appendChild(select);\n        container.appendChild(inputGroup);\n        return;\n      } else {\n        input.type = 'text';\n      }\n\n      inputGroup.appendChild(label);\n      inputGroup.appendChild(input);\n      container.appendChild(inputGroup);\n    });\n  }\n\n  async callTool(toolName) {\n    const tool = this.tools.find(t =&gt; t.name === toolName);\n    if (!tool) {\n      this.addResult(`Tool not found: ${toolName}`, 'error');\n      return;\n    }\n\n    // Collect input values\n    const arguments = {};\n    const schema = tool.inputSchema;\n    \n    if (schema &amp;&amp; schema.properties) {\n      Object.keys(schema.properties).forEach(propName =&gt; {\n        const input = document.getElementById(`${toolName}-${propName}`);\n        if (input) {\n          if (input.type === 'checkbox') {\n            arguments[propName] = input.checked;\n          } else if (input.type === 'number') {\n            arguments[propName] = parseFloat(input.value) || 0;\n          } else {\n            arguments[propName] = input.value;\n          }\n        }\n      });\n    }\n\n    try {\n      this.setLoading(true);\n      this.addResult(`Calling tool: ${toolName}`, 'info');\n      \n      const result = await this.client.callTool(toolName, arguments);\n      \n      // Display result\n      const resultText = result.map(item =&gt; {\n        if (item.type === 'text') {\n          return item.text;\n        } else {\n          return JSON.stringify(item, null, 2);\n        }\n      }).join('\\n\\n');\n      \n      this.addResult(resultText, 'success');\n    } catch (error) {\n      this.addResult(`Tool call failed: ${error.message}`, 'error');\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  updateConnectionStatus(connected) {\n    const status = document.getElementById('connectionStatus');\n    const connectBtn = document.getElementById('connectBtn');\n    const disconnectBtn = document.getElementById('disconnectBtn');\n    \n    if (connected) {\n      status.textContent = 'Connected';\n      status.className = 'status connected';\n      connectBtn.style.display = 'none';\n      disconnectBtn.style.display = 'inline-block';\n    } else {\n      status.textContent = 'Disconnected';\n      status.className = 'status disconnected';\n      connectBtn.style.display = 'inline-block';\n      disconnectBtn.style.display = 'none';\n    }\n  }\n\n  clearTools() {\n    document.getElementById('toolsList').innerHTML = '';\n    document.querySelector('.tools-section').style.display = 'none';\n    this.tools = [];\n  }\n\n  addResult(message, type = 'info') {\n    const results = document.getElementById('results');\n    const resultDiv = document.createElement('div');\n    resultDiv.className = 'result';\n    \n    const timestamp = new Date().toLocaleTimeString();\n    resultDiv.innerHTML = `\n      &lt;strong&gt;[${timestamp}] ${type.toUpperCase()}:&lt;/strong&gt;&lt;br&gt;\n      ${message}\n    `;\n    \n    // Color code by type\n    if (type === 'error') {\n      resultDiv.style.borderColor = '#d73a49';\n      resultDiv.style.backgroundColor = '#ffeaea';\n    } else if (type === 'success') {\n      resultDiv.style.borderColor = '#28a745';\n      resultDiv.style.backgroundColor = '#eaffea';\n    } else if (type === 'info') {\n      resultDiv.style.borderColor = '#0366d6';\n      resultDiv.style.backgroundColor = '#eaf3ff';\n    }\n    \n    results.prepend(resultDiv);\n    \n    // Limit number of results displayed\n    while (results.children.length &gt; 10) {\n      results.removeChild(results.lastChild);\n    }\n  }\n\n  setLoading(loading) {\n    document.body.classList.toggle('loading', loading);\n  }\n}\n\n// HTTP-based MCP client for browsers\nclass HTTPMCPClient {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n    this.connected = false;\n  }\n\n  async connect() {\n    // Test connection with a simple request\n    try {\n      const response = await fetch(`${this.baseUrl}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'initialize',\n          id: 1,\n          params: {\n            protocolVersion: '2025-06-18',\n            capabilities: {},\n            clientInfo: {\n              name: 'browser-mcp-client',\n              version: '1.0.0'\n            }\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      this.connected = true;\n    } catch (error) {\n      throw new Error(`Connection failed: ${error.message}`);\n    }\n  }\n\n  async sendRequest(method, params = {}) {\n    if (!this.connected) {\n      throw new Error('Not connected to server');\n    }\n\n    const response = await fetch(`${this.baseUrl}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method,\n        params,\n        id: Date.now()\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.error) {\n      throw new Error(data.error.message || 'Server error');\n    }\n\n    return data.result;\n  }\n\n  async listTools() {\n    const result = await this.sendRequest('tools/list');\n    return result.tools || [];\n  }\n\n  async callTool(name, arguments) {\n    const result = await this.sendRequest('tools/call', { name, arguments });\n    return result.content || [];\n  }\n\n  async disconnect() {\n    this.connected = false;\n  }\n}\n\n// Initialize the application\nconst mcpClient = new MCPWebClient();\nwindow.mcpClient = mcpClient; // Make available globally for button onclick handlers\n</code></pre>"},{"location":"develop/javascript/browser/#error-handling-and-user-experience","title":"Error Handling and User Experience","text":""},{"location":"develop/javascript/browser/#robust-error-handling","title":"Robust Error Handling","text":"<pre><code>// error-handler.js\nclass ErrorHandler {\n  static handle(error, context = '') {\n    console.error(`Error in ${context}:`, error);\n    \n    let userMessage = 'An unexpected error occurred';\n    \n    // Categorize errors for better user experience\n    if (error instanceof TypeError &amp;&amp; error.message.includes('fetch')) {\n      userMessage = 'Network error: Unable to connect to server. Please check the URL and try again.';\n    } else if (error.message.includes('HTTP 404')) {\n      userMessage = 'Server not found: The MCP server URL appears to be incorrect.';\n    } else if (error.message.includes('HTTP 500')) {\n      userMessage = 'Server error: The MCP server encountered an internal error.';\n    } else if (error.message.includes('timeout')) {\n      userMessage = 'Request timeout: The server took too long to respond.';\n    } else if (error.message.includes('CORS')) {\n      userMessage = 'Cross-origin error: The server needs to allow browser access.';\n    } else if (error.message) {\n      userMessage = error.message;\n    }\n    \n    return userMessage;\n  }\n\n  static showUserError(message, container) {\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-message';\n    errorDiv.style.cssText = `\n      background-color: #ffebee;\n      color: #c62828;\n      padding: 12px 16px;\n      border-radius: 4px;\n      margin: 8px 0;\n      border: 1px solid #ef5350;\n    `;\n    errorDiv.textContent = message;\n    \n    container.prepend(errorDiv);\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() =&gt; {\n      if (errorDiv.parentNode) {\n        errorDiv.parentNode.removeChild(errorDiv);\n      }\n    }, 5000);\n  }\n}\n</code></pre>"},{"location":"develop/javascript/browser/#progressive-web-app-features","title":"Progressive Web App Features","text":""},{"location":"develop/javascript/browser/#service-worker-for-offline-capability","title":"Service Worker for Offline Capability","text":"<pre><code>// sw.js (Service Worker)\nconst CACHE_NAME = 'mcp-client-v1';\nconst urlsToCache = [\n  '/',\n  '/app.js',\n  '/style.css'\n];\n\nself.addEventListener('install', (event) =&gt; {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) =&gt; cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', (event) =&gt; {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) =&gt; {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      })\n  );\n});\n</code></pre>"},{"location":"develop/javascript/browser/#web-app-manifest","title":"Web App Manifest","text":"<pre><code>{\n  \"name\": \"MCP Web Client\",\n  \"short_name\": \"MCP Client\",\n  \"description\": \"Browser-based Model Context Protocol client\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffffff\",\n  \"theme_color\": \"#0969da\",\n  \"icons\": [\n    {\n      \"src\": \"/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/icon-512.png\", \n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n</code></pre>"},{"location":"develop/javascript/browser/#build-process","title":"Build Process","text":""},{"location":"develop/javascript/browser/#webpack-configuration","title":"Webpack Configuration","text":"<pre><code>// webpack.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    clean: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env']\n          }\n        }\n      },\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      }\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n    }),\n  ],\n  devServer: {\n    static: './dist',\n    port: 3000,\n    open: true,\n  },\n  resolve: {\n    fallback: {\n      \"buffer\": require.resolve(\"buffer/\"),\n      \"process\": require.resolve(\"process/browser\")\n    }\n  }\n};\n</code></pre>"},{"location":"develop/javascript/browser/#security-considerations","title":"Security Considerations","text":""},{"location":"develop/javascript/browser/#content-security-policy","title":"Content Security Policy","text":"<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" \n      content=\"default-src 'self'; \n               connect-src 'self' http://localhost:8000 https://your-mcp-server.com;\n               script-src 'self' 'unsafe-inline';\n               style-src 'self' 'unsafe-inline';\"&gt;\n</code></pre>"},{"location":"develop/javascript/browser/#cors-handling","title":"CORS Handling","text":"<pre><code>// For MCP servers that need to support browser clients\n// Add CORS headers to server responses:\n\n// Access-Control-Allow-Origin: https://your-client-domain.com\n// Access-Control-Allow-Methods: POST, OPTIONS\n// Access-Control-Allow-Headers: Content-Type, Authorization\n// Access-Control-Max-Age: 86400\n</code></pre>"},{"location":"develop/javascript/browser/#best-practices","title":"Best Practices","text":""},{"location":"develop/javascript/browser/#performance","title":"Performance","text":"<ol> <li>Lazy Loading: Load tools and features on demand</li> <li>Caching: Cache server responses when appropriate</li> <li>Debouncing: Debounce user inputs to reduce server requests</li> <li>Virtual Scrolling: For large lists of tools or results</li> </ol>"},{"location":"develop/javascript/browser/#user-experience","title":"User Experience","text":"<ol> <li>Loading States: Show loading indicators for all async operations</li> <li>Error Recovery: Provide clear error messages and recovery options</li> <li>Offline Support: Cache resources for offline functionality</li> <li>Responsive Design: Support mobile and desktop interfaces</li> </ol>"},{"location":"develop/javascript/browser/#development","title":"Development","text":"<ol> <li>Code Splitting: Split code into chunks for better loading performance</li> <li>Testing: Write unit tests for client logic</li> <li>Documentation: Document API endpoints and tool schemas</li> <li>Monitoring: Track errors and performance metrics</li> </ol> <p>Browser-based MCP clients enable rich, interactive web applications that can leverage the full power of MCP servers while providing excellent user experiences.</p>"},{"location":"develop/javascript/nodejs/","title":"Node.js Development","text":""},{"location":"develop/javascript/nodejs/#building-mcp-servers-with-nodejs","title":"Building MCP Servers with Node.js","text":"<p>Node.js provides an excellent runtime for MCP servers with its strong async capabilities, rich ecosystem, and native JSON handling.</p>"},{"location":"develop/javascript/nodejs/#nodejs-setup","title":"Node.js Setup","text":""},{"location":"develop/javascript/nodejs/#project-initialization","title":"Project Initialization","text":"<pre><code># Initialize new Node.js project\nnpm init -y\n\n# Install MCP SDK\nnpm install @modelcontextprotocol/sdk\n\n# Install development dependencies\nnpm install --save-dev nodemon dotenv\n</code></pre>"},{"location":"develop/javascript/nodejs/#package-configuration","title":"Package Configuration","text":"<pre><code>{\n  \"name\": \"nodejs-mcp-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"src/server.js\",\n  \"scripts\": {\n    \"start\": \"node src/server.js\",\n    \"dev\": \"nodemon src/server.js\",\n    \"test\": \"node --test src/**/*.test.js\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.1.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.0\",\n    \"dotenv\": \"^16.3.0\"\n  }\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#basic-nodejs-mcp-server","title":"Basic Node.js MCP Server","text":""},{"location":"develop/javascript/nodejs/#simple-server-implementation","title":"Simple Server Implementation","text":"<pre><code>// src/server.js\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema\n} from '@modelcontextprotocol/sdk/types.js';\n\nclass NodeMCPServer {\n  constructor(name, version) {\n    this.server = new Server(\n      { name, version },\n      {\n        capabilities: {\n          tools: {}\n        }\n      }\n    );\n\n    this.setupToolHandlers();\n  }\n\n  setupToolHandlers() {\n    // List available tools\n    this.server.setRequestHandler(ListToolsRequestSchema, async () =&gt; {\n      return {\n        tools: [\n          {\n            name: 'file_read',\n            description: 'Read contents of a file',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                path: {\n                  type: 'string',\n                  description: 'Path to the file to read'\n                },\n                encoding: {\n                  type: 'string',\n                  enum: ['utf8', 'base64', 'hex'],\n                  default: 'utf8',\n                  description: 'File encoding'\n                }\n              },\n              required: ['path']\n            }\n          },\n          {\n            name: 'system_info',\n            description: 'Get system information',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                info_type: {\n                  type: 'string',\n                  enum: ['platform', 'memory', 'cpu', 'network'],\n                  description: 'Type of system information to retrieve'\n                }\n              },\n              required: ['info_type']\n            }\n          }\n        ]\n      };\n    });\n\n    // Handle tool calls\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) =&gt; {\n      const { name, arguments: args } = request.params;\n\n      try {\n        switch (name) {\n          case 'file_read':\n            return await this.handleFileRead(args);\n          case 'system_info':\n            return await this.handleSystemInfo(args);\n          default:\n            throw new Error(`Unknown tool: ${name}`);\n        }\n      } catch (error) {\n        return {\n          content: [{\n            type: 'text',\n            text: `Error: ${error.message}`\n          }]\n        };\n      }\n    });\n  }\n\n  async handleFileRead(args) {\n    const { path, encoding = 'utf8' } = args;\n    \n    // Input validation\n    if (!path || typeof path !== 'string') {\n      throw new Error('Path is required and must be a string');\n    }\n\n    try {\n      const fs = await import('fs/promises');\n      const content = await fs.readFile(path, encoding);\n      \n      return {\n        content: [{\n          type: 'text',\n          text: `File contents (${path}):\\n${content}`\n        }]\n      };\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        throw new Error(`File not found: ${path}`);\n      } else if (error.code === 'EACCES') {\n        throw new Error(`Permission denied: ${path}`);\n      }\n      throw error;\n    }\n  }\n\n  async handleSystemInfo(args) {\n    const { info_type } = args;\n    const os = await import('os');\n    \n    let info;\n    \n    switch (info_type) {\n      case 'platform':\n        info = {\n          platform: os.platform(),\n          arch: os.arch(),\n          release: os.release(),\n          hostname: os.hostname()\n        };\n        break;\n        \n      case 'memory':\n        info = {\n          total_memory: os.totalmem(),\n          free_memory: os.freemem(),\n          memory_usage: process.memoryUsage()\n        };\n        break;\n        \n      case 'cpu':\n        info = {\n          cpu_count: os.cpus().length,\n          cpu_model: os.cpus()[0]?.model || 'Unknown',\n          load_average: os.loadavg(),\n          uptime: os.uptime()\n        };\n        break;\n        \n      case 'network':\n        info = {\n          network_interfaces: os.networkInterfaces()\n        };\n        break;\n        \n      default:\n        throw new Error(`Unknown info type: ${info_type}`);\n    }\n\n    return {\n      content: [{\n        type: 'text',\n        text: JSON.stringify(info, null, 2)\n      }]\n    };\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n  }\n}\n\n// Main execution\nasync function main() {\n  const server = new NodeMCPServer('nodejs-mcp-server', '1.0.0');\n  await server.run();\n}\n\n// Handle process signals\nprocess.on('SIGINT', () =&gt; {\n  console.log('Received SIGINT, shutting down gracefully...');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () =&gt; {\n  console.log('Received SIGTERM, shutting down gracefully...');\n  process.exit(0);\n});\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#file-system-operations","title":"File System Operations","text":""},{"location":"develop/javascript/nodejs/#advanced-file-handling","title":"Advanced File Handling","text":"<pre><code>// src/tools/filesystem.js\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nexport class FileSystemTools {\n  constructor(allowedPaths = []) {\n    this.allowedPaths = allowedPaths;\n  }\n\n  validatePath(filePath) {\n    const resolvedPath = path.resolve(filePath);\n    \n    // Check if path is within allowed directories\n    if (this.allowedPaths.length &gt; 0) {\n      const isAllowed = this.allowedPaths.some(allowedPath =&gt; \n        resolvedPath.startsWith(path.resolve(allowedPath))\n      );\n      \n      if (!isAllowed) {\n        throw new Error(`Access denied: Path not in allowed directories`);\n      }\n    }\n    \n    return resolvedPath;\n  }\n\n  async readFile(filePath, encoding = 'utf8') {\n    const validPath = this.validatePath(filePath);\n    \n    try {\n      const content = await fs.readFile(validPath, encoding);\n      return {\n        path: validPath,\n        size: (await fs.stat(validPath)).size,\n        content: content\n      };\n    } catch (error) {\n      this.handleFileError(error, validPath);\n    }\n  }\n\n  async writeFile(filePath, content, options = {}) {\n    const validPath = this.validatePath(filePath);\n    \n    try {\n      await fs.writeFile(validPath, content, {\n        encoding: 'utf8',\n        ...options\n      });\n      \n      const stats = await fs.stat(validPath);\n      return {\n        path: validPath,\n        size: stats.size,\n        modified: stats.mtime\n      };\n    } catch (error) {\n      this.handleFileError(error, validPath);\n    }\n  }\n\n  async listDirectory(dirPath) {\n    const validPath = this.validatePath(dirPath);\n    \n    try {\n      const entries = await fs.readdir(validPath, { withFileTypes: true });\n      \n      return entries.map(entry =&gt; ({\n        name: entry.name,\n        type: entry.isDirectory() ? 'directory' : 'file',\n        path: path.join(validPath, entry.name)\n      }));\n    } catch (error) {\n      this.handleFileError(error, validPath);\n    }\n  }\n\n  async getFileStats(filePath) {\n    const validPath = this.validatePath(filePath);\n    \n    try {\n      const stats = await fs.stat(validPath);\n      \n      return {\n        path: validPath,\n        size: stats.size,\n        created: stats.birthtime,\n        modified: stats.mtime,\n        accessed: stats.atime,\n        isDirectory: stats.isDirectory(),\n        isFile: stats.isFile(),\n        permissions: stats.mode\n      };\n    } catch (error) {\n      this.handleFileError(error, validPath);\n    }\n  }\n\n  handleFileError(error, filePath) {\n    switch (error.code) {\n      case 'ENOENT':\n        throw new Error(`File or directory not found: ${filePath}`);\n      case 'EACCES':\n        throw new Error(`Permission denied: ${filePath}`);\n      case 'EISDIR':\n        throw new Error(`Expected file but found directory: ${filePath}`);\n      case 'ENOTDIR':\n        throw new Error(`Expected directory but found file: ${filePath}`);\n      default:\n        throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#http-client-integration","title":"HTTP Client Integration","text":""},{"location":"develop/javascript/nodejs/#rest-api-tools","title":"REST API Tools","text":"<pre><code>// src/tools/http-client.js\nexport class HttpClient {\n  constructor(options = {}) {\n    this.defaultTimeout = options.timeout || 30000;\n    this.defaultHeaders = options.headers || {};\n    this.retryCount = options.retryCount || 3;\n    this.retryDelay = options.retryDelay || 1000;\n  }\n\n  async request(url, options = {}) {\n    const requestOptions = {\n      method: 'GET',\n      timeout: this.defaultTimeout,\n      headers: { ...this.defaultHeaders },\n      ...options\n    };\n\n    let lastError;\n    \n    for (let attempt = 1; attempt &lt;= this.retryCount; attempt++) {\n      try {\n        const response = await this.performRequest(url, requestOptions);\n        return response;\n      } catch (error) {\n        lastError = error;\n        \n        if (attempt &lt; this.retryCount &amp;&amp; this.shouldRetry(error)) {\n          await this.delay(this.retryDelay * attempt);\n          continue;\n        }\n        \n        break;\n      }\n    }\n    \n    throw lastError;\n  }\n\n  async performRequest(url, options) {\n    // Use dynamic import for better compatibility\n    const { default: fetch } = await import('node-fetch');\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() =&gt; controller.abort(), options.timeout);\n    \n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const contentType = response.headers.get('content-type');\n      let data;\n      \n      if (contentType?.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n      \n      return {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries()),\n        data: data\n      };\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  shouldRetry(error) {\n    // Retry on network errors, timeouts, and 5xx status codes\n    return (\n      error.name === 'AbortError' ||\n      error.code === 'ECONNRESET' ||\n      error.code === 'ETIMEDOUT' ||\n      (error.message &amp;&amp; error.message.includes('HTTP 5'))\n    );\n  }\n\n  delay(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n  }\n\n  async get(url, options = {}) {\n    return this.request(url, { ...options, method: 'GET' });\n  }\n\n  async post(url, data, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n  }\n\n  async put(url, data, options = {}) {\n    return this.request(url, {\n      ...options,\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n  }\n\n  async delete(url, options = {}) {\n    return this.request(url, { ...options, method: 'DELETE' });\n  }\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#configuration-management","title":"Configuration Management","text":""},{"location":"develop/javascript/nodejs/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code>// src/config.js\nimport { config } from 'dotenv';\nimport path from 'path';\n\n// Load environment variables\nconfig();\n\nexport class Config {\n  constructor() {\n    this.server = {\n      name: process.env.MCP_SERVER_NAME || 'nodejs-mcp-server',\n      version: process.env.MCP_SERVER_VERSION || '1.0.0',\n      debug: process.env.MCP_DEBUG === 'true'\n    };\n\n    this.filesystem = {\n      allowedPaths: process.env.ALLOWED_PATHS \n        ? process.env.ALLOWED_PATHS.split(',').map(p =&gt; p.trim())\n        : []\n    };\n\n    this.http = {\n      timeout: parseInt(process.env.HTTP_TIMEOUT) || 30000,\n      retryCount: parseInt(process.env.HTTP_RETRY_COUNT) || 3,\n      retryDelay: parseInt(process.env.HTTP_RETRY_DELAY) || 1000,\n      userAgent: process.env.HTTP_USER_AGENT || 'MCP-Server/1.0'\n    };\n\n    this.database = {\n      url: process.env.DATABASE_URL,\n      poolSize: parseInt(process.env.DB_POOL_SIZE) || 10,\n      timeout: parseInt(process.env.DB_TIMEOUT) || 30000\n    };\n\n    this.logging = {\n      level: process.env.LOG_LEVEL || 'info',\n      format: process.env.LOG_FORMAT || 'json'\n    };\n  }\n\n  validate() {\n    const errors = [];\n\n    // Validate required configuration\n    if (this.filesystem.allowedPaths.length === 0) {\n      console.warn('Warning: No allowed paths configured for filesystem access');\n    }\n\n    if (this.database.url &amp;&amp; !this.isValidUrl(this.database.url)) {\n      errors.push('Invalid database URL');\n    }\n\n    if (errors.length &gt; 0) {\n      throw new Error(`Configuration validation failed: ${errors.join(', ')}`);\n    }\n  }\n\n  isValidUrl(string) {\n    try {\n      new URL(string);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const config = new Config();\n</code></pre>"},{"location":"develop/javascript/nodejs/#database-integration","title":"Database Integration","text":""},{"location":"develop/javascript/nodejs/#database-connection-pool","title":"Database Connection Pool","text":"<pre><code>// src/database.js\nexport class DatabaseConnection {\n  constructor(config) {\n    this.config = config;\n    this.pool = null;\n  }\n\n  async connect() {\n    if (this.pool) {\n      return this.pool;\n    }\n\n    // Example with a hypothetical database driver\n    try {\n      const { createPool } = await import('generic-database-driver');\n      \n      this.pool = createPool({\n        connectionString: this.config.database.url,\n        max: this.config.database.poolSize,\n        idleTimeoutMillis: this.config.database.timeout,\n        ssl: process.env.NODE_ENV === 'production'\n      });\n\n      // Test connection\n      const client = await this.pool.connect();\n      await client.query('SELECT 1');\n      client.release();\n\n      console.log('Database connected successfully');\n      return this.pool;\n    } catch (error) {\n      console.error('Failed to connect to database:', error.message);\n      throw error;\n    }\n  }\n\n  async query(text, params = []) {\n    if (!this.pool) {\n      await this.connect();\n    }\n\n    const client = await this.pool.connect();\n    \n    try {\n      const result = await client.query(text, params);\n      return result;\n    } finally {\n      client.release();\n    }\n  }\n\n  async transaction(callback) {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      const result = await callback(client);\n      await client.query('COMMIT');\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async close() {\n    if (this.pool) {\n      await this.pool.end();\n      this.pool = null;\n    }\n  }\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"develop/javascript/nodejs/#structured-logging","title":"Structured Logging","text":"<pre><code>// src/logger.js\nexport class Logger {\n  constructor(options = {}) {\n    this.level = options.level || 'info';\n    this.format = options.format || 'json';\n    this.levels = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n  }\n\n  shouldLog(level) {\n    return this.levels[level] &gt;= this.levels[this.level];\n  }\n\n  formatMessage(level, message, meta = {}) {\n    const timestamp = new Date().toISOString();\n    \n    if (this.format === 'json') {\n      return JSON.stringify({\n        timestamp,\n        level: level.toUpperCase(),\n        message,\n        ...meta,\n        pid: process.pid,\n        hostname: require('os').hostname()\n      });\n    } else {\n      const metaStr = Object.keys(meta).length &gt; 0 \n        ? ` ${JSON.stringify(meta)}` \n        : '';\n      return `${timestamp} [${level.toUpperCase()}] ${message}${metaStr}`;\n    }\n  }\n\n  log(level, message, meta) {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const formatted = this.formatMessage(level, message, meta);\n    \n    if (level === 'error') {\n      console.error(formatted);\n    } else {\n      console.log(formatted);\n    }\n  }\n\n  debug(message, meta) {\n    this.log('debug', message, meta);\n  }\n\n  info(message, meta) {\n    this.log('info', message, meta);\n  }\n\n  warn(message, meta) {\n    this.log('warn', message, meta);\n  }\n\n  error(message, meta) {\n    this.log('error', message, meta);\n  }\n}\n\nexport const logger = new Logger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: process.env.LOG_FORMAT || 'json'\n});\n</code></pre>"},{"location":"develop/javascript/nodejs/#testing","title":"Testing","text":""},{"location":"develop/javascript/nodejs/#unit-tests-with-nodejs-test-runner","title":"Unit Tests with Node.js Test Runner","text":"<pre><code>// src/server.test.js\nimport { describe, it, before, after } from 'node:test';\nimport assert from 'node:assert';\nimport { NodeMCPServer } from './server.js';\n\ndescribe('NodeMCPServer', () =&gt; {\n  let server;\n\n  before(async () =&gt; {\n    server = new NodeMCPServer('test-server', '1.0.0');\n  });\n\n  it('should handle file read correctly', async () =&gt; {\n    const result = await server.handleFileRead({\n      path: './package.json',\n      encoding: 'utf8'\n    });\n\n    assert(result.content);\n    assert(Array.isArray(result.content));\n    assert(result.content[0].type === 'text');\n    assert(result.content[0].text.includes('package.json'));\n  });\n\n  it('should handle system info requests', async () =&gt; {\n    const result = await server.handleSystemInfo({\n      info_type: 'platform'\n    });\n\n    assert(result.content);\n    assert(result.content[0].type === 'text');\n    \n    const info = JSON.parse(result.content[0].text);\n    assert(typeof info.platform === 'string');\n    assert(typeof info.arch === 'string');\n  });\n\n  it('should throw error for invalid file paths', async () =&gt; {\n    await assert.rejects(\n      server.handleFileRead({ path: '/nonexistent/file.txt' }),\n      /File not found/\n    );\n  });\n});\n</code></pre>"},{"location":"develop/javascript/nodejs/#production-deployment","title":"Production Deployment","text":""},{"location":"develop/javascript/nodejs/#process-management","title":"Process Management","text":"<pre><code>// src/cluster.js\nimport cluster from 'cluster';\nimport os from 'os';\nimport { logger } from './logger.js';\n\nconst numCPUs = os.cpus().length;\n\nif (cluster.isPrimary) {\n  logger.info(`Master ${process.pid} is running`);\n\n  // Fork workers\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =&gt; {\n    logger.warn(`Worker ${worker.process.pid} died`, { code, signal });\n    logger.info('Starting a new worker');\n    cluster.fork();\n  });\n} else {\n  // Workers can share any TCP port\n  const { NodeMCPServer } = await import('./server.js');\n  const server = new NodeMCPServer('nodejs-mcp-server', '1.0.0');\n  \n  await server.run();\n  logger.info(`Worker ${process.pid} started`);\n}\n</code></pre>"},{"location":"develop/javascript/nodejs/#best-practices","title":"Best Practices","text":""},{"location":"develop/javascript/nodejs/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Event Loop: Keep the event loop responsive</li> <li>Memory Management: Monitor and prevent memory leaks  </li> <li>Streaming: Use streams for large data processing</li> <li>Connection Pooling: Reuse database and HTTP connections</li> </ol>"},{"location":"develop/javascript/nodejs/#error-handling","title":"Error Handling","text":"<ol> <li>Graceful Degradation: Handle errors without crashing</li> <li>Process Signals: Handle SIGINT and SIGTERM properly</li> <li>Uncaught Exceptions: Log and handle uncaught errors</li> <li>Promise Rejections: Always handle promise rejections</li> </ol>"},{"location":"develop/javascript/nodejs/#security","title":"Security","text":"<ol> <li>Input Validation: Validate all inputs thoroughly</li> <li>Path Traversal: Prevent directory traversal attacks</li> <li>Environment Variables: Never log sensitive data</li> <li>Dependencies: Regularly update dependencies</li> </ol> <p>Node.js provides excellent performance and developer experience for building scalable MCP servers with rich ecosystem support.</p>"},{"location":"develop/javascript/typescript/","title":"TypeScript Development","text":""},{"location":"develop/javascript/typescript/#using-typescript-for-mcp-servers","title":"Using TypeScript for MCP Servers","text":"<p>TypeScript provides excellent type safety and developer experience for building MCP servers, with strong support for JSON Schema validation and async programming patterns.</p>"},{"location":"develop/javascript/typescript/#typescript-setup","title":"TypeScript Setup","text":""},{"location":"develop/javascript/typescript/#project-initialization","title":"Project Initialization","text":"<pre><code># Initialize new TypeScript project\nnpm init -y\nnpm install -D typescript @types/node ts-node\n\n# Create TypeScript configuration\nnpx tsc --init\n</code></pre>"},{"location":"develop/javascript/typescript/#typescript-configuration","title":"TypeScript Configuration","text":"<pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\"ES2022\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true,\n    \"noEmitOnError\": true,\n    \"exactOptionalPropertyTypes\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedIndexedAccess\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\"]\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#basic-typescript-mcp-server","title":"Basic TypeScript MCP Server","text":""},{"location":"develop/javascript/typescript/#type-safe-server-implementation","title":"Type-Safe Server Implementation","text":"<pre><code>// src/server.ts\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n  Tool,\n  TextContent\n} from '@modelcontextprotocol/sdk/types.js';\nimport { z } from 'zod';\n\n// Input validation schemas\nconst EchoToolInputSchema = z.object({\n  text: z.string().min(1, \"Text cannot be empty\")\n});\n\nconst CalculatorToolInputSchema = z.object({\n  operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n  a: z.number(),\n  b: z.number()\n});\n\n// Type definitions\ntype EchoToolInput = z.infer&lt;typeof EchoToolInputSchema&gt;;\ntype CalculatorToolInput = z.infer&lt;typeof CalculatorToolInputSchema&gt;;\n\nclass MCPServer {\n  private server: Server;\n\n  constructor(name: string, version: string) {\n    this.server = new Server(\n      { name, version },\n      {\n        capabilities: {\n          tools: {}\n        }\n      }\n    );\n\n    this.setupToolHandlers();\n  }\n\n  private setupToolHandlers(): void {\n    // List available tools\n    this.server.setRequestHandler(\n      ListToolsRequestSchema,\n      async (): Promise&lt;{ tools: Tool[] }&gt; =&gt; {\n        return {\n          tools: [\n            {\n              name: 'echo',\n              description: 'Echo back the provided text',\n              inputSchema: {\n                type: 'object',\n                properties: {\n                  text: {\n                    type: 'string',\n                    description: 'Text to echo back'\n                  }\n                },\n                required: ['text']\n              }\n            },\n            {\n              name: 'calculator',\n              description: 'Perform basic arithmetic operations',\n              inputSchema: {\n                type: 'object',\n                properties: {\n                  operation: {\n                    type: 'string',\n                    enum: ['add', 'subtract', 'multiply', 'divide'],\n                    description: 'The operation to perform'\n                  },\n                  a: {\n                    type: 'number',\n                    description: 'First number'\n                  },\n                  b: {\n                    type: 'number', \n                    description: 'Second number'\n                  }\n                },\n                required: ['operation', 'a', 'b']\n              }\n            }\n          ]\n        };\n      }\n    );\n\n    // Handle tool calls\n    this.server.setRequestHandler(\n      CallToolRequestSchema,\n      async (request): Promise&lt;{ content: TextContent[] }&gt; =&gt; {\n        const { name, arguments: args } = request.params;\n\n        try {\n          switch (name) {\n            case 'echo':\n              return await this.handleEchoTool(args);\n            case 'calculator':\n              return await this.handleCalculatorTool(args);\n            default:\n              throw new Error(`Unknown tool: ${name}`);\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error \n            ? error.message \n            : 'An unknown error occurred';\n          \n          return {\n            content: [{\n              type: 'text',\n              text: `Error: ${errorMessage}`\n            }]\n          };\n        }\n      }\n    );\n  }\n\n  private async handleEchoTool(args: unknown): Promise&lt;{ content: TextContent[] }&gt; {\n    const input = EchoToolInputSchema.parse(args);\n    \n    return {\n      content: [{\n        type: 'text',\n        text: `Echo: ${input.text}`\n      }]\n    };\n  }\n\n  private async handleCalculatorTool(args: unknown): Promise&lt;{ content: TextContent[] }&gt; {\n    const input = CalculatorToolInputSchema.parse(args);\n    \n    let result: number;\n    \n    switch (input.operation) {\n      case 'add':\n        result = input.a + input.b;\n        break;\n      case 'subtract':\n        result = input.a - input.b;\n        break;\n      case 'multiply':\n        result = input.a * input.b;\n        break;\n      case 'divide':\n        if (input.b === 0) {\n          throw new Error('Division by zero is not allowed');\n        }\n        result = input.a / input.b;\n        break;\n    }\n\n    return {\n      content: [{\n        type: 'text',\n        text: `Result: ${input.a} ${input.operation} ${input.b} = ${result}`\n      }]\n    };\n  }\n\n  async run(): Promise&lt;void&gt; {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n  }\n}\n\n// Main execution\nasync function main(): Promise&lt;void&gt; {\n  const server = new MCPServer('typescript-mcp-server', '1.0.0');\n  await server.run();\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#advanced-typescript-patterns","title":"Advanced TypeScript Patterns","text":""},{"location":"develop/javascript/typescript/#generic-tool-handler","title":"Generic Tool Handler","text":"<pre><code>// src/types.ts\nimport { z } from 'zod';\nimport { TextContent } from '@modelcontextprotocol/sdk/types.js';\n\n// Generic tool interface\nexport interface ToolHandler&lt;TInput, TOutput = TextContent[]&gt; {\n  name: string;\n  description: string;\n  inputSchema: z.ZodSchema&lt;TInput&gt;;\n  handler: (input: TInput) =&gt; Promise&lt;{ content: TOutput }&gt;;\n}\n\n// Tool factory function\nexport function createTool&lt;TInput&gt;(\n  config: {\n    name: string;\n    description: string;\n    inputSchema: z.ZodSchema&lt;TInput&gt;;\n    handler: (input: TInput) =&gt; Promise&lt;{ content: TextContent[] }&gt;;\n  }\n): ToolHandler&lt;TInput&gt; {\n  return config;\n}\n\n// Example usage\nconst echoTool = createTool({\n  name: 'echo',\n  description: 'Echo back text',\n  inputSchema: z.object({\n    text: z.string(),\n    uppercase: z.boolean().optional()\n  }),\n  handler: async (input) =&gt; {\n    const text = input.uppercase ? input.text.toUpperCase() : input.text;\n    return {\n      content: [{\n        type: 'text',\n        text: `Echo: ${text}`\n      }]\n    };\n  }\n});\n</code></pre>"},{"location":"develop/javascript/typescript/#database-integration-with-type-safety","title":"Database Integration with Type Safety","text":"<pre><code>// src/database.ts\nimport { z } from 'zod';\nimport { createTool } from './types.js';\n\n// Database schema validation\nconst UserSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n  created_at: z.string().datetime()\n});\n\ntype User = z.infer&lt;typeof UserSchema&gt;;\n\n// Mock database interface\ninterface Database {\n  users: {\n    findMany(where?: Partial&lt;User&gt;): Promise&lt;User[]&gt;;\n    findById(id: number): Promise&lt;User | null&gt;;\n    create(data: Omit&lt;User, 'id' | 'created_at'&gt;): Promise&lt;User&gt;;\n  };\n}\n\n// Database tool implementation\nexport const queryUsersTool = createTool({\n  name: 'query_users',\n  description: 'Query users from database',\n  inputSchema: z.object({\n    search: z.string().optional(),\n    limit: z.number().int().positive().max(100).default(10)\n  }),\n  handler: async (input) =&gt; {\n    // Type-safe database interaction\n    const db: Database = getDatabase();\n    \n    const users = await db.users.findMany({\n      ...(input.search &amp;&amp; { name: input.search })\n    });\n\n    const limitedUsers = users.slice(0, input.limit);\n    \n    return {\n      content: [{\n        type: 'text',\n        text: JSON.stringify(limitedUsers, null, 2)\n      }]\n    };\n  }\n});\n\n// Mock database implementation\nfunction getDatabase(): Database {\n  return {\n    users: {\n      async findMany(where) {\n        // Implementation would connect to real database\n        return [];\n      },\n      async findById(id) {\n        return null;\n      },\n      async create(data) {\n        return {\n          id: Date.now(),\n          created_at: new Date().toISOString(),\n          ...data\n        };\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#configuration-management","title":"Configuration Management","text":""},{"location":"develop/javascript/typescript/#type-safe-configuration","title":"Type-Safe Configuration","text":"<pre><code>// src/config.ts\nimport { z } from 'zod';\n\nconst ConfigSchema = z.object({\n  server: z.object({\n    name: z.string().default('typescript-mcp-server'),\n    version: z.string().default('1.0.0'),\n    debug: z.boolean().default(false)\n  }),\n  database: z.object({\n    url: z.string().url().optional(),\n    timeout: z.number().int().positive().default(30000),\n    pool_size: z.number().int().positive().default(10)\n  }),\n  api: z.object({\n    base_url: z.string().url().default('https://api.example.com'),\n    timeout: z.number().int().positive().default(5000),\n    retries: z.number().int().non-negative().default(3)\n  })\n});\n\nexport type Config = z.infer&lt;typeof ConfigSchema&gt;;\n\nexport function loadConfig(): Config {\n  const rawConfig = {\n    server: {\n      name: process.env.MCP_SERVER_NAME,\n      version: process.env.MCP_SERVER_VERSION,\n      debug: process.env.MCP_DEBUG === 'true'\n    },\n    database: {\n      url: process.env.DATABASE_URL,\n      timeout: process.env.DATABASE_TIMEOUT ? \n        parseInt(process.env.DATABASE_TIMEOUT) : undefined,\n      pool_size: process.env.DATABASE_POOL_SIZE ? \n        parseInt(process.env.DATABASE_POOL_SIZE) : undefined\n    },\n    api: {\n      base_url: process.env.API_BASE_URL,\n      timeout: process.env.API_TIMEOUT ? \n        parseInt(process.env.API_TIMEOUT) : undefined,\n      retries: process.env.API_RETRIES ? \n        parseInt(process.env.API_RETRIES) : undefined\n    }\n  };\n\n  return ConfigSchema.parse(rawConfig);\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#error-handling","title":"Error Handling","text":""},{"location":"develop/javascript/typescript/#custom-error-types","title":"Custom Error Types","text":"<pre><code>// src/errors.ts\nexport abstract class MCPError extends Error {\n  abstract readonly code: string;\n  \n  constructor(message: string, public readonly details?: unknown) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class ValidationError extends MCPError {\n  readonly code = 'VALIDATION_ERROR';\n  \n  constructor(message: string, public readonly field?: string) {\n    super(message, { field });\n  }\n}\n\nexport class DatabaseError extends MCPError {\n  readonly code = 'DATABASE_ERROR';\n  \n  constructor(message: string, public readonly query?: string) {\n    super(message, { query });\n  }\n}\n\nexport class ExternalAPIError extends MCPError {\n  readonly code = 'EXTERNAL_API_ERROR';\n  \n  constructor(\n    message: string, \n    public readonly statusCode?: number,\n    public readonly service?: string\n  ) {\n    super(message, { statusCode, service });\n  }\n}\n\n// Error handling utility\nexport function handleError(error: unknown): { content: TextContent[] } {\n  if (error instanceof MCPError) {\n    return {\n      content: [{\n        type: 'text',\n        text: `Error (${error.code}): ${error.message}`\n      }]\n    };\n  }\n  \n  if (error instanceof z.ZodError) {\n    const issues = error.errors.map(err =&gt; \n      `${err.path.join('.')}: ${err.message}`\n    ).join(', ');\n    \n    return {\n      content: [{\n        type: 'text',\n        text: `Validation Error: ${issues}`\n      }]\n    };\n  }\n  \n  return {\n    content: [{\n      type: 'text',\n      text: 'An unexpected error occurred'\n    }]\n  };\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#testing-setup","title":"Testing Setup","text":""},{"location":"develop/javascript/typescript/#typescript-test-configuration","title":"TypeScript Test Configuration","text":"<pre><code>// src/__tests__/server.test.ts\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { MCPServer } from '../server.js';\n\ndescribe('MCPServer', () =&gt; {\n  let server: MCPServer;\n  \n  beforeEach(() =&gt; {\n    server = new MCPServer('test-server', '1.0.0');\n  });\n  \n  it('should handle echo tool correctly', async () =&gt; {\n    const result = await server.handleEchoTool({ text: 'Hello, World!' });\n    \n    expect(result.content).toHaveLength(1);\n    expect(result.content[0].text).toBe('Echo: Hello, World!');\n  });\n  \n  it('should validate input schemas', async () =&gt; {\n    await expect(\n      server.handleEchoTool({ text: '' })\n    ).rejects.toThrow('Text cannot be empty');\n  });\n  \n  it('should handle calculator operations', async () =&gt; {\n    const result = await server.handleCalculatorTool({\n      operation: 'add',\n      a: 5,\n      b: 3\n    });\n    \n    expect(result.content[0].text).toBe('Result: 5 add 3 = 8');\n  });\n});\n</code></pre>"},{"location":"develop/javascript/typescript/#build-and-development-scripts","title":"Build and Development Scripts","text":""},{"location":"develop/javascript/typescript/#packagejson-configuration","title":"Package.json Configuration","text":"<pre><code>{\n  \"name\": \"typescript-mcp-server\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"ts-node --esm src/server.ts\",\n    \"start\": \"node dist/server.js\",\n    \"test\": \"vitest\",\n    \"test:coverage\": \"vitest --coverage\",\n    \"lint\": \"eslint src/**/*.ts\",\n    \"lint:fix\": \"eslint src/**/*.ts --fix\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^0.1.0\",\n    \"zod\": \"^3.22.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.10.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.56.0\",\n    \"ts-node\": \"^10.9.0\",\n    \"typescript\": \"^5.3.0\",\n    \"vitest\": \"^1.0.0\",\n    \"@vitest/coverage-v8\": \"^1.0.0\"\n  }\n}\n</code></pre>"},{"location":"develop/javascript/typescript/#best-practices","title":"Best Practices","text":""},{"location":"develop/javascript/typescript/#code-organization","title":"Code Organization","text":"<ol> <li>Strict TypeScript: Use strict mode and exact optional properties</li> <li>Schema Validation: Validate all inputs with Zod schemas</li> <li>Error Handling: Use custom error types with proper context</li> <li>Type Safety: Leverage TypeScript's type system fully</li> </ol>"},{"location":"develop/javascript/typescript/#performance","title":"Performance","text":"<ol> <li>Compilation: Use incremental compilation for faster builds</li> <li>Tree Shaking: Structure code for optimal bundling</li> <li>Memory Management: Avoid memory leaks in long-running processes</li> </ol>"},{"location":"develop/javascript/typescript/#development-experience","title":"Development Experience","text":"<ol> <li>IDE Support: Configure proper TypeScript language server settings</li> <li>Debugging: Use source maps for better debugging experience</li> <li>Hot Reload: Use ts-node or similar for development</li> <li>Code Quality: Integrate ESLint and Prettier</li> </ol> <p>TypeScript provides excellent tooling and type safety for building robust MCP servers with confidence in your code's correctness.</p>"},{"location":"develop/python/","title":"Python Development","text":""},{"location":"develop/python/#mcp-server-development-with-python","title":"MCP Server Development with Python","text":"<p>Python is the recommended language for MCP server development, offering a mature SDK and extensive ecosystem.</p>"},{"location":"develop/python/#quick-start","title":"Quick Start","text":""},{"location":"develop/python/#installation","title":"Installation","text":"<pre><code># Using uv (recommended)\nuv add mcp\n\n# Using pip\npip install mcp\n</code></pre>"},{"location":"develop/python/#minimal-server","title":"Minimal Server","text":"<pre><code>import asyncio\nfrom mcp.server import Server\nfrom mcp.server.stdio import stdio_server\nfrom mcp.types import Tool, TextContent\n\n# Create server instance\nserver = Server(\"my-server\")\n\n@server.list_tools()\nasync def list_tools():\n    \"\"\"List available tools.\"\"\"\n    return [\n        Tool(\n            name=\"hello\",\n            description=\"Say hello to someone\",\n            inputSchema={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"name\"]\n            }\n        )\n    ]\n\n@server.call_tool()\nasync def call_tool(name: str, arguments: dict):\n    \"\"\"Execute a tool.\"\"\"\n    if name == \"hello\":\n        name_arg = arguments.get(\"name\", \"World\")\n        return [TextContent(type=\"text\", text=f\"Hello, {name_arg}!\")]\n    \n    raise ValueError(f\"Unknown tool: {name}\")\n\nasync def main():\n    async with stdio_server() as (read_stream, write_stream):\n        await server.run(read_stream, write_stream)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"develop/python/#python-mcp-features","title":"Python MCP Features","text":""},{"location":"develop/python/#type-hints","title":"Type Hints","text":"<p>Python's type hints automatically generate JSON schemas: <pre><code>def process(\n    text: str,\n    count: int = 10,\n    enabled: bool = True\n) -&gt; dict[str, Any]:\n    \"\"\"Type hints define the tool interface\"\"\"\n</code></pre></p>"},{"location":"develop/python/#async-support","title":"Async Support","text":"<p>Full async/await support for I/O operations: <pre><code>import aiohttp\n\n@server.call_tool()\nasync def call_tool(name: str, arguments: dict):\n    if name == \"fetch_data\":\n        url = arguments.get(\"url\")\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                text = await response.text()\n                return [TextContent(type=\"text\", text=text)]\n</code></pre></p>"},{"location":"develop/python/#pydantic-integration","title":"Pydantic Integration","text":"<p>Use Pydantic for complex data validation: <pre><code>from pydantic import BaseModel, Field\n\nclass TaskInput(BaseModel):\n    title: str = Field(..., min_length=1, max_length=100)\n    priority: int = Field(default=1, ge=1, le=5)\n    tags: list[str] = Field(default_factory=list)\n\n@mcp.tool()\ndef create_task(task: TaskInput) -&gt; str:\n    \"\"\"Create a task with validation\"\"\"\n    return f\"Created: {task.title}\"\n</code></pre></p>"},{"location":"develop/python/#development-setup","title":"Development Setup","text":""},{"location":"develop/python/#virtual-environment","title":"Virtual Environment","text":"<pre><code># Create venv\npython -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# .venv\\Scripts\\activate   # Windows\n\n# Install dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"develop/python/#project-structure","title":"Project Structure","text":"<pre><code>my-python-server/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_server/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 main.py\n\u2502       \u251c\u2500\u2500 tools.py\n\u2502       \u2514\u2500\u2500 resources.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 test_tools.py\n\u2502   \u2514\u2500\u2500 test_integration.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"develop/python/#testing","title":"Testing","text":""},{"location":"develop/python/#unit-tests-with-pytest","title":"Unit Tests with pytest","text":"<pre><code># tests/test_tools.py\nimport pytest\nfrom my_server.tools import process_data\n\ndef test_process_data():\n    result = process_data(\"test input\")\n    assert result == \"expected output\"\n\n@pytest.mark.asyncio\nasync def test_async_tool():\n    result = await fetch_data(\"http://example.com\")\n    assert result is not None\n</code></pre>"},{"location":"develop/python/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# With coverage\npytest --cov=my_server --cov-report=html\n\n# Specific test file\npytest tests/test_tools.py\n</code></pre>"},{"location":"develop/python/#dependency-management","title":"Dependency Management","text":""},{"location":"develop/python/#using-pyprojecttoml","title":"Using pyproject.toml","text":"<pre><code>[project]\nname = \"my-mcp-server\"\nversion = \"0.1.0\"\ndependencies = [\n    \"mcp[cli]&gt;=0.1.0\",\n    \"pydantic&gt;=2.0\",\n    \"aiohttp&gt;=3.9\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0\",\n    \"pytest-asyncio&gt;=0.21\",\n    \"pytest-cov&gt;=4.0\",\n    \"ruff&gt;=0.1\",\n]\n</code></pre>"},{"location":"develop/python/#best-practices","title":"Best Practices","text":""},{"location":"develop/python/#1-use-type-hints","title":"1. Use Type Hints","text":"<p>Always provide type hints for better IDE support and automatic validation.</p>"},{"location":"develop/python/#2-implement-logging","title":"2. Implement Logging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\n@mcp.tool()\ndef my_tool(input: str) -&gt; str:\n    logger.info(f\"Processing: {input}\")\n    try:\n        result = process(input)\n        logger.debug(f\"Result: {result}\")\n        return result\n    except Exception as e:\n        logger.error(f\"Error: {e}\")\n        raise\n</code></pre>"},{"location":"develop/python/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<pre><code>from mcp.server.exceptions import McpError\n\n@mcp.tool()\ndef safe_tool(data: str) -&gt; str:\n    if not data:\n        raise McpError(\"Data cannot be empty\")\n    \n    try:\n        return process(data)\n    except ProcessingError as e:\n        logger.error(f\"Processing failed: {e}\")\n        raise McpError(\"Failed to process data\")\n</code></pre>"},{"location":"develop/python/#4-use-environment-variables","title":"4. Use Environment Variables","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nAPI_KEY = os.getenv(\"MCP_API_KEY\")\nif not API_KEY:\n    raise ValueError(\"MCP_API_KEY not set\")\n</code></pre>"},{"location":"develop/python/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use async for I/O: Network requests, file operations</li> <li>Cache expensive operations: Use <code>functools.lru_cache</code></li> <li>Connection pooling: Reuse database/HTTP connections</li> <li>Batch operations: Process multiple items together</li> <li>Profile your code: Use <code>cProfile</code> for bottlenecks</li> </ol>"},{"location":"develop/python/#common-patterns","title":"Common Patterns","text":""},{"location":"develop/python/#singleton-pattern-for-clients","title":"Singleton Pattern for Clients","text":"<pre><code>class DatabaseClient:\n    _instance = None\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance.initialize()\n        return cls._instance\n</code></pre>"},{"location":"develop/python/#context-manager-for-resources","title":"Context Manager for Resources","text":"<pre><code>from contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def get_connection():\n    conn = await create_connection()\n    try:\n        yield conn\n    finally:\n        await conn.close()\n</code></pre>"},{"location":"develop/python/#next-steps","title":"Next Steps","text":"<ul> <li>\u26a1 FastMCP Framework</li> <li>\ud83c\udfd7\ufe0f Project Structure</li> <li>\ud83e\uddea Testing Guide</li> <li>\ud83d\udce6 Packaging</li> <li>\ud83c\udfaf Best Practices</li> </ul>"},{"location":"develop/python/best-practices/","title":"Python Best Practices","text":""},{"location":"develop/python/best-practices/#python-specific-best-practices-for-mcp-servers","title":"Python-Specific Best Practices for MCP Servers","text":"<p>Following Python best practices ensures your MCP server is maintainable, performant, and follows community standards.</p>"},{"location":"develop/python/best-practices/#code-style-and-formatting","title":"Code Style and Formatting","text":""},{"location":"develop/python/best-practices/#use-black-and-ruff","title":"Use Black and Ruff","text":"<pre><code># Install formatting tools\nuv add --dev black ruff\n\n# Format code\nblack src tests\n\n# Lint and fix issues\nruff check --fix src tests\n</code></pre>"},{"location":"develop/python/best-practices/#configuration","title":"Configuration","text":"<pre><code># pyproject.toml\n[tool.black]\nline-length = 88\ntarget-version = ['py311']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  \\.eggs\n  | \\.git\n  | \\.venv\n  | build\n  | dist\n)/\n'''\n\n[tool.ruff]\ntarget-version = \"py311\"\nline-length = 88\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long (handled by black)\n    \"B008\",  # do not perform function calls in argument defaults\n]\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"tests/**/*.py\" = [\"S101\"]  # assert allowed in tests\n</code></pre>"},{"location":"develop/python/best-practices/#type-hints-and-mypy","title":"Type Hints and MyPy","text":""},{"location":"develop/python/best-practices/#comprehensive-type-hints","title":"Comprehensive Type Hints","text":"<pre><code>from typing import Any, Dict, List, Optional, Union\nfrom mcp.types import Tool, TextContent\nimport asyncio\n\nclass DatabaseTool:\n    def __init__(self, connection_string: str) -&gt; None:\n        self.connection_string = connection_string\n        self._connection: Optional[Any] = None\n    \n    async def execute_query(\n        self, \n        query: str, \n        params: Optional[Dict[str, Any]] = None\n    ) -&gt; List[TextContent]:\n        \"\"\"Execute database query with type safety.\"\"\"\n        results = await self._execute(query, params or {})\n        return [TextContent(type=\"text\", text=str(result)) for result in results]\n    \n    async def _execute(\n        self, \n        query: str, \n        params: Dict[str, Any]\n    ) -&gt; List[Dict[str, Any]]:\n        # Implementation details\n        return []\n</code></pre>"},{"location":"develop/python/best-practices/#mypy-configuration","title":"MyPy Configuration","text":"<pre><code># pyproject.toml\n[tool.mypy]\npython_version = \"3.11\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\nwarn_unreachable = true\nshow_error_codes = true\n\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\nignore_errors = true\n</code></pre>"},{"location":"develop/python/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"develop/python/best-practices/#custom-exception-hierarchy","title":"Custom Exception Hierarchy","text":"<pre><code># src/my_mcp_server/exceptions.py\nclass MCPServerError(Exception):\n    \"\"\"Base exception for MCP server errors.\"\"\"\n    pass\n\nclass ValidationError(MCPServerError):\n    \"\"\"Raised when input validation fails.\"\"\"\n    def __init__(self, message: str, field: Optional[str] = None):\n        super().__init__(message)\n        self.field = field\n\nclass ExternalServiceError(MCPServerError):\n    \"\"\"Raised when external service calls fail.\"\"\"\n    def __init__(self, message: str, service: str, status_code: Optional[int] = None):\n        super().__init__(message)\n        self.service = service\n        self.status_code = status_code\n\nclass ConfigurationError(MCPServerError):\n    \"\"\"Raised when configuration is invalid.\"\"\"\n    pass\n</code></pre>"},{"location":"develop/python/best-practices/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>import logging\nfrom typing import NoReturn\n\nlogger = logging.getLogger(__name__)\n\nasync def safe_tool_execution(\n    tool_name: str, \n    arguments: Dict[str, Any]\n) -&gt; List[TextContent]:\n    \"\"\"Execute tool with comprehensive error handling.\"\"\"\n    try:\n        # Validate inputs first\n        validated_args = validate_tool_arguments(tool_name, arguments)\n        \n        # Execute with timeout\n        result = await asyncio.wait_for(\n            execute_tool_impl(tool_name, validated_args),\n            timeout=30.0\n        )\n        \n        return result\n        \n    except ValidationError as e:\n        logger.warning(f\"Validation failed for {tool_name}: {e}\")\n        raise  # Re-raise for proper MCP error response\n        \n    except ExternalServiceError as e:\n        logger.error(f\"External service error in {tool_name}: {e}\")\n        # Convert to user-friendly message\n        raise MCPServerError(f\"Service temporarily unavailable: {e.service}\")\n        \n    except asyncio.TimeoutError:\n        logger.error(f\"Timeout executing {tool_name}\")\n        raise MCPServerError(\"Operation timed out\")\n        \n    except Exception as e:\n        logger.exception(f\"Unexpected error in {tool_name}\")\n        raise MCPServerError(\"Internal server error\")\n\ndef validate_tool_arguments(tool_name: str, arguments: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Validate and sanitize tool arguments.\"\"\"\n    if not isinstance(arguments, dict):\n        raise ValidationError(\"Arguments must be a dictionary\")\n    \n    # Tool-specific validation\n    validators = {\n        \"database_query\": validate_database_query,\n        \"file_operation\": validate_file_operation,\n    }\n    \n    validator = validators.get(tool_name)\n    if validator:\n        return validator(arguments)\n    \n    return arguments\n</code></pre>"},{"location":"develop/python/best-practices/#async-programming","title":"Async Programming","text":""},{"location":"develop/python/best-practices/#proper-async-patterns","title":"Proper Async Patterns","text":"<pre><code>import asyncio\nimport aiohttp\nimport aiofiles\nfrom contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nclass AsyncResourceManager:\n    \"\"\"Manage async resources properly.\"\"\"\n    \n    def __init__(self):\n        self._session: Optional[aiohttp.ClientSession] = None\n        self._db_pool: Optional[Any] = None\n    \n    async def __aenter__(self):\n        await self.initialize()\n        return self\n    \n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.cleanup()\n    \n    async def initialize(self):\n        \"\"\"Initialize async resources.\"\"\"\n        self._session = aiohttp.ClientSession(\n            timeout=aiohttp.ClientTimeout(total=30)\n        )\n        # Initialize database pool\n        \n    async def cleanup(self):\n        \"\"\"Clean up async resources.\"\"\"\n        if self._session:\n            await self._session.close()\n        # Clean up database pool\n\n@asynccontextmanager\nasync def get_file_content(file_path: str) -&gt; AsyncGenerator[str, None]:\n    \"\"\"Async context manager for file operations.\"\"\"\n    async with aiofiles.open(file_path, 'r') as f:\n        content = await f.read()\n        yield content\n\n# Concurrent operations\nasync def process_multiple_requests(requests: List[Dict[str, Any]]) -&gt; List[Any]:\n    \"\"\"Process multiple requests concurrently.\"\"\"\n    semaphore = asyncio.Semaphore(10)  # Limit concurrent operations\n    \n    async def process_single(request: Dict[str, Any]) -&gt; Any:\n        async with semaphore:\n            return await process_request(request)\n    \n    # Use gather for concurrent execution\n    results = await asyncio.gather(\n        *[process_single(req) for req in requests],\n        return_exceptions=True  # Handle exceptions gracefully\n    )\n    \n    return results\n</code></pre>"},{"location":"develop/python/best-practices/#configuration-management","title":"Configuration Management","text":""},{"location":"develop/python/best-practices/#pydantic-settings","title":"Pydantic Settings","text":"<pre><code># src/my_mcp_server/config.py\nfrom pydantic import BaseSettings, Field, validator\nfrom typing import Optional, List\nimport os\n\nclass Settings(BaseSettings):\n    \"\"\"Application settings with validation.\"\"\"\n    \n    # Server settings\n    server_name: str = Field(default=\"my-mcp-server\", description=\"Server name\")\n    debug: bool = Field(default=False, description=\"Debug mode\")\n    log_level: str = Field(default=\"INFO\", description=\"Log level\")\n    \n    # Database settings\n    database_url: Optional[str] = Field(None, description=\"Database connection URL\")\n    database_pool_size: int = Field(default=10, ge=1, le=50)\n    database_timeout: int = Field(default=30, ge=1, le=300)\n    \n    # API settings\n    api_key: Optional[str] = Field(None, description=\"External API key\")\n    api_base_url: str = Field(default=\"https://api.example.com\")\n    api_timeout: int = Field(default=30, ge=1, le=300)\n    \n    # Feature flags\n    enable_caching: bool = Field(default=True)\n    enable_metrics: bool = Field(default=False)\n    allowed_operations: List[str] = Field(default_factory=lambda: [\"read\", \"write\"])\n    \n    @validator('log_level')\n    def validate_log_level(cls, v):\n        valid_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']\n        if v.upper() not in valid_levels:\n            raise ValueError(f'Invalid log level. Must be one of: {valid_levels}')\n        return v.upper()\n    \n    @validator('database_url')\n    def validate_database_url(cls, v):\n        if v and not v.startswith(('postgresql://', 'sqlite:///', 'mysql://')):\n            raise ValueError('Invalid database URL scheme')\n        return v\n    \n    class Config:\n        env_prefix = 'MCP_'\n        env_file = '.env'\n        case_sensitive = False\n\n# Global settings instance\nsettings = Settings()\n</code></pre>"},{"location":"develop/python/best-practices/#logging","title":"Logging","text":""},{"location":"develop/python/best-practices/#structured-logging","title":"Structured Logging","text":"<pre><code># src/my_mcp_server/logging_config.py\nimport logging\nimport sys\nfrom typing import Any, Dict\nimport json\nfrom datetime import datetime\n\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"JSON formatter for structured logging.\"\"\"\n    \n    def format(self, record: logging.LogRecord) -&gt; str:\n        log_data: Dict[str, Any] = {\n            'timestamp': datetime.utcnow().isoformat() + 'Z',\n            'level': record.levelname,\n            'logger': record.name,\n            'message': record.getMessage(),\n            'module': record.module,\n            'function': record.funcName,\n            'line': record.lineno,\n        }\n        \n        # Add exception info if present\n        if record.exc_info:\n            log_data['exception'] = self.formatException(record.exc_info)\n        \n        # Add extra fields\n        if hasattr(record, 'extra_fields'):\n            log_data.update(record.extra_fields)\n        \n        return json.dumps(log_data, separators=(',', ':'))\n\ndef setup_logging(level: str = 'INFO') -&gt; None:\n    \"\"\"Configure application logging.\"\"\"\n    root_logger = logging.getLogger()\n    root_logger.setLevel(level)\n    \n    # Remove existing handlers\n    for handler in root_logger.handlers[:]:\n        root_logger.removeHandler(handler)\n    \n    # Console handler with structured format\n    handler = logging.StreamHandler(sys.stderr)\n    handler.setFormatter(StructuredFormatter())\n    root_logger.addHandler(handler)\n    \n    # Suppress noisy third-party loggers\n    logging.getLogger('aiohttp').setLevel(logging.WARNING)\n    logging.getLogger('asyncio').setLevel(logging.WARNING)\n\n# Usage\nlogger = logging.getLogger(__name__)\n\nasync def example_with_logging():\n    \"\"\"Example function with structured logging.\"\"\"\n    logger.info(\n        \"Processing request\", \n        extra={'extra_fields': {\n            'tool_name': 'database_query',\n            'user_id': 'user123',\n            'request_id': 'req-456'\n        }}\n    )\n</code></pre>"},{"location":"develop/python/best-practices/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"develop/python/best-practices/#fixtures-and-test-organization","title":"Fixtures and Test Organization","text":"<pre><code># tests/conftest.py\nimport pytest\nimport asyncio\nfrom unittest.mock import AsyncMock\nfrom my_mcp_server.config import Settings\nfrom my_mcp_server.server import MCPServer\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Create event loop for async tests.\"\"\"\n    loop = asyncio.new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest.fixture\ndef test_settings():\n    \"\"\"Test configuration settings.\"\"\"\n    return Settings(\n        server_name=\"test-server\",\n        debug=True,\n        database_url=\"sqlite:///:memory:\",\n        api_key=\"test-key\"\n    )\n\n@pytest.fixture\nasync def mock_external_service():\n    \"\"\"Mock external service dependencies.\"\"\"\n    mock = AsyncMock()\n    mock.get_data.return_value = {\"test\": \"data\"}\n    return mock\n\n@pytest.fixture\nasync def test_server(test_settings, mock_external_service):\n    \"\"\"Create test server instance.\"\"\"\n    server = MCPServer(test_settings.server_name)\n    # Inject mocked dependencies\n    server._external_service = mock_external_service\n    return server\n</code></pre>"},{"location":"develop/python/best-practices/#test-categories","title":"Test Categories","text":"<pre><code># tests/test_tools.py\nimport pytest\nfrom my_mcp_server.tools import DatabaseTool\n\nclass TestDatabaseTool:\n    \"\"\"Test database tool functionality.\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_valid_query(self, test_server):\n        \"\"\"Test successful query execution.\"\"\"\n        result = await test_server.execute_query(\"SELECT 1\")\n        assert len(result) &gt; 0\n    \n    @pytest.mark.asyncio\n    async def test_invalid_query_raises_error(self, test_server):\n        \"\"\"Test error handling for invalid queries.\"\"\"\n        with pytest.raises(ValidationError):\n            await test_server.execute_query(\"INVALID SQL\")\n    \n    @pytest.mark.parametrize(\"query,expected_error\", [\n        (\"\", \"Query cannot be empty\"),\n        (\"DROP TABLE users\", \"DROP statements not allowed\"),\n        (\"SELECT * FROM users; DELETE FROM users\", \"Multiple statements not allowed\"),\n    ])\n    @pytest.mark.asyncio\n    async def test_query_validation(self, test_server, query, expected_error):\n        \"\"\"Test various query validation scenarios.\"\"\"\n        with pytest.raises(ValidationError, match=expected_error):\n            await test_server.execute_query(query)\n</code></pre>"},{"location":"develop/python/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"develop/python/best-practices/#caching","title":"Caching","text":"<pre><code>from functools import lru_cache\nfrom typing import Dict, Any\nimport asyncio\nimport time\n\n# Simple in-memory cache\nclass TTLCache:\n    \"\"\"Time-to-live cache implementation.\"\"\"\n    \n    def __init__(self, ttl: int = 300):\n        self.ttl = ttl\n        self._cache: Dict[str, tuple] = {}\n    \n    def get(self, key: str) -&gt; Any:\n        if key in self._cache:\n            value, timestamp = self._cache[key]\n            if time.time() - timestamp &lt; self.ttl:\n                return value\n            else:\n                del self._cache[key]\n        return None\n    \n    def set(self, key: str, value: Any) -&gt; None:\n        self._cache[key] = (value, time.time())\n    \n    def clear(self) -&gt; None:\n        self._cache.clear()\n\n# Usage with async functions\ncache = TTLCache(ttl=300)  # 5 minutes\n\nasync def cached_api_call(endpoint: str) -&gt; Dict[str, Any]:\n    \"\"\"API call with caching.\"\"\"\n    cached_result = cache.get(endpoint)\n    if cached_result is not None:\n        return cached_result\n    \n    result = await make_api_call(endpoint)\n    cache.set(endpoint, result)\n    return result\n</code></pre>"},{"location":"develop/python/best-practices/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import aiohttp\nfrom contextlib import asynccontextmanager\n\nclass ConnectionManager:\n    \"\"\"Manage HTTP connection pools.\"\"\"\n    \n    def __init__(self):\n        self._session: Optional[aiohttp.ClientSession] = None\n    \n    async def get_session(self) -&gt; aiohttp.ClientSession:\n        if self._session is None or self._session.closed:\n            connector = aiohttp.TCPConnector(\n                limit=100,  # Total connection pool size\n                limit_per_host=30,  # Per-host connection limit\n                keepalive_timeout=30,\n                enable_cleanup_closed=True\n            )\n            \n            timeout = aiohttp.ClientTimeout(\n                total=30,\n                connect=5,\n                sock_read=10\n            )\n            \n            self._session = aiohttp.ClientSession(\n                connector=connector,\n                timeout=timeout\n            )\n        \n        return self._session\n    \n    async def close(self):\n        if self._session and not self._session.closed:\n            await self._session.close()\n\n# Global connection manager\nconnection_manager = ConnectionManager()\n</code></pre>"},{"location":"develop/python/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"develop/python/best-practices/#input-sanitization","title":"Input Sanitization","text":"<pre><code>import re\nfrom pathlib import Path\nfrom typing import Any\n\ndef sanitize_file_path(file_path: str, allowed_dirs: List[str]) -&gt; Path:\n    \"\"\"Sanitize file path to prevent directory traversal.\"\"\"\n    # Remove any path traversal attempts\n    clean_path = re.sub(r'\\.\\./+', '', file_path)\n    \n    # Convert to absolute path\n    abs_path = Path(clean_path).resolve()\n    \n    # Check if path is within allowed directories\n    for allowed_dir in allowed_dirs:\n        allowed_path = Path(allowed_dir).resolve()\n        try:\n            abs_path.relative_to(allowed_path)\n            return abs_path\n        except ValueError:\n            continue\n    \n    raise ValidationError(f\"File path not allowed: {file_path}\")\n\ndef sanitize_sql_identifier(identifier: str) -&gt; str:\n    \"\"\"Sanitize SQL identifier to prevent injection.\"\"\"\n    if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', identifier):\n        raise ValidationError(f\"Invalid SQL identifier: {identifier}\")\n    return identifier\n</code></pre>"},{"location":"develop/python/best-practices/#environment-variable-handling","title":"Environment Variable Handling","text":"<pre><code># Never log sensitive data\ndef safe_log_config(config: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Log configuration with sensitive data masked.\"\"\"\n    sensitive_keys = {'password', 'token', 'key', 'secret'}\n    safe_config = {}\n    \n    for key, value in config.items():\n        if any(sensitive in key.lower() for sensitive in sensitive_keys):\n            safe_config[key] = \"***MASKED***\"\n        else:\n            safe_config[key] = value\n    \n    return safe_config\n</code></pre> <p>Following these Python-specific best practices will help you create robust, maintainable, and secure MCP servers that integrate well with the Python ecosystem.</p>"},{"location":"develop/python/developing-your-mcp-server-python/","title":"Developing Your MCP Server","text":"Abstract <p>This guide walks you through creating a minimal but functional MCP server using Python and the official MCP SDK. You'll build an echo server that demonstrates the key concepts and patterns for MCP development.</p> <p>For more information on Development best practices see this MCP Server Best Practices Guide</p>"},{"location":"develop/python/developing-your-mcp-server-python/#1-prerequisites","title":"1. Prerequisites","text":"<p>Environment setup</p> <p>Create a new virtual environment for your project to keep dependencies isolated.</p> Create virtual environment<pre><code># Create and manage virtual environments\nuv venv mcp-server-example\nsource mcp-server-example/bin/activate  # Linux/macOS\n# mcp-server-example\\Scripts\\activate   # Windows\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#11-install-mcp-sdk","title":"1.1 Install MCP SDK","text":"Install MCP SDK<pre><code>uv add \"mcp[cli]\"\n# or with pip: pip install \"mcp[cli]\"\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#12-verify-installation","title":"1.2 Verify Installation","text":"Verify MCP installation<pre><code>python -c \"import mcp; print('MCP SDK installed successfully')\"\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#2-write-a-minimal-echo-server","title":"2. Write a Minimal Echo Server","text":""},{"location":"develop/python/developing-your-mcp-server-python/#21-basic-server-structure","title":"2.1 Basic Server Structure","text":"<p>Simple echo server implementation</p> <p>Create <code>my_echo_server.py</code> with this minimal implementation:</p> my_echo_server.py<pre><code>from mcp.server.fastmcp import FastMCP\n\n# Create an MCP server\nmcp = FastMCP(\"my_echo_server\", port=\"8000\")\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text back to the caller\"\"\"\n    return text\n\nif __name__ == \"__main__\":\n    mcp.run()  # STDIO mode by default\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#22-understanding-the-code","title":"2.2 Understanding the Code","text":"<p>Code breakdown</p> <ul> <li>FastMCP: Main application class that handles MCP protocol</li> <li>@mcp.tool(): Decorator that registers the function as an MCP tool</li> <li>Type hints: Python type hints define input/output schemas automatically</li> <li>mcp.run(): Starts the server (defaults to STDIO transport)</li> </ul>"},{"location":"develop/python/developing-your-mcp-server-python/#23-test-stdio-mode","title":"2.3 Test STDIO Mode","text":"Start server in STDIO mode<pre><code>python my_echo_server.py            # waits on stdin/stdout\n</code></pre> <p>Testing with MCP CLI</p> <p>Use the built-in development tools for easier testing:</p> Test with MCP Inspector<pre><code># Test with the MCP development tools\nuv run mcp dev my_echo_server.py\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#3-switch-to-http-transport","title":"3. Switch to HTTP Transport","text":""},{"location":"develop/python/developing-your-mcp-server-python/#31-enable-http-mode","title":"3.1 Enable HTTP Mode","text":"<p>Streamable HTTP transport</p> <p>Update the main block to use HTTP transport for network accessibility:</p> Enable HTTP transport<pre><code>if __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#32-start-http-server","title":"3.2 Start HTTP Server","text":"Run HTTP server<pre><code>python my_echo_server.py            # now at http://localhost:8000/mcp\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#33-test-http-endpoint","title":"3.3 Test HTTP Endpoint","text":"<p>Direct HTTP testing</p> <p>Test the server directly with curl:</p> Test HTTP endpoint<pre><code>curl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#4-register-with-the-gateway","title":"4. Register with the Gateway","text":""},{"location":"develop/python/developing-your-mcp-server-python/#41-server-registration","title":"4.1 Server Registration","text":"<p>Register your server with the gateway</p> <p>Use the gateway API to register your running server:</p> Register server with gateway<pre><code>curl -X POST http://127.0.0.1:4444/gateways \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"my_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\",\"transport\":\"streamablehttp\"}'\n</code></pre> <p>For instructions on registering your server via the UI, please see Register with the Gateway UI.</p>"},{"location":"develop/python/developing-your-mcp-server-python/#42-verify-registration","title":"4.2 Verify Registration","text":"Check registered gateways<pre><code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://127.0.0.1:4444/gateways\n</code></pre> <p>Expected response</p> <p>You should see your server listed as active:</p> Server registration response<pre><code>{\n  \"servers\": [\n    {\n      \"name\": \"my_echo_server\",\n      \"url\": \"http://127.0.0.1:8000/mcp\",\n      \"status\": \"active\"\n    }\n  ]\n}\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#5-end-to-end-validation","title":"5. End-to-End Validation","text":""},{"location":"develop/python/developing-your-mcp-server-python/#51-test-with-mcp-cli","title":"5.1 Test with mcp-cli","text":"<p>Test complete workflow</p> <p>Verify the full chain from CLI to gateway to your server:</p> List and call tools<pre><code># List tools to see your echo tool\nmcp-cli tools --server gateway\n\n# Call the echo tool\nmcp-cli cmd --server gateway \\\n  --tool echo \\\n  --tool-args '{\"text\":\"Round-trip success!\"}'\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#52-test-with-curl","title":"5.2 Test with curl","text":"<p>Direct gateway testing</p> <p>Test the gateway RPC endpoint directly:</p> Test via gateway RPC<pre><code>curl -X POST http://127.0.0.1:4444/rpc \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"my-echo-server-echo\",\"params\":{\"text\":\"Hello!\"},\"id\":1}'\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#53-expected-response","title":"5.3 Expected Response","text":"<p>Validation complete</p> <p>If you see this response, the full path (CLI \u2192 Gateway \u2192 Echo Server) is working correctly:</p> Successful echo response<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Hello!\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#6-enhanced-server-features","title":"6. Enhanced Server Features","text":""},{"location":"develop/python/developing-your-mcp-server-python/#61-multiple-tools","title":"6.1 Multiple Tools","text":"<p>Multi-tool server</p> <p>Extend your server with additional functionality:</p> Enhanced server with multiple tools<pre><code>from mcp.server.fastmcp import FastMCP\nimport datetime\n\n# Create an MCP server\nmcp = FastMCP(\"my_enhanced_server\", port=\"8000\")\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text back to the caller\"\"\"\n    return text\n\n@mcp.tool()\ndef get_timestamp() -&gt; str:\n    \"\"\"Get the current timestamp\"\"\"\n    return datetime.datetime.now().isoformat()\n\n@mcp.tool()\ndef calculate(a: float, b: float, operation: str) -&gt; float:\n    \"\"\"Perform basic math operations: add, subtract, multiply, divide\"\"\"\n    operations = {\n        \"add\": a + b,\n        \"subtract\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b if b != 0 else float('inf')\n    }\n\n    if operation not in operations:\n        raise ValueError(f\"Unknown operation: {operation}\")\n\n    return operations[operation]\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre> <p>Update the MCP Server in the Gateway</p> <p>Delete the current Server and register the new Server:</p> Register server with gateway<pre><code>curl -X POST http://127.0.0.1:4444/gateways \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"my_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\",\"transport\":\"streamablehttp\"}'\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#62-structured-output-with-pydantic","title":"6.2 Structured Output with Pydantic","text":"<p>Rich data structures</p> <p>Use Pydantic models for complex structured responses:</p> Structured output server<pre><code>from mcp.server.fastmcp import FastMCP\nfrom pydantic import BaseModel, Field\nimport datetime\n\nmcp = FastMCP(\"structured_server\", port=\"8000\")\n\nclass EchoResponse(BaseModel):\n    \"\"\"Response structure for echo tool\"\"\"\n    original_text: str = Field(description=\"The original input text\")\n    echo_text: str = Field(description=\"The echoed text\")\n    length: int = Field(description=\"Length of the text\")\n    timestamp: str = Field(description=\"When the echo was processed\")\n\n@mcp.tool()\ndef structured_echo(text: str) -&gt; EchoResponse:\n    \"\"\"Echo with structured response data\"\"\"\n    return EchoResponse(\n        original_text=text,\n        echo_text=text,\n        length=len(text),\n        timestamp=datetime.datetime.now().isoformat()\n    )\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#63-error-handling-and-validation","title":"6.3 Error Handling and Validation","text":"<p>Production considerations</p> <p>Add proper error handling and validation for production use:</p> Robust error handling<pre><code>from mcp.server.fastmcp import FastMCP\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nmcp = FastMCP(\"robust_server\", port=\"8000\")\n\n@mcp.tool()\ndef safe_echo(text: str) -&gt; str:\n    \"\"\"Echo with validation and error handling\"\"\"\n    try:\n        # Log the request\n        logger.info(f\"Processing echo request for text of length {len(text)}\")\n\n        # Validate input\n        if not text.strip():\n            raise ValueError(\"Text cannot be empty\")\n\n        if len(text) &gt; 1000:\n            raise ValueError(\"Text too long (max 1000 characters)\")\n\n        # Process and return\n        return text\n\n    except Exception as e:\n        logger.error(f\"Error in safe_echo: {e}\")\n        raise\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#7-testing-your-server","title":"7. Testing Your Server","text":""},{"location":"develop/python/developing-your-mcp-server-python/#71-development-testing","title":"7.1 Development Testing","text":"<p>Interactive development</p> <p>Use the MCP Inspector for rapid testing and debugging:</p> Development testing with MCP Inspector<pre><code># Use the built-in development tools\nuv run mcp dev my_echo_server.py\n\n# Test with dependencies\nuv run mcp dev my_echo_server.py --with pandas --with numpy\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#72-unit-testing","title":"7.2 Unit Testing","text":"<p>Testing considerations</p> <p>For unit testing, focus on business logic rather than MCP protocol:</p> test_echo_server.py<pre><code>import pytest\nfrom my_echo_server import mcp\n\n@pytest.mark.asyncio\nasync def test_echo_tool():\n    \"\"\"Test the echo tool directly\"\"\"\n    # This would require setting up the MCP server context\n    # For integration testing, use the MCP Inspector instead\n    pass\n\ndef test_basic_functionality():\n    \"\"\"Test basic server setup\"\"\"\n    assert mcp.name == \"my_echo_server\"\n    # Add more server validation tests\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#73-integration-testing","title":"7.3 Integration Testing","text":"<p>End-to-end testing</p> <p>Test the complete workflow with a simple script:</p> Integration test script<pre><code>#!/bin/bash\n\n# Start server in background\npython my_echo_server.py &amp;\nSERVER_PID=$!\n\n# Wait for server to start\nsleep 2\n\n# Test server registration\necho \"Testing server registration...\"\ncurl -X POST http://127.0.0.1:4444/servers \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"test_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\"}'\n\n# Test tool call\necho \"Testing tool call...\"\nmcp-cli cmd --server gateway \\\n  --tool echo \\\n  --tool-args '{\"text\":\"Integration test success!\"}'\n\n# Cleanup\nkill $SERVER_PID\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#8-deployment-considerations","title":"8. Deployment Considerations","text":""},{"location":"develop/python/developing-your-mcp-server-python/#81-production-configuration","title":"8.1 Production Configuration","text":"<p>Environment-based configuration</p> <p>Use environment variables for production settings:</p> Production-ready server<pre><code>import os\nfrom mcp.server.fastmcp import FastMCP\n\n# Configuration from environment\nSERVER_NAME = os.getenv(\"MCP_SERVER_NAME\", \"my_echo_server\")\nPORT = os.getenv(\"MCP_SERVER_PORT\", \"8000\")\nDEBUG_MODE = os.getenv(\"MCP_DEBUG\", \"false\").lower() == \"true\"\n\nmcp = FastMCP(SERVER_NAME, port=PORT)\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text\"\"\"\n    if DEBUG_MODE:\n        print(f\"Debug: Processing text of length {len(text)}\")\n    return text\n\nif __name__ == \"__main__\":\n    transport = os.getenv(\"MCP_TRANSPORT\", \"streamable-http\")\n    print(f\"Starting {SERVER_NAME} with {transport} transport\")\n    mcp.run(transport=transport)\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#82-container-podmandocker-support","title":"8.2 Container (Podman/Docker) Support","text":"<p>Containerization</p> <p>Package your server for easy deployment by creating a Containerfile:</p> Dockerfile<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install uv\nRUN pip install uv\n\n# Copy requirements\nCOPY pyproject.toml .\nRUN uv pip install --system -e .\n\nCOPY my_echo_server.py .\n\nEXPOSE 8000\n\nCMD [\"python\", \"my_echo_server.py\"]\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"my-echo-server\"\nversion = \"0.1.0\"\ndependencies = [\n    \"mcp[cli]\",\n]\n\n[project.scripts]\necho-server = \"my_echo_server:main\"\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#9-advanced-features","title":"9. Advanced Features","text":""},{"location":"develop/python/developing-your-mcp-server-python/#91-resources","title":"9.1 Resources","text":"<p>Exposing data via resources</p> <p>Resources provide contextual data to LLMs:</p> Server with resources<pre><code>from mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"resource_server\", port=\"8000\")\n\n@mcp.resource(\"config://settings\")\ndef get_settings() -&gt; str:\n    \"\"\"Provide server configuration as a resource\"\"\"\n    return \"\"\"{\n  \"server_name\": \"my_echo_server\",\n  \"version\": \"1.0.0\",\n  \"features\": [\"echo\", \"timestamp\"]\n}\"\"\"\n\n@mcp.resource(\"status://health\")\ndef get_health() -&gt; str:\n    \"\"\"Provide server health status\"\"\"\n    return \"Server is running normally\"\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text\"\"\"\n    return text\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#92-context-and-logging","title":"9.2 Context and Logging","text":"<p>Enhanced observability</p> <p>Use context for logging and progress tracking:</p> Server with context and logging<pre><code>from mcp.server.fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"context_server\", port=\"8000\")\n\n@mcp.tool()\nasync def echo_with_logging(text: str, ctx: Context) -&gt; str:\n    \"\"\"Echo with context logging\"\"\"\n    await ctx.info(f\"Processing echo request for: {text[:50]}...\")\n    await ctx.debug(f\"Full text length: {len(text)}\")\n\n    result = text\n\n    await ctx.info(\"Echo completed successfully\")\n    return result\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#10-installation-and-distribution","title":"10. Installation and Distribution","text":""},{"location":"develop/python/developing-your-mcp-server-python/#101-install-in-claude-desktop","title":"10.1 Install in Claude Desktop","text":"<p>Claude Desktop integration</p> <p>Install your server directly in Claude Desktop:</p> Claude Desktop installation<pre><code># Install your server in Claude Desktop\nuv run mcp install my_echo_server.py --name \"My Echo Server\"\n\n# With environment variables\nuv run mcp install my_echo_server.py -v DEBUG=true -v LOG_LEVEL=info\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#102-package-distribution","title":"10.2 Package Distribution","text":"<p>Creating distributable packages</p> <p>Build packages for easy distribution:</p> Package building and distribution<pre><code># Build distributable package\nuv build\n\n# Install from package\npip install dist/my_echo_server-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"develop/python/developing-your-mcp-server-python/#11-troubleshooting","title":"11. Troubleshooting","text":""},{"location":"develop/python/developing-your-mcp-server-python/#111-common-issues","title":"11.1 Common Issues","text":"<p>Import errors</p> <p><pre><code>ModuleNotFoundError: No module named 'mcp'\n</code></pre> Solution: Install MCP SDK: <code>uv add \"mcp[cli]\"</code></p> <p>Port conflicts</p> <p><pre><code>OSError: [Errno 48] Address already in use\n</code></pre> Solution: The default port is 8000. Change it or kill the process using the port</p> <p>Registration failures</p> <p><pre><code>Error registering server with gateway\n</code></pre> Solution: Ensure gateway is running, listening on the correct port and the server URL is correct (<code>/mcp</code> endpoint)</p>"},{"location":"develop/python/developing-your-mcp-server-python/#112-debugging-tips","title":"11.2 Debugging Tips","text":"<p>Debugging strategies</p> <p>Use these approaches for troubleshooting:</p> Debug your server<pre><code># Use the MCP Inspector for interactive debugging\nuv run mcp dev my_echo_server.py\n\n# Enable debug logging\nMCP_DEBUG=true python my_echo_server.py\n</code></pre>"},{"location":"develop/python/packaging/","title":"Python Packaging","text":""},{"location":"develop/python/packaging/#packaging-mcp-servers-for-distribution","title":"Packaging MCP Servers for Distribution","text":"<p>Properly packaged MCP servers are easy to install, distribute, and maintain.</p>"},{"location":"develop/python/packaging/#package-structure","title":"Package Structure","text":""},{"location":"develop/python/packaging/#modern-python-packaging","title":"Modern Python Packaging","text":"<p>Use <code>pyproject.toml</code> for modern Python packaging:</p> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"my-mcp-server\"\nversion = \"0.1.0\"\ndescription = \"An MCP server for [specific purpose]\"\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nauthors = [\n    {name = \"Your Name\", email = \"you@example.com\"},\n]\nmaintainers = [\n    {name = \"Your Name\", email = \"you@example.com\"},\n]\nkeywords = [\"mcp\", \"model-context-protocol\", \"ai\", \"assistant\"]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\nrequires-python = \"&gt;=3.11\"\ndependencies = [\n    \"mcp&gt;=0.1.0\",\n    \"pydantic&gt;=2.0.0\",\n    \"aiofiles&gt;=23.0.0\",\n    \"aiohttp&gt;=3.9.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"pytest-asyncio&gt;=0.21.0\",\n    \"pytest-cov&gt;=4.0.0\",\n    \"black&gt;=23.0.0\",\n    \"ruff&gt;=0.1.0\",\n    \"mypy&gt;=1.0.0\",\n    \"build&gt;=0.10.0\",\n]\ntest = [\n    \"pytest&gt;=7.0.0\",\n    \"pytest-asyncio&gt;=0.21.0\",\n    \"pytest-cov&gt;=4.0.0\",\n]\nlint = [\n    \"black&gt;=23.0.0\",\n    \"ruff&gt;=0.1.0\",\n    \"mypy&gt;=1.0.0\",\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/yourusername/my-mcp-server\"\n\"Bug Reports\" = \"https://github.com/yourusername/my-mcp-server/issues\"\n\"Source\" = \"https://github.com/yourusername/my-mcp-server\"\n\"Documentation\" = \"https://my-mcp-server.readthedocs.io/\"\n\n[project.scripts]\nmy-mcp-server = \"my_mcp_server.server:main\"\n\n[project.entry-points.\"mcp.servers\"]\nmy-server = \"my_mcp_server.server:create_server\"\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[tool.setuptools.package-data]\n\"my_mcp_server\" = [\"py.typed\", \"*.json\", \"*.yaml\"]\n</code></pre>"},{"location":"develop/python/packaging/#entry-points","title":"Entry Points","text":""},{"location":"develop/python/packaging/#script-entry-points","title":"Script Entry Points","text":"<pre><code># src/my_mcp_server/server.py\ndef main():\n    \"\"\"Main entry point for the CLI command.\"\"\"\n    import asyncio\n    from .server import MCPServer\n    \n    server = MCPServer(\"my-mcp-server\")\n    asyncio.run(server.run())\n\ndef create_server():\n    \"\"\"Factory function for programmatic server creation.\"\"\"\n    return MCPServer(\"my-mcp-server\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"develop/python/packaging/#building-packages","title":"Building Packages","text":""},{"location":"develop/python/packaging/#build-tools-setup","title":"Build Tools Setup","text":"<pre><code># Install build tools\nuv add --dev build twine\n\n# Or with pip\npip install build twine\n</code></pre>"},{"location":"develop/python/packaging/#building-the-package","title":"Building the Package","text":"<pre><code># Clean previous builds\nrm -rf dist/ build/ *.egg-info/\n\n# Build the package\npython -m build\n\n# This creates:\n# dist/my_mcp_server-0.1.0.tar.gz (source distribution)\n# dist/my_mcp_server-0.1.0-py3-none-any.whl (wheel)\n</code></pre>"},{"location":"develop/python/packaging/#package-validation","title":"Package Validation","text":"<pre><code># Check package contents\ntar -tzf dist/my_mcp_server-0.1.0.tar.gz\nunzip -l dist/my_mcp_server-0.1.0-py3-none-any.whl\n\n# Validate package metadata\ntwine check dist/*\n\n# Test installation\npip install dist/my_mcp_server-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"develop/python/packaging/#publishing","title":"Publishing","text":""},{"location":"develop/python/packaging/#pypi-publishing","title":"PyPI Publishing","text":"<pre><code># Configure PyPI token\n# Create .pypirc or use environment variables\nexport TWINE_USERNAME=__token__\nexport TWINE_PASSWORD=pypi-your-api-token-here\n\n# Upload to Test PyPI first\ntwine upload --repository testpypi dist/*\n\n# Test install from Test PyPI\npip install --index-url https://test.pypi.org/simple/ my-mcp-server\n\n# Upload to production PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"develop/python/packaging/#automated-publishing","title":"Automated Publishing","text":"<pre><code># .github/workflows/publish.yml\nname: Publish Python Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install build twine\n    \n    - name: Build package\n      run: python -m build\n    \n    - name: Publish to PyPI\n      env:\n        TWINE_USERNAME: __token__\n        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}\n      run: |\n        twine upload dist/*\n</code></pre>"},{"location":"develop/python/packaging/#version-management","title":"Version Management","text":""},{"location":"develop/python/packaging/#semantic-versioning","title":"Semantic Versioning","text":"<p>Follow semantic versioning (semver): - <code>MAJOR.MINOR.PATCH</code> - <code>1.0.0</code> - Initial stable release - <code>1.0.1</code> - Bug fixes - <code>1.1.0</code> - New features (backward compatible) - <code>2.0.0</code> - Breaking changes</p>"},{"location":"develop/python/packaging/#dynamic-versioning","title":"Dynamic Versioning","text":"<pre><code># src/my_mcp_server/__init__.py\n__version__ = \"0.1.0\"\n__all__ = [\"__version__\"]\n</code></pre> <pre><code># pyproject.toml - dynamic version\n[project]\ndynamic = [\"version\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"my_mcp_server.__version__\"}\n</code></pre>"},{"location":"develop/python/packaging/#documentation-packaging","title":"Documentation Packaging","text":""},{"location":"develop/python/packaging/#include-documentation","title":"Include Documentation","text":"<pre><code># Include documentation in package\n[tool.setuptools]\ninclude-package-data = true\n\n[tool.setuptools.package-data]\n\"my_mcp_server\" = [\"docs/*.md\", \"examples/*.py\"]\n</code></pre>"},{"location":"develop/python/packaging/#readme-and-changelog","title":"README and Changelog","text":"<pre><code># Use README as long description\n[project]\nreadme = \"README.md\"\n\n# Or dynamically read README\n[tool.setuptools.dynamic]\nreadme = {file = [\"README.md\"], content-type = \"text/markdown\"}\n</code></pre>"},{"location":"develop/python/packaging/#type-information","title":"Type Information","text":""},{"location":"develop/python/packaging/#include-type-information","title":"Include Type Information","text":"<pre><code># src/my_mcp_server/py.typed\n# Empty file to indicate package includes type information\n</code></pre> <pre><code># Include py.typed in package\n[tool.setuptools.package-data]\n\"my_mcp_server\" = [\"py.typed\"]\n</code></pre>"},{"location":"develop/python/packaging/#development-installation","title":"Development Installation","text":""},{"location":"develop/python/packaging/#editable-installation","title":"Editable Installation","text":"<pre><code># Install in development mode\npip install -e .\n\n# With development dependencies\npip install -e \".[dev]\"\n\n# Using uv\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"develop/python/packaging/#development-workflow","title":"Development Workflow","text":"<pre><code># Setup development environment\ngit clone https://github.com/yourusername/my-mcp-server\ncd my-mcp-server\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e \".[dev]\"\n\n# Run tests\npytest\n\n# Format code\nblack src tests\nruff check src tests\n\n# Type checking\nmypy src\n\n# Build package\npython -m build\n</code></pre>"},{"location":"develop/python/packaging/#makefile-automation","title":"Makefile Automation","text":"<pre><code># Makefile\n.PHONY: install dev test lint format build clean publish\n\ninstall:\n\tpip install .\n\ndev:\n\tpip install -e \".[dev]\"\n\ntest:\n\tpytest --cov=src --cov-report=term-missing\n\nlint:\n\truff check src tests\n\tmypy src\n\nformat:\n\tblack src tests\n\truff check --fix src tests\n\nbuild: clean\n\tpython -m build\n\nclean:\n\trm -rf dist/ build/ *.egg-info/ .coverage htmlcov/\n\npublish: build\n\ttwine upload dist/*\n\ntest-publish: build\n\ttwine upload --repository testpypi dist/*\n</code></pre>"},{"location":"develop/python/packaging/#docker-packaging","title":"Docker Packaging","text":""},{"location":"develop/python/packaging/#dockerfile-for-distribution","title":"Dockerfile for Distribution","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Copy package files\nCOPY dist/my_mcp_server-*.whl .\n\n# Install package\nRUN pip install --no-cache-dir my_mcp_server-*.whl\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp\nUSER mcp\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD python -c \"import my_mcp_server; print('OK')\"\n\nCMD [\"my-mcp-server\"]\n</code></pre>"},{"location":"develop/python/packaging/#best-practices","title":"Best Practices","text":""},{"location":"develop/python/packaging/#package-metadata","title":"Package Metadata","text":"<ol> <li>Descriptive Name: Clear, searchable package name</li> <li>Good Description: Explain what the server does</li> <li>Proper Classifiers: Help users find your package</li> <li>Version Pinning: Pin major versions, allow minor updates</li> </ol>"},{"location":"develop/python/packaging/#dependencies","title":"Dependencies","text":"<ol> <li>Minimal Dependencies: Only include necessary packages</li> <li>Version Constraints: Use <code>&gt;=</code> for minimum versions</li> <li>Optional Dependencies: Group related optional features</li> <li>Security: Regularly update dependencies</li> </ol>"},{"location":"develop/python/packaging/#distribution","title":"Distribution","text":"<ol> <li>Test First: Always test on Test PyPI first</li> <li>Automated Builds: Use CI/CD for consistent builds</li> <li>Signed Packages: Sign packages for security</li> <li>Documentation: Include comprehensive documentation</li> </ol>"},{"location":"develop/python/packaging/#maintenance","title":"Maintenance","text":"<ol> <li>Semantic Versioning: Follow semver strictly</li> <li>Changelog: Maintain detailed changelog</li> <li>Backward Compatibility: Avoid breaking changes in minor versions</li> <li>Deprecation Warnings: Warn before removing features</li> </ol> <p>Proper packaging makes your MCP server accessible to the community and easy to integrate into various environments.</p>"},{"location":"develop/python/structure/","title":"Python Project Structure","text":""},{"location":"develop/python/structure/#recommended-project-layout","title":"Recommended Project Layout","text":"<p>A well-structured MCP server project follows Python packaging standards and best practices.</p>"},{"location":"develop/python/structure/#standard-structure","title":"Standard Structure","text":"<pre><code>my-mcp-server/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_mcp_server/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 server.py          # Main server implementation\n\u2502       \u251c\u2500\u2500 tools/             # Tool implementations\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 database.py\n\u2502       \u2502   \u2514\u2500\u2500 file_ops.py\n\u2502       \u251c\u2500\u2500 resources/         # Resource providers\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u2514\u2500\u2500 config.py\n\u2502       \u2514\u2500\u2500 utils/            # Shared utilities\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u2514\u2500\u2500 helpers.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_server.py\n\u2502   \u251c\u2500\u2500 test_tools/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 test_database.py\n\u2502   \u2502   \u2514\u2500\u2500 test_file_ops.py\n\u2502   \u2514\u2500\u2500 fixtures/\n\u2502       \u2514\u2500\u2500 sample_data.json\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 api.md\n\u2502   \u2514\u2500\u2500 usage.md\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 run_server.py\n\u2502   \u2514\u2500\u2500 setup_dev.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"develop/python/structure/#core-components","title":"Core Components","text":""},{"location":"develop/python/structure/#server-module-serverpy","title":"Server Module (<code>server.py</code>)","text":"<pre><code>import asyncio\nfrom mcp.server import Server\nfrom mcp.server.stdio import stdio_server\nfrom .tools import register_tools\nfrom .resources import register_resources\n\nclass MCPServer:\n    def __init__(self, name: str):\n        self.server = Server(name)\n        self._register_handlers()\n    \n    def _register_handlers(self):\n        register_tools(self.server)\n        register_resources(self.server)\n    \n    async def run(self):\n        async with stdio_server() as (read_stream, write_stream):\n            await self.server.run(read_stream, write_stream)\n\ndef main():\n    server = MCPServer(\"my-mcp-server\")\n    asyncio.run(server.run())\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"develop/python/structure/#tool-organization-tools__init__py","title":"Tool Organization (<code>tools/__init__.py</code>)","text":"<pre><code>from mcp.server import Server\nfrom .database import register_database_tools\nfrom .file_ops import register_file_tools\n\ndef register_tools(server: Server):\n    \"\"\"Register all tools with the server.\"\"\"\n    register_database_tools(server)\n    register_file_tools(server)\n</code></pre>"},{"location":"develop/python/structure/#individual-tool-modules-toolsdatabasepy","title":"Individual Tool Modules (<code>tools/database.py</code>)","text":"<pre><code>from mcp.server import Server\nfrom mcp.types import Tool, TextContent\nimport json\n\ndef register_database_tools(server: Server):\n    \"\"\"Register database-related tools.\"\"\"\n    \n    @server.list_tools()\n    async def list_tools():\n        return [\n            Tool(\n                name=\"query_database\",\n                description=\"Execute a SQL query\",\n                inputSchema={\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"query\": {\"type\": \"string\"},\n                        \"limit\": {\"type\": \"integer\", \"default\": 100}\n                    },\n                    \"required\": [\"query\"]\n                }\n            )\n        ]\n    \n    @server.call_tool()\n    async def call_tool(name: str, arguments: dict):\n        if name == \"query_database\":\n            return await _execute_query(arguments)\n        raise ValueError(f\"Unknown tool: {name}\")\n\nasync def _execute_query(args: dict):\n    \"\"\"Execute database query (implementation).\"\"\"\n    query = args[\"query\"]\n    limit = args.get(\"limit\", 100)\n    \n    # Your database logic here\n    result = {\"query\": query, \"limit\": limit, \"results\": []}\n    \n    return [TextContent(type=\"text\", text=json.dumps(result))]\n</code></pre>"},{"location":"develop/python/structure/#configuration-management","title":"Configuration Management","text":""},{"location":"develop/python/structure/#settings-module-utilsconfigpy","title":"Settings Module (<code>utils/config.py</code>)","text":"<pre><code>import os\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass Settings:\n    \"\"\"Application settings from environment variables.\"\"\"\n    \n    # Server settings\n    server_name: str = \"my-mcp-server\"\n    debug: bool = False\n    \n    # Database settings\n    database_url: Optional[str] = None\n    database_timeout: int = 30\n    \n    # API settings\n    api_key: Optional[str] = None\n    api_base_url: str = \"https://api.example.com\"\n    \n    @classmethod\n    def from_env(cls) -&gt; 'Settings':\n        \"\"\"Load settings from environment variables.\"\"\"\n        return cls(\n            server_name=os.getenv(\"MCP_SERVER_NAME\", cls.server_name),\n            debug=os.getenv(\"MCP_DEBUG\", \"false\").lower() == \"true\",\n            database_url=os.getenv(\"DATABASE_URL\"),\n            database_timeout=int(os.getenv(\"DATABASE_TIMEOUT\", \"30\")),\n            api_key=os.getenv(\"API_KEY\"),\n            api_base_url=os.getenv(\"API_BASE_URL\", cls.api_base_url)\n        )\n\n# Global settings instance\nsettings = Settings.from_env()\n</code></pre>"},{"location":"develop/python/structure/#package-configuration","title":"Package Configuration","text":""},{"location":"develop/python/structure/#pyprojecttoml","title":"pyproject.toml","text":"<pre><code>[build-system]\nrequires = [\"setuptools&gt;=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"my-mcp-server\"\nversion = \"0.1.0\"\ndescription = \"My MCP Server implementation\"\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nauthors = [{name = \"Your Name\", email = \"you@example.com\"}]\nrequires-python = \"&gt;=3.11\"\ndependencies = [\n    \"mcp&gt;=0.1.0\",\n    \"aiofiles&gt;=23.0.0\",\n    \"pydantic&gt;=2.0.0\",\n]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"pytest-asyncio&gt;=0.21.0\",\n    \"pytest-cov&gt;=4.0.0\",\n    \"black&gt;=23.0.0\",\n    \"ruff&gt;=0.1.0\",\n    \"mypy&gt;=1.0.0\",\n]\n\n[project.scripts]\nmy-mcp-server = \"my_mcp_server.server:main\"\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py311']\n\n[tool.ruff]\ntarget-version = \"py311\"\nline-length = 88\n\n[tool.mypy]\npython_version = \"3.11\"\nstrict = true\nwarn_return_any = true\nwarn_unused_configs = true\n</code></pre>"},{"location":"develop/python/structure/#development-scripts","title":"Development Scripts","text":""},{"location":"develop/python/structure/#development-runner-scriptsrun_serverpy","title":"Development Runner (<code>scripts/run_server.py</code>)","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"Development server runner with hot reload.\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to path\nsrc_path = Path(__file__).parent.parent / \"src\"\nsys.path.insert(0, str(src_path))\n\nfrom my_mcp_server.server import main\n\nif __name__ == \"__main__\":\n    # Set development environment\n    os.environ.setdefault(\"MCP_DEBUG\", \"true\")\n    main()\n</code></pre>"},{"location":"develop/python/structure/#best-practices","title":"Best Practices","text":""},{"location":"develop/python/structure/#code-organization","title":"Code Organization","text":"<ol> <li>Separation of Concerns: Keep tools, resources, and utilities in separate modules</li> <li>Type Hints: Use comprehensive type annotations</li> <li>Error Handling: Implement proper exception handling</li> <li>Logging: Use structured logging throughout</li> </ol>"},{"location":"develop/python/structure/#dependencies","title":"Dependencies","text":"<ol> <li>Minimal Dependencies: Only include necessary packages</li> <li>Version Pinning: Pin major versions, allow minor updates</li> <li>Development Dependencies: Separate dev dependencies from runtime</li> </ol>"},{"location":"develop/python/structure/#testing-structure","title":"Testing Structure","text":"<ol> <li>Mirror Source Structure: Tests should mirror the src/ structure</li> <li>Fixtures: Use pytest fixtures for common test data</li> <li>Integration Tests: Test the full server integration</li> </ol>"},{"location":"develop/python/structure/#documentation","title":"Documentation","text":"<ol> <li>Docstrings: Document all public functions and classes</li> <li>Type Hints: Use as documentation for function signatures</li> <li>README: Include setup, usage, and configuration instructions</li> </ol> <p>This structure provides a solid foundation for maintainable, testable MCP servers in Python.</p>"},{"location":"develop/python/testing/","title":"Python Testing","text":""},{"location":"develop/python/testing/#testing-strategy-for-mcp-servers","title":"Testing Strategy for MCP Servers","text":"<p>Comprehensive testing ensures your MCP server is reliable and maintainable.</p>"},{"location":"develop/python/testing/#testing-stack","title":"Testing Stack","text":""},{"location":"develop/python/testing/#core-testing-tools","title":"Core Testing Tools","text":"<pre><code># Install testing dependencies\nuv add --dev pytest pytest-asyncio pytest-cov pytest-mock\n</code></pre>"},{"location":"develop/python/testing/#testing-configuration","title":"Testing Configuration","text":"<pre><code># pyproject.toml\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\naddopts = \"-v --tb=short --cov=src --cov-report=term-missing\"\nasyncio_mode = \"auto\"\n</code></pre>"},{"location":"develop/python/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"develop/python/testing/#testing-tools","title":"Testing Tools","text":"<pre><code># tests/test_tools.py\nimport pytest\nfrom unittest.mock import AsyncMock, patch\nfrom mcp.types import TextContent\n\nfrom my_mcp_server.tools.database import _execute_query\n\n@pytest.mark.asyncio\nasync def test_execute_query():\n    \"\"\"Test database query execution.\"\"\"\n    args = {\"query\": \"SELECT * FROM users\", \"limit\": 10}\n    \n    with patch(\"my_mcp_server.tools.database.db_client\") as mock_db:\n        mock_db.execute.return_value = [{\"id\": 1, \"name\": \"Alice\"}]\n        \n        result = await _execute_query(args)\n        \n        assert len(result) == 1\n        assert isinstance(result[0], TextContent)\n        assert \"Alice\" in result[0].text\n</code></pre>"},{"location":"develop/python/testing/#testing-server-handlers","title":"Testing Server Handlers","text":"<pre><code># tests/test_server.py\nimport pytest\nfrom mcp.server import Server\nfrom my_mcp_server.server import MCPServer\n\n@pytest.fixture\ndef server():\n    \"\"\"Create test server instance.\"\"\"\n    return MCPServer(\"test-server\")\n\n@pytest.mark.asyncio\nasync def test_server_initialization(server):\n    \"\"\"Test server initializes correctly.\"\"\"\n    assert server.server.name == \"test-server\"\n    # Test that handlers are registered\n    tools = await server.server._list_tools_handler()\n    assert len(tools) &gt; 0\n</code></pre>"},{"location":"develop/python/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"develop/python/testing/#testing-with-real-mcp-protocol","title":"Testing with Real MCP Protocol","text":"<pre><code># tests/test_integration.py\nimport asyncio\nimport json\nfrom io import StringIO\nfrom mcp.server.stdio import stdio_server\n\n@pytest.mark.asyncio\nasync def test_mcp_protocol_integration():\n    \"\"\"Test full MCP protocol integration.\"\"\"\n    from my_mcp_server.server import MCPServer\n    \n    server = MCPServer(\"test-server\")\n    \n    # Simulate stdin/stdout\n    stdin_data = json.dumps({\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"tools/list\",\n        \"id\": 1\n    }) + \"\\n\"\n    \n    stdin = StringIO(stdin_data)\n    stdout = StringIO()\n    \n    # This would require custom stdio handling for testing\n    # In practice, use MCP test utilities when available\n</code></pre>"},{"location":"develop/python/testing/#mock-external-dependencies","title":"Mock External Dependencies","text":""},{"location":"develop/python/testing/#database-mocking","title":"Database Mocking","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom unittest.mock import AsyncMock\n\n@pytest.fixture\ndef mock_database():\n    \"\"\"Mock database client.\"\"\"\n    mock_client = AsyncMock()\n    mock_client.execute.return_value = [{\"id\": 1, \"name\": \"test\"}]\n    mock_client.connect.return_value = True\n    return mock_client\n\n@pytest.fixture(autouse=True)\ndef patch_database(mock_database, monkeypatch):\n    \"\"\"Automatically patch database in all tests.\"\"\"\n    monkeypatch.setattr(\n        \"my_mcp_server.tools.database.get_db_client\",\n        lambda: mock_database\n    )\n</code></pre>"},{"location":"develop/python/testing/#api-client-mocking","title":"API Client Mocking","text":"<pre><code># tests/test_api_tools.py\nimport pytest\nimport aiohttp\nfrom aioresponses import aioresponses\n\n@pytest.mark.asyncio\nasync def test_api_call():\n    \"\"\"Test external API calls.\"\"\"\n    with aioresponses() as m:\n        m.get(\n            \"https://api.example.com/users/1\",\n            payload={\"id\": 1, \"name\": \"Alice\"}\n        )\n        \n        result = await fetch_user_data(1)\n        assert result[\"name\"] == \"Alice\"\n</code></pre>"},{"location":"develop/python/testing/#testing-utilities","title":"Testing Utilities","text":""},{"location":"develop/python/testing/#test-fixtures","title":"Test Fixtures","text":"<pre><code># tests/fixtures.py\nimport pytest\nfrom pathlib import Path\n\n@pytest.fixture\ndef sample_data():\n    \"\"\"Load sample test data.\"\"\"\n    fixture_path = Path(__file__).parent / \"fixtures\" / \"sample_data.json\"\n    with open(fixture_path) as f:\n        return json.load(f)\n\n@pytest.fixture\ndef temp_file(tmp_path):\n    \"\"\"Create temporary test file.\"\"\"\n    test_file = tmp_path / \"test.txt\"\n    test_file.write_text(\"test content\")\n    return test_file\n</code></pre>"},{"location":"develop/python/testing/#custom-assertions","title":"Custom Assertions","text":"<pre><code># tests/assertions.py\ndef assert_valid_mcp_response(response):\n    \"\"\"Assert response is valid MCP format.\"\"\"\n    assert isinstance(response, list)\n    for item in response:\n        assert hasattr(item, 'type')\n        if item.type == 'text':\n            assert hasattr(item, 'text')\n            assert isinstance(item.text, str)\n</code></pre>"},{"location":"develop/python/testing/#error-testing","title":"Error Testing","text":""},{"location":"develop/python/testing/#testing-error-conditions","title":"Testing Error Conditions","text":"<pre><code>@pytest.mark.asyncio\nasync def test_invalid_tool_name():\n    \"\"\"Test error handling for invalid tool names.\"\"\"\n    server = MCPServer(\"test-server\")\n    \n    with pytest.raises(ValueError, match=\"Unknown tool\"):\n        await server.server._call_tool_handler(\n            \"nonexistent_tool\",\n            {\"arg\": \"value\"}\n        )\n\n@pytest.mark.asyncio\nasync def test_missing_required_argument():\n    \"\"\"Test error handling for missing arguments.\"\"\"\n    with pytest.raises(ValueError, match=\"required\"):\n        await call_tool_with_validation(\"query_database\", {})\n</code></pre>"},{"location":"develop/python/testing/#testing-input-validation","title":"Testing Input Validation","text":"<pre><code>@pytest.mark.parametrize(\"invalid_input,expected_error\", [\n    (\"\", \"Query cannot be empty\"),\n    (None, \"Query is required\"),\n    (\"SELECT * FROM users; DROP TABLE users;\", \"Invalid query\"),\n])\n@pytest.mark.asyncio\nasync def test_query_validation(invalid_input, expected_error):\n    \"\"\"Test query validation.\"\"\"\n    with pytest.raises(ValueError, match=expected_error):\n        await validate_query(invalid_input)\n</code></pre>"},{"location":"develop/python/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"develop/python/testing/#timing-tests","title":"Timing Tests","text":"<pre><code>import time\n\n@pytest.mark.asyncio\nasync def test_response_time():\n    \"\"\"Test response time requirements.\"\"\"\n    start_time = time.time()\n    \n    result = await execute_expensive_operation()\n    \n    elapsed = time.time() - start_time\n    assert elapsed &lt; 1.0  # Should complete within 1 second\n</code></pre>"},{"location":"develop/python/testing/#load-testing","title":"Load Testing","text":"<pre><code>@pytest.mark.asyncio\nasync def test_concurrent_requests():\n    \"\"\"Test handling multiple concurrent requests.\"\"\"\n    server = MCPServer(\"test-server\")\n    \n    # Create 10 concurrent requests\n    tasks = [\n        server.call_tool(\"simple_tool\", {\"id\": i})\n        for i in range(10)\n    ]\n    \n    results = await asyncio.gather(*tasks)\n    assert len(results) == 10\n</code></pre>"},{"location":"develop/python/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"develop/python/testing/#running-coverage","title":"Running Coverage","text":"<pre><code># Run tests with coverage\npytest --cov=src --cov-report=html --cov-report=term-missing\n\n# View HTML coverage report\nopen htmlcov/index.html\n</code></pre>"},{"location":"develop/python/testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code># pyproject.toml\n[tool.coverage.run]\nsource = [\"src\"]\nomit = [\n    \"tests/*\",\n    \"*/test_*.py\",\n    \"src/*/__main__.py\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"if __name__ == .__main__.:\",\n]\n</code></pre>"},{"location":"develop/python/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"develop/python/testing/#github-actions-testing","title":"GitHub Actions Testing","text":"<pre><code># .github/workflows/test.yml\nname: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.11\", \"3.12\"]\n    \n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    \n    - name: Install dependencies\n      run: |\n        pip install -e \".[dev]\"\n    \n    - name: Run tests\n      run: |\n        pytest --cov=src --cov-report=xml\n    \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"develop/python/testing/#best-practices","title":"Best Practices","text":""},{"location":"develop/python/testing/#test-organization","title":"Test Organization","text":"<ol> <li>Mirror Structure: Test files mirror source structure</li> <li>Clear Names: Descriptive test function names</li> <li>Single Responsibility: One test per behavior</li> <li>Setup/Teardown: Use fixtures for common setup</li> </ol>"},{"location":"develop/python/testing/#test-quality","title":"Test Quality","text":"<ol> <li>Fast Tests: Unit tests should run quickly</li> <li>Isolated Tests: Tests don't depend on each other</li> <li>Deterministic: Tests produce same results every time</li> <li>Comprehensive: Cover happy path, edge cases, and errors</li> </ol>"},{"location":"develop/python/testing/#debugging-tests","title":"Debugging Tests","text":"<pre><code># Run specific test with verbose output\npytest tests/test_specific.py::test_function -v -s\n\n# Run with debugging on first failure\npytest --pdb\n\n# Run with coverage and open report\npytest --cov=src --cov-report=html &amp;&amp; open htmlcov/index.html\n</code></pre> <p>Testing is crucial for maintaining reliable MCP servers. Focus on testing your business logic, error handling, and integration points.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol (MCP) is a standardized protocol for enabling AI models to interact with external tools, resources, and services through a well-defined interface.</p>"},{"location":"faq/#why-should-i-use-mcp","title":"Why should I use MCP?","text":"<ul> <li>Standardization: Consistent interface across all integrations</li> <li>Security: Built-in authentication and authorization</li> <li>Scalability: Designed for distributed systems</li> <li>Flexibility: Multiple transport protocols and languages</li> <li>Ecosystem: Growing library of pre-built servers</li> </ul>"},{"location":"faq/#what-languages-are-supported","title":"What languages are supported?","text":"<p>Official SDKs: - Python (recommended) - JavaScript/TypeScript - Go</p> <p>Community SDKs: - Rust - Java - Ruby - C#</p>"},{"location":"faq/#getting-started","title":"Getting Started","text":""},{"location":"faq/#how-do-i-create-my-first-mcp-server","title":"How do I create my first MCP server?","text":"<pre><code>from mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"my_server\")\n\n@mcp.tool()\ndef hello(name: str) -&gt; str:\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    mcp.run()\n</code></pre>"},{"location":"faq/#how-do-i-test-my-mcp-server","title":"How do I test my MCP server?","text":"<pre><code># Use MCP Inspector\nuv run mcp dev my_server.py\n\n# Or test with curl\ncurl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n</code></pre>"},{"location":"faq/#how-do-i-deploy-my-mcp-server","title":"How do I deploy my MCP server?","text":"<ol> <li>Package your server (Python wheel, NPM package, or container)</li> <li>Choose deployment platform (Kubernetes, Cloud Run, Lambda)</li> <li>Configure environment variables</li> <li>Set up monitoring and logging</li> <li>Deploy and verify health checks</li> </ol>"},{"location":"faq/#architecture","title":"Architecture","text":""},{"location":"faq/#whats-the-difference-between-tools-and-resources","title":"What's the difference between tools and resources?","text":"<ul> <li>Tools: Active operations that perform actions (functions)</li> <li>Resources: Passive data providers (configuration, state)</li> </ul>"},{"location":"faq/#should-i-create-one-server-with-many-tools-or-many-servers-with-few-tools","title":"Should I create one server with many tools or many servers with few tools?","text":"<p>Follow the single responsibility principle: - \u2705 One server per service/domain (GitHub server, Database server) - \u274c One monolithic server with all tools</p>"},{"location":"faq/#how-do-i-handle-authentication","title":"How do I handle authentication?","text":"<p>MCP supports multiple authentication methods: - API Keys (simplest) - Bearer tokens (JWT) - OAuth 2.0 (enterprise) - mTLS (highest security)</p>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#how-many-concurrent-requests-can-an-mcp-server-handle","title":"How many concurrent requests can an MCP server handle?","text":"<p>Depends on: - Server implementation (async vs sync) - Hardware resources - Tool complexity - Network latency</p> <p>Typical benchmarks: - Python async: 1000-5000 req/s - Go: 5000-20000 req/s - Node.js: 2000-8000 req/s</p>"},{"location":"faq/#how-can-i-improve-performance","title":"How can I improve performance?","text":"<ol> <li>Use async/await for I/O operations</li> <li>Implement connection pooling</li> <li>Add caching layers</li> <li>Use efficient serialization</li> <li>Optimize database queries</li> <li>Scale horizontally</li> </ol>"},{"location":"faq/#whats-the-recommended-timeout-for-mcp-requests","title":"What's the recommended timeout for MCP requests?","text":"<ul> <li>Default: 30 seconds</li> <li>Long operations: 5 minutes</li> <li>Real-time operations: 5 seconds</li> </ul> <p>Configure based on your use case.</p>"},{"location":"faq/#security","title":"Security","text":""},{"location":"faq/#how-do-i-secure-my-mcp-server","title":"How do I secure my MCP server?","text":"<ol> <li>Always use HTTPS in production</li> <li>Implement authentication</li> <li>Validate and sanitize all inputs</li> <li>Use environment variables for secrets</li> <li>Enable rate limiting</li> <li>Log security events</li> <li>Regular security scans</li> </ol>"},{"location":"faq/#can-i-restrict-which-tools-a-client-can-access","title":"Can I restrict which tools a client can access?","text":"<p>Yes, implement role-based access control (RBAC): <pre><code>@mcp.tool(roles=[\"admin\"])\ndef dangerous_operation():\n    # Only admins can access\n    pass\n</code></pre></p>"},{"location":"faq/#how-do-i-handle-sensitive-data","title":"How do I handle sensitive data?","text":"<ul> <li>Never log sensitive information</li> <li>Encrypt data in transit (TLS)</li> <li>Encrypt data at rest</li> <li>Use secure secret management</li> <li>Implement data retention policies</li> <li>Follow compliance requirements (GDPR, HIPAA)</li> </ul>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#my-server-wont-start","title":"My server won't start","text":"<p>Check: 1. Port availability: <code>lsof -i :8000</code> 2. Dependencies installed: <code>pip list</code> 3. Environment variables set 4. Syntax errors: <code>python -m py_compile my_server.py</code> 5. Permissions: file and network access</p>"},{"location":"faq/#tools-arent-showing-up","title":"Tools aren't showing up","text":"<p>Verify: 1. Tools are decorated with <code>@mcp.tool()</code> 2. Server is running: check health endpoint 3. No startup errors in logs 4. Correct MCP protocol version</p>"},{"location":"faq/#connection-refused-errors","title":"Connection refused errors","text":"<p>Troubleshoot: 1. Server is running: <code>ps aux | grep mcp</code> 2. Correct URL and port 3. Firewall rules allow connection 4. Network connectivity: <code>ping</code> and <code>traceroute</code> 5. DNS resolution: <code>nslookup</code></p>"},{"location":"faq/#best-practices","title":"Best Practices","text":""},{"location":"faq/#how-should-i-structure-my-mcp-server-project","title":"How should I structure my MCP server project?","text":"<pre><code>my-mcp-server/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 server/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 main.py\n\u2502       \u251c\u2500\u2500 tools.py\n\u2502       \u2514\u2500\u2500 resources.py\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 Containerfile\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"faq/#what-should-i-include-in-my-readme","title":"What should I include in my README?","text":"<ul> <li>Overview and purpose</li> <li>Installation instructions</li> <li>Configuration options</li> <li>Available tools and resources</li> <li>Usage examples</li> <li>Troubleshooting guide</li> <li>Contributing guidelines</li> </ul>"},{"location":"faq/#how-do-i-version-my-mcp-server","title":"How do I version my MCP server?","text":"<p>Use semantic versioning: - MAJOR: Breaking changes - MINOR: New features (backward compatible) - PATCH: Bug fixes</p> <p>Example: <code>1.2.3</code></p>"},{"location":"faq/#integration","title":"Integration","text":""},{"location":"faq/#how-do-i-integrate-with-claude-desktop","title":"How do I integrate with Claude Desktop?","text":"<pre><code>uv run mcp install my_server.py --name \"My Server\"\n</code></pre>"},{"location":"faq/#how-do-i-connect-to-mcp-gateway","title":"How do I connect to MCP Gateway?","text":"<pre><code>curl -X POST http://gateway:4444/servers \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"name\":\"my-server\",\"url\":\"http://localhost:8000/mcp\"}'\n</code></pre>"},{"location":"faq/#can-i-use-mcp-with-other-ai-models","title":"Can I use MCP with other AI models?","text":"<p>Yes, MCP is model-agnostic. Any system that can make HTTP requests and handle JSON can use MCP.</p>"},{"location":"faq/#advanced-topics","title":"Advanced Topics","text":""},{"location":"faq/#how-do-i-implement-streaming-responses","title":"How do I implement streaming responses?","text":"<pre><code>@mcp.tool()\nasync def stream_data():\n    async def generate():\n        for i in range(10):\n            yield f\"Data chunk {i}\\n\"\n            await asyncio.sleep(1)\n    \n    return StreamingResponse(generate())\n</code></pre>"},{"location":"faq/#can-i-chain-multiple-mcp-servers","title":"Can I chain multiple MCP servers?","text":"<p>Yes, servers can call other servers: <pre><code>@mcp.tool()\nasync def orchestrate():\n    result1 = await call_server(\"server1\", \"tool1\")\n    result2 = await call_server(\"server2\", \"tool2\", result1)\n    return result2\n</code></pre></p>"},{"location":"faq/#how-do-i-implement-custom-transports","title":"How do I implement custom transports?","text":"<p>Extend the base transport class: <pre><code>class CustomTransport(MCPTransport):\n    def send(self, message):\n        # Custom send logic\n        pass\n    \n    def receive(self):\n        # Custom receive logic\n        pass\n</code></pre></p>"},{"location":"faq/#common-errors","title":"Common Errors","text":""},{"location":"faq/#method-not-found","title":"\"Method not found\"","text":"<p>The requested method doesn't exist. Check: - Spelling of method name - Tool is registered - Correct server URL</p>"},{"location":"faq/#invalid-parameters","title":"\"Invalid parameters\"","text":"<p>Parameters don't match schema. Verify: - Parameter names - Data types - Required fields - JSON formatting</p>"},{"location":"faq/#internal-server-error","title":"\"Internal server error\"","text":"<p>Server encountered an error. Check: - Server logs for stack trace - Database connectivity - External service availability - Resource limits</p>"},{"location":"faq/#migration","title":"Migration","text":""},{"location":"faq/#migrating-from-rest-api-to-mcp","title":"Migrating from REST API to MCP","text":"<ol> <li>Map endpoints to tools</li> <li>Convert request/response to MCP format</li> <li>Add MCP server alongside REST</li> <li>Gradually migrate clients</li> <li>Deprecate REST endpoints</li> </ol>"},{"location":"faq/#migrating-between-mcp-versions","title":"Migrating between MCP versions","text":"<ol> <li>Review breaking changes</li> <li>Update SDK version</li> <li>Modify code for new APIs</li> <li>Test thoroughly</li> <li>Deploy with version compatibility</li> </ol>"},{"location":"faq/#community","title":"Community","text":""},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ul> <li>GitHub Discussions</li> <li>Discord community</li> <li>Stack Overflow (#mcp tag)</li> <li>Official documentation</li> </ul>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<ul> <li>Report bugs</li> <li>Submit pull requests</li> <li>Write documentation</li> <li>Create example servers</li> <li>Help others in community</li> </ul>"},{"location":"faq/#are-there-example-mcp-servers","title":"Are there example MCP servers?","text":"<p>Yes, check the official repositories: - Time server (simple example) - GitHub tools (complex example) - File system (resource example) - Database connector (integration example)</p>"},{"location":"faq/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udd27 Troubleshooting Guide</li> <li>\ud83d\udca1 Common Patterns</li> <li>\ud83d\ude80 Migration Guide</li> </ul>"},{"location":"manage/","title":"Management Guide","text":""},{"location":"manage/#lifecycle-management-for-mcp-servers","title":"Lifecycle Management for MCP Servers","text":"<p>Effective management ensures MCP servers remain reliable, secure, and performant throughout their lifecycle.</p>"},{"location":"manage/#management-phases","title":"Management Phases","text":""},{"location":"manage/#1-planning","title":"1. Planning","text":"<ul> <li>Requirements gathering</li> <li>Architecture design</li> <li>Resource allocation</li> <li>Risk assessment</li> </ul>"},{"location":"manage/#2-development","title":"2. Development","text":"<ul> <li>Implementation</li> <li>Testing</li> <li>Documentation</li> <li>Code review</li> </ul>"},{"location":"manage/#3-deployment","title":"3. Deployment","text":"<ul> <li>Environment setup</li> <li>Configuration management</li> <li>Release process</li> <li>Rollout strategy</li> </ul>"},{"location":"manage/#4-operation","title":"4. Operation","text":"<ul> <li>Monitoring</li> <li>Maintenance</li> <li>Support</li> <li>Optimization</li> </ul>"},{"location":"manage/#5-evolution","title":"5. Evolution","text":"<ul> <li>Updates and patches</li> <li>Feature additions</li> <li>Performance tuning</li> <li>Security hardening</li> </ul>"},{"location":"manage/#configuration-management","title":"Configuration Management","text":""},{"location":"manage/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code># config/production.yaml\nserver:\n  port: 8000\n  host: 0.0.0.0\n  workers: 4\n\ndatabase:\n  host: prod-db.example.com\n  pool_size: 20\n  \nmonitoring:\n  enabled: true\n  level: info\n  \nrate_limiting:\n  enabled: true\n  max_requests: 100\n  window: 60\n</code></pre>"},{"location":"manage/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code>class ConfigManager:\n    def __init__(self):\n        self.config = self.load_config()\n        self.watch_changes()\n    \n    def load_config(self):\n        env = os.getenv('MCP_ENV', 'development')\n        return load_yaml(f'config/{env}.yaml')\n    \n    def watch_changes(self):\n        # Watch for config file changes\n        observer = Observer()\n        observer.schedule(ConfigHandler(self), 'config/')\n        observer.start()\n</code></pre>"},{"location":"manage/#version-management","title":"Version Management","text":""},{"location":"manage/#semantic-versioning","title":"Semantic Versioning","text":"<pre><code>MAJOR.MINOR.PATCH\n\n1.0.0 - Initial release\n1.0.1 - Bug fix\n1.1.0 - New feature (backward compatible)\n2.0.0 - Breaking change\n</code></pre>"},{"location":"manage/#api-versioning","title":"API Versioning","text":"<pre><code>@mcp.tool(version=\"1.0\")\ndef old_tool(param: str) -&gt; str:\n    \"\"\"Deprecated version\"\"\"\n    return process_v1(param)\n\n@mcp.tool(version=\"2.0\")\ndef new_tool(param: str, options: dict = None) -&gt; dict:\n    \"\"\"Current version with enhanced features\"\"\"\n    return process_v2(param, options)\n</code></pre>"},{"location":"manage/#dependency-management","title":"Dependency Management","text":""},{"location":"manage/#python-dependencies","title":"Python Dependencies","text":"<pre><code># pyproject.toml\n[project]\ndependencies = [\n    \"mcp&gt;=1.0,&lt;2.0\",  # Pin major version\n    \"pydantic~=2.5\",   # Compatible releases\n    \"requests==2.31.0\", # Exact version\n]\n\n[tool.pip-tools]\ngenerate-hashes = true\nresolver = \"backtracking\"\n</code></pre>"},{"location":"manage/#dependency-updates","title":"Dependency Updates","text":"<pre><code># Check for updates\npip list --outdated\n\n# Update dependencies\npip-compile --upgrade pyproject.toml\n\n# Security audit\npip-audit\n</code></pre>"},{"location":"manage/#health-monitoring","title":"Health Monitoring","text":""},{"location":"manage/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>@app.route('/health')\ndef health_check():\n    checks = {\n        'server': 'healthy',\n        'database': check_database(),\n        'dependencies': check_dependencies(),\n        'disk_space': check_disk_space(),\n        'memory': check_memory()\n    }\n    \n    status = 'healthy' if all(\n        v == 'healthy' for v in checks.values()\n    ) else 'unhealthy'\n    \n    return {\n        'status': status,\n        'timestamp': datetime.utcnow().isoformat(),\n        'checks': checks\n    }\n</code></pre>"},{"location":"manage/#metrics-collection","title":"Metrics Collection","text":"<pre><code>from prometheus_client import Counter, Histogram, Gauge\n\n# Define metrics\nrequest_count = Counter('mcp_requests_total', 'Total requests')\nrequest_duration = Histogram('mcp_request_duration_seconds', 'Request duration')\nactive_connections = Gauge('mcp_active_connections', 'Active connections')\n\n# Collect metrics\n@measure_time(request_duration)\ndef handle_request(request):\n    request_count.inc()\n    with active_connections.track_inprogress():\n        return process_request(request)\n</code></pre>"},{"location":"manage/#logging-strategy","title":"Logging Strategy","text":""},{"location":"manage/#structured-logging","title":"Structured Logging","text":"<pre><code>import structlog\n\nlogger = structlog.get_logger()\n\ndef process_tool(tool_name: str, params: dict):\n    logger.info(\n        \"tool_execution_started\",\n        tool=tool_name,\n        params=params,\n        timestamp=datetime.utcnow().isoformat()\n    )\n    \n    try:\n        result = execute_tool(tool_name, params)\n        logger.info(\n            \"tool_execution_completed\",\n            tool=tool_name,\n            duration_ms=elapsed_time\n        )\n        return result\n    except Exception as e:\n        logger.error(\n            \"tool_execution_failed\",\n            tool=tool_name,\n            error=str(e),\n            traceback=traceback.format_exc()\n        )\n        raise\n</code></pre>"},{"location":"manage/#log-aggregation","title":"Log Aggregation","text":"<pre><code># filebeat.yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - /var/log/mcp-server/*.log\n  json.keys_under_root: true\n  json.add_error_key: true\n\noutput.elasticsearch:\n  hosts: [\"elasticsearch:9200\"]\n  index: \"mcp-logs-%{+yyyy.MM.dd}\"\n</code></pre>"},{"location":"manage/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"manage/#backup-strategy","title":"Backup Strategy","text":"<pre><code>class BackupManager:\n    def __init__(self):\n        self.backup_dir = '/backups'\n        self.retention_days = 30\n    \n    def backup_state(self):\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_path = f\"{self.backup_dir}/backup_{timestamp}.tar.gz\"\n        \n        # Backup configuration\n        self.backup_config(backup_path)\n        \n        # Backup data\n        self.backup_data(backup_path)\n        \n        # Clean old backups\n        self.clean_old_backups()\n        \n        return backup_path\n</code></pre>"},{"location":"manage/#disaster-recovery","title":"Disaster Recovery","text":"<pre><code>#!/bin/bash\n# disaster_recovery.sh\n\n# Stop current server\nsystemctl stop mcp-server\n\n# Restore from backup\ntar -xzf /backups/latest.tar.gz -C /\n\n# Restore database\npsql &lt; /backups/database.sql\n\n# Start server\nsystemctl start mcp-server\n\n# Verify health\ncurl http://localhost:8000/health\n</code></pre>"},{"location":"manage/#change-management","title":"Change Management","text":""},{"location":"manage/#change-process","title":"Change Process","text":"<ol> <li>Request - Document change request</li> <li>Review - Technical and business review</li> <li>Approval - Get necessary approvals</li> <li>Testing - Test in staging environment</li> <li>Implementation - Deploy to production</li> <li>Verification - Verify successful deployment</li> <li>Documentation - Update documentation</li> </ol>"},{"location":"manage/#rollback-plan","title":"Rollback Plan","text":"<pre><code>class DeploymentManager:\n    def deploy(self, version: str):\n        # Save current version\n        self.save_rollback_point()\n        \n        try:\n            # Deploy new version\n            self.update_code(version)\n            self.run_migrations()\n            self.restart_services()\n            \n            # Verify deployment\n            if not self.verify_health():\n                raise DeploymentError(\"Health check failed\")\n                \n        except Exception as e:\n            logger.error(f\"Deployment failed: {e}\")\n            self.rollback()\n            raise\n    \n    def rollback(self):\n        logger.info(\"Starting rollback\")\n        self.restore_previous_version()\n        self.restart_services()\n        self.verify_health()\n</code></pre>"},{"location":"manage/#capacity-planning","title":"Capacity Planning","text":""},{"location":"manage/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code>def monitor_resources():\n    return {\n        'cpu_percent': psutil.cpu_percent(interval=1),\n        'memory_percent': psutil.virtual_memory().percent,\n        'disk_usage': psutil.disk_usage('/').percent,\n        'network_connections': len(psutil.net_connections()),\n        'thread_count': threading.active_count()\n    }\n</code></pre>"},{"location":"manage/#scaling-strategy","title":"Scaling Strategy","text":"<pre><code># kubernetes/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: mcp-server-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: mcp-server\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"manage/#documentation-management","title":"Documentation Management","text":""},{"location":"manage/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>README.md - Quick start and overview</li> <li>API.md - Tool and resource documentation</li> <li>CONFIGURATION.md - Configuration options</li> <li>TROUBLESHOOTING.md - Common issues and solutions</li> <li>CHANGELOG.md - Version history</li> </ul>"},{"location":"manage/#documentation-generation","title":"Documentation Generation","text":"<pre><code>def generate_docs():\n    \"\"\"Generate documentation from code\"\"\"\n    docs = {\n        'tools': extract_tool_docs(),\n        'resources': extract_resource_docs(),\n        'configuration': extract_config_schema(),\n        'api_version': MCP_VERSION\n    }\n    \n    render_markdown(docs, 'docs/API.md')\n</code></pre>"},{"location":"manage/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udd04 Lifecycle Management</li> <li>\ud83d\udcc8 Versioning Strategy</li> <li>\ud83d\udccb Monitoring</li> <li>\ud83d\udce6 Updates and Patches</li> <li>\ud83d\udd19 Rollback Procedures</li> </ul>"},{"location":"operate/","title":"Operations Guide","text":""},{"location":"operate/#operating-mcp-servers-in-production","title":"Operating MCP Servers in Production","text":"<p>Effective operations ensure MCP servers maintain high availability, performance, and reliability in production environments.</p>"},{"location":"operate/#operational-excellence","title":"Operational Excellence","text":""},{"location":"operate/#key-principles","title":"Key Principles","text":"<ol> <li>Observability - Monitor, log, trace everything</li> <li>Automation - Automate repetitive tasks</li> <li>Reliability - Design for failure</li> <li>Performance - Optimize continuously</li> <li>Security - Defense in depth</li> </ol>"},{"location":"operate/#operational-readiness","title":"Operational Readiness","text":""},{"location":"operate/#pre-production-checklist","title":"Pre-Production Checklist","text":"<ul> <li> Monitoring dashboards configured</li> <li> Alerts and notifications set up</li> <li> Logging pipeline established</li> <li> Backup and recovery tested</li> <li> Runbooks documented</li> <li> On-call rotation scheduled</li> <li> Incident response plan ready</li> <li> Capacity planning completed</li> </ul>"},{"location":"operate/#monitoring-strategy","title":"Monitoring Strategy","text":""},{"location":"operate/#four-golden-signals","title":"Four Golden Signals","text":"<ol> <li>Latency - Response time</li> <li>Traffic - Request rate</li> <li>Errors - Failure rate</li> <li>Saturation - Resource utilization</li> </ol>"},{"location":"operate/#key-metrics","title":"Key Metrics","text":"<pre><code># Application metrics\nmcp_requests_total\nmcp_request_duration_seconds\nmcp_errors_total\nmcp_active_connections\n\n# System metrics\ncpu_utilization_percent\nmemory_usage_bytes\ndisk_io_operations\nnetwork_throughput_bytes\n\n# Business metrics\ntools_executed_total\nresources_accessed_total\nuser_sessions_active\napi_quota_remaining\n</code></pre>"},{"location":"operate/#health-checks","title":"Health Checks","text":""},{"location":"operate/#liveness-probe","title":"Liveness Probe","text":"<pre><code>@app.route('/health/live')\ndef liveness():\n    \"\"\"Basic liveness check - is the process running?\"\"\"\n    return {'status': 'alive'}, 200\n</code></pre>"},{"location":"operate/#readiness-probe","title":"Readiness Probe","text":"<pre><code>@app.route('/health/ready')\ndef readiness():\n    \"\"\"Readiness check - can we serve traffic?\"\"\"\n    checks = {\n        'database': check_database_connection(),\n        'cache': check_cache_connection(),\n        'dependencies': check_external_services()\n    }\n    \n    if all(checks.values()):\n        return {'status': 'ready', 'checks': checks}, 200\n    else:\n        return {'status': 'not_ready', 'checks': checks}, 503\n</code></pre>"},{"location":"operate/#logging-best-practices","title":"Logging Best Practices","text":""},{"location":"operate/#structured-logging","title":"Structured Logging","text":"<pre><code>import structlog\n\nlogger = structlog.get_logger()\n\ndef process_request(request_id, tool_name, params):\n    logger.info(\n        \"request_started\",\n        request_id=request_id,\n        tool=tool_name,\n        params_size=len(str(params))\n    )\n    \n    try:\n        result = execute_tool(tool_name, params)\n        logger.info(\n            \"request_completed\",\n            request_id=request_id,\n            tool=tool_name,\n            duration_ms=elapsed_time,\n            result_size=len(str(result))\n        )\n        return result\n        \n    except Exception as e:\n        logger.error(\n            \"request_failed\",\n            request_id=request_id,\n            tool=tool_name,\n            error=str(e),\n            error_type=type(e).__name__\n        )\n        raise\n</code></pre>"},{"location":"operate/#log-aggregation","title":"Log Aggregation","text":"<pre><code># Fluentd configuration\n&lt;source&gt;\n  @type tail\n  path /var/log/mcp-server/*.log\n  pos_file /var/log/td-agent/mcp-server.pos\n  tag mcp.server\n  &lt;parse&gt;\n    @type json\n  &lt;/parse&gt;\n&lt;/source&gt;\n\n&lt;match mcp.**&gt;\n  @type elasticsearch\n  host elasticsearch.example.com\n  port 9200\n  logstash_format true\n  logstash_prefix mcp\n  &lt;buffer&gt;\n    @type file\n    path /var/log/td-agent/buffer/mcp\n    flush_interval 10s\n  &lt;/buffer&gt;\n&lt;/match&gt;\n</code></pre>"},{"location":"operate/#performance-management","title":"Performance Management","text":""},{"location":"operate/#performance-baseline","title":"Performance Baseline","text":"<pre><code># Establish baseline metrics\nPERFORMANCE_BASELINE = {\n    'p50_latency_ms': 100,\n    'p95_latency_ms': 500,\n    'p99_latency_ms': 1000,\n    'error_rate_percent': 0.1,\n    'requests_per_second': 1000\n}\n\ndef check_performance():\n    current_metrics = get_current_metrics()\n    \n    for metric, baseline in PERFORMANCE_BASELINE.items():\n        current = current_metrics[metric]\n        if current &gt; baseline * 1.5:  # 50% degradation\n            alert(f\"Performance degradation: {metric} = {current}\")\n</code></pre>"},{"location":"operate/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Connection pooling\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=10,\n    pool_pre_ping=True,\n    pool_recycle=3600\n)\n\n# Caching strategy\nfrom functools import lru_cache\nimport redis\n\nredis_client = redis.Redis(decode_responses=True)\n\n@lru_cache(maxsize=1000)\ndef get_cached_result(key):\n    # Memory cache first\n    result = redis_client.get(key)\n    if result:\n        return json.loads(result)\n    \n    # Compute if not cached\n    result = compute_expensive_operation(key)\n    redis_client.setex(key, 3600, json.dumps(result))\n    return result\n</code></pre>"},{"location":"operate/#capacity-planning","title":"Capacity Planning","text":""},{"location":"operate/#resource-calculation","title":"Resource Calculation","text":"<pre><code>def calculate_capacity():\n    # Current metrics\n    avg_request_time = 100  # ms\n    peak_rps = 1000\n    cpu_per_request = 0.01  # cores\n    memory_per_connection = 10  # MB\n    \n    # Required resources\n    required_cores = peak_rps * cpu_per_request * 1.5  # 50% buffer\n    required_memory = peak_rps * memory_per_connection * 1.5\n    \n    # Instance sizing\n    instances_needed = math.ceil(required_cores / 4)  # 4 cores per instance\n    \n    return {\n        'cores_needed': required_cores,\n        'memory_needed_mb': required_memory,\n        'instances': instances_needed\n    }\n</code></pre>"},{"location":"operate/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"operate/#backup-strategy","title":"Backup Strategy","text":"<pre><code>#!/bin/bash\n# backup.sh\n\nBACKUP_DIR=\"/backups/$(date +%Y%m%d)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Database backup\npg_dump $DATABASE_URL &gt; \"$BACKUP_DIR/database.sql\"\n\n# Configuration backup\ntar -czf \"$BACKUP_DIR/config.tar.gz\" /etc/mcp-server/\n\n# Application state backup\nredis-cli --rdb \"$BACKUP_DIR/redis.rdb\"\n\n# Upload to S3\naws s3 sync \"$BACKUP_DIR\" \"s3://backups/mcp-server/$(date +%Y%m%d)/\"\n\n# Cleanup old backups (keep 30 days)\nfind /backups -type d -mtime +30 -exec rm -rf {} +\n</code></pre>"},{"location":"operate/#disaster-recovery","title":"Disaster Recovery","text":"<pre><code>class DisasterRecovery:\n    def __init__(self):\n        self.backup_location = \"s3://backups/mcp-server/\"\n        self.recovery_point_objective = timedelta(hours=1)\n        self.recovery_time_objective = timedelta(minutes=30)\n    \n    def initiate_recovery(self, target_time):\n        # Find nearest backup\n        backup = self.find_backup(target_time)\n        \n        # Restore database\n        self.restore_database(backup['database'])\n        \n        # Restore configuration\n        self.restore_config(backup['config'])\n        \n        # Restore cache if needed\n        if self.should_restore_cache():\n            self.restore_cache(backup['cache'])\n        \n        # Verify recovery\n        if self.verify_recovery():\n            logger.info(\"Recovery successful\")\n            return True\n        else:\n            logger.error(\"Recovery failed\")\n            return False\n</code></pre>"},{"location":"operate/#maintenance-windows","title":"Maintenance Windows","text":""},{"location":"operate/#zero-downtime-maintenance","title":"Zero-Downtime Maintenance","text":"<pre><code>def rolling_update(new_version):\n    instances = get_all_instances()\n    batch_size = max(1, len(instances) // 4)  # Update 25% at a time\n    \n    for batch in chunks(instances, batch_size):\n        # Remove from load balancer\n        for instance in batch:\n            remove_from_lb(instance)\n        \n        # Wait for connections to drain\n        time.sleep(30)\n        \n        # Update instances\n        for instance in batch:\n            update_instance(instance, new_version)\n        \n        # Health check\n        for instance in batch:\n            wait_for_healthy(instance)\n        \n        # Add back to load balancer\n        for instance in batch:\n            add_to_lb(instance)\n        \n        # Monitor for issues\n        time.sleep(60)\n        if detect_issues():\n            rollback()\n            return False\n    \n    return True\n</code></pre>"},{"location":"operate/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operate/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"operate/#high-latency","title":"High Latency","text":"<pre><code># Check slow queries\nSELECT query, mean_time, calls\nFROM pg_stat_statements\nORDER BY mean_time DESC\nLIMIT 10;\n\n# Check connection pool\nnetstat -an | grep :8000 | wc -l\n\n# Check CPU throttling\ntop -H -p $(pgrep mcp-server)\n</code></pre>"},{"location":"operate/#memory-leaks","title":"Memory Leaks","text":"<pre><code>import tracemalloc\nimport gc\n\n# Start tracing\ntracemalloc.start()\n\n# Take snapshot\nsnapshot = tracemalloc.take_snapshot()\ntop_stats = snapshot.statistics('lineno')\n\nfor stat in top_stats[:10]:\n    print(stat)\n\n# Force garbage collection\ngc.collect()\n</code></pre>"},{"location":"operate/#connection-errors","title":"Connection Errors","text":"<pre><code># Check network connectivity\nping -c 4 database.example.com\ntraceroute database.example.com\n\n# Check DNS resolution\nnslookup database.example.com\n\n# Check firewall rules\niptables -L -n -v\n</code></pre>"},{"location":"operate/#runbooks","title":"Runbooks","text":""},{"location":"operate/#sample-runbook-high-error-rate","title":"Sample Runbook: High Error Rate","text":"<pre><code>## Alert: High Error Rate\n\n### Symptoms\n- Error rate &gt; 1%\n- HTTP 5xx responses increasing\n\n### Initial Response (5 min)\n1. Check dashboards for error patterns\n2. Review recent deployments\n3. Check system resources\n\n### Investigation (15 min)\n1. Analyze error logs\n2. Check database connectivity\n3. Verify external dependencies\n4. Review recent changes\n\n### Mitigation\n1. If deployment issue: Rollback\n2. If resource issue: Scale up\n3. If dependency issue: Enable circuit breaker\n4. If database issue: Failover to replica\n\n### Resolution\n1. Fix root cause\n2. Deploy fix\n3. Monitor for recurrence\n4. Update documentation\n\n### Post-Incident\n1. Write incident report\n2. Update runbook if needed\n3. Schedule post-mortem\n</code></pre>"},{"location":"operate/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"operate/#audit-logging","title":"Audit Logging","text":"<pre><code>def audit_log(event_type, user, action, resource, result):\n    audit_entry = {\n        'timestamp': datetime.utcnow().isoformat(),\n        'event_type': event_type,\n        'user': user,\n        'action': action,\n        'resource': resource,\n        'result': result,\n        'ip_address': request.remote_addr,\n        'user_agent': request.user_agent.string\n    }\n    \n    # Write to audit log\n    audit_logger.info(json.dumps(audit_entry))\n    \n    # Store in audit database\n    audit_db.insert(audit_entry)\n</code></pre>"},{"location":"operate/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcca Monitoring Deep Dive</li> <li>\ud83d\udcdc Logging Strategy</li> <li>\ud83c\udfaf Performance Optimization</li> <li>\ud83c\udf21\ufe0f Scaling Operations</li> <li>\ud83c\udf86 Incident Response</li> </ul>"},{"location":"overview/","title":"MCP Overview","text":""},{"location":"overview/#introduction","title":"Introduction","text":"<p>The Model Context Protocol (MCP) is a standardized protocol for communication between AI models and external tools, resources, and services. This guide provides comprehensive best practices for developing, deploying, and maintaining MCP servers.</p>"},{"location":"overview/#what-is-mcp","title":"What is MCP?","text":"<p>MCP enables AI assistants to interact with external systems through a well-defined protocol, allowing them to:</p> <ul> <li>Access and manipulate data from various sources</li> <li>Execute tools and functions</li> <li>Provide contextual information to enhance AI responses</li> <li>Maintain secure and controlled interactions with external services</li> </ul>"},{"location":"overview/#why-mcp","title":"Why MCP?","text":""},{"location":"overview/#key-benefits","title":"Key Benefits","text":"<ul> <li>Standardization: Consistent interface across all integrations</li> <li>Security: Built-in authentication and authorization mechanisms</li> <li>Scalability: Designed for distributed architectures</li> <li>Flexibility: Support for multiple transport protocols</li> <li>Observability: Built-in monitoring and logging capabilities</li> </ul>"},{"location":"overview/#core-components","title":"Core Components","text":"<ol> <li>MCP Servers: Expose tools, resources, and prompts</li> <li>MCP Clients: Connect to servers and utilize their capabilities</li> <li>MCP Gateway: Central hub for managing multiple MCP servers</li> <li>Transport Layer: Communication protocols (STDIO, HTTP, WebSocket)</li> </ol>"},{"location":"overview/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>\ud83c\udfd7\ufe0f Architecture - System design and components</li> <li>\ud83d\udd11 Core Concepts - Fundamental MCP concepts</li> <li>\ud83d\udccb Standards - MCP protocol standards</li> <li>\ud83d\udea6 Getting Started - Quick start guide</li> </ul>"},{"location":"overview/architecture/","title":"MCP Architecture","text":""},{"location":"overview/architecture/#system-architecture","title":"System Architecture","text":"<p>The Model Context Protocol follows a client-server architecture with optional gateway intermediaries for enterprise deployments.</p>"},{"location":"overview/architecture/#components-overview","title":"Components Overview","text":""},{"location":"overview/architecture/#mcp-server","title":"MCP Server","text":"<p>The foundation of the MCP ecosystem, servers expose: - Tools: Executable functions with defined inputs/outputs - Resources: Data and content providers - Prompts: Pre-configured interaction templates</p>"},{"location":"overview/architecture/#mcp-client","title":"MCP Client","text":"<p>Clients connect to servers and can: - Discover available capabilities - Execute tools with parameters - Fetch resources for context - Utilize prompts for interactions</p>"},{"location":"overview/architecture/#mcp-gateway","title":"MCP Gateway","text":"<p>Enterprise-grade component that: - Manages multiple MCP servers - Provides centralized authentication - Enables load balancing and failover - Offers unified API access</p>"},{"location":"overview/architecture/#communication-patterns","title":"Communication Patterns","text":""},{"location":"overview/architecture/#direct-connection","title":"Direct Connection","text":"<pre><code>Client &lt;---&gt; MCP Server\n</code></pre>"},{"location":"overview/architecture/#gateway-pattern","title":"Gateway Pattern","text":"<pre><code>Client &lt;---&gt; Gateway &lt;---&gt; MCP Server 1\n                      &lt;---&gt; MCP Server 2\n                      &lt;---&gt; MCP Server N\n</code></pre>"},{"location":"overview/architecture/#transport-protocols","title":"Transport Protocols","text":"<p>MCP defines two standard transport mechanisms:</p> Protocol Use Case Description stdio Local processes Client launches server as subprocess, communicates via stdin/stdout Streamable HTTP Remote servers HTTP POST for client-to-server, optional Server-Sent Events for streaming"},{"location":"overview/architecture/#stdio-transport","title":"stdio Transport","text":"<ul> <li>Client launches MCP server as subprocess</li> <li>Server reads JSON-RPC messages from stdin</li> <li>Server writes JSON-RPC messages to stdout</li> <li>Messages delimited by newlines, no embedded newlines</li> <li>Server may log to stderr (captured by client)</li> </ul>"},{"location":"overview/architecture/#streamable-http-transport","title":"Streamable HTTP Transport","text":"<ul> <li>Client sends JSON-RPC via HTTP POST to MCP endpoint</li> <li>Server responds with either JSON or Server-Sent Events</li> <li>Supports standard HTTP authentication (Bearer tokens, API keys)</li> <li>Enables remote server deployment and scaling</li> </ul>"},{"location":"overview/architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Discovery: Client queries available capabilities</li> <li>Invocation: Client calls tools with parameters</li> <li>Processing: Server executes requested operations</li> <li>Response: Server returns results to client</li> </ol>"},{"location":"overview/architecture/#security-layers","title":"Security Layers","text":"<ul> <li>Authentication: Bearer tokens, API keys</li> <li>Authorization: Role-based access control</li> <li>Encryption: TLS for network transport</li> <li>Validation: Input/output sanitization</li> </ul>"},{"location":"overview/core-concepts/","title":"Core Concepts","text":""},{"location":"overview/core-concepts/#fundamental-mcp-concepts","title":"Fundamental MCP Concepts","text":"<p>Understanding these core concepts is essential for working with the Model Context Protocol.</p>"},{"location":"overview/core-concepts/#tools","title":"Tools","text":"<p>Tools are the primary mechanism for exposing functionality through MCP.</p>"},{"location":"overview/core-concepts/#tool-definition","title":"Tool Definition","text":"<ul> <li>Name: Unique identifier for the tool</li> <li>Description: Human-readable explanation</li> <li>Parameters: Typed input schema (JSON Schema)</li> <li>Return Type: Expected output format</li> </ul>"},{"location":"overview/core-concepts/#protocol-methods","title":"Protocol Methods","text":"<ul> <li>Discovery: <code>tools/list</code> - Lists available tools</li> <li>Execution: <code>tools/call</code> - Executes a specific tool</li> </ul>"},{"location":"overview/core-concepts/#example-tool-definition","title":"Example Tool Definition","text":"<pre><code>{\n  \"name\": \"calculate_sum\",\n  \"description\": \"Add two numbers together\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"a\": {\"type\": \"number\"},\n      \"b\": {\"type\": \"number\"}\n    },\n    \"required\": [\"a\", \"b\"]\n  }\n}\n</code></pre>"},{"location":"overview/core-concepts/#resources","title":"Resources","text":"<p>Resources provide contextual data to AI models without requiring explicit tool calls.</p>"},{"location":"overview/core-concepts/#resource-types","title":"Resource Types","text":"<ul> <li>Static: Fixed content (configuration, documentation)</li> <li>Dynamic: Real-time data (status, metrics)</li> <li>Streaming: Continuous updates (logs, events)</li> </ul>"},{"location":"overview/core-concepts/#resource-uris","title":"Resource URIs","text":"<p>Resources use URI schemes for identification: - <code>file://path/to/resource</code> - <code>config://settings/app</code> - <code>status://health/check</code></p>"},{"location":"overview/core-concepts/#protocol-methods_1","title":"Protocol Methods","text":"<ul> <li>Discovery: <code>resources/list</code> - Lists available resources</li> <li>Access: <code>resources/read</code> - Retrieves resource content</li> <li>Templates: <code>resources/templates/list</code> - Lists resource templates</li> <li>Monitoring: <code>resources/subscribe</code> - Monitors resource changes</li> </ul>"},{"location":"overview/core-concepts/#prompts","title":"Prompts","text":"<p>Pre-configured interaction templates that guide AI behavior.</p>"},{"location":"overview/core-concepts/#prompt-components","title":"Prompt Components","text":"<ul> <li>Name: Identifier for the prompt</li> <li>Description: Purpose and usage</li> <li>Arguments: Dynamic values to inject</li> <li>Template: The actual prompt text</li> </ul>"},{"location":"overview/core-concepts/#protocol-methods_2","title":"Protocol Methods","text":"<ul> <li>Discovery: <code>prompts/list</code> - Lists available prompts</li> <li>Retrieval: <code>prompts/get</code> - Retrieves a specific prompt</li> </ul>"},{"location":"overview/core-concepts/#contexts","title":"Contexts","text":"<p>Execution contexts provide: - Logging: Structured logging capabilities - Progress: Status updates for long operations - Cancellation: Graceful operation termination - Metadata: Request-specific information</p>"},{"location":"overview/core-concepts/#messages","title":"Messages","text":"<p>MCP uses JSON-RPC 2.0 for message formatting.</p>"},{"location":"overview/core-concepts/#message-types","title":"Message Types","text":"<ol> <li>Request: Client-initiated operations</li> <li>Response: Server results</li> <li>Notification: Async events</li> <li>Error: Structured error responses</li> </ol>"},{"location":"overview/core-concepts/#capabilities","title":"Capabilities","text":"<p>Servers declare their capabilities during initialization: - Supported tools - Available resources - Protocol version - Transport options</p>"},{"location":"overview/core-concepts/#sessions","title":"Sessions","text":"<p>Stateful connections between clients and servers: - Session establishment - Capability negotiation - State management - Graceful termination</p>"},{"location":"overview/getting-started/","title":"Getting Started","text":""},{"location":"overview/getting-started/#quick-start-guide","title":"Quick Start Guide","text":"<p>Get up and running with MCP in minutes.</p>"},{"location":"overview/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ or Node.js 18+</li> <li>Git for version control</li> <li>Text editor or IDE</li> <li>Terminal/Command line access</li> </ul>"},{"location":"overview/getting-started/#installation","title":"Installation","text":""},{"location":"overview/getting-started/#python","title":"Python","text":"<pre><code># Using uv (recommended)\nuv add mcp\n\n# Using pip\npip install mcp\n</code></pre>"},{"location":"overview/getting-started/#nodejs","title":"Node.js","text":"<pre><code>npm install @modelcontextprotocol/sdk\n</code></pre>"},{"location":"overview/getting-started/#your-first-mcp-server","title":"Your First MCP Server","text":""},{"location":"overview/getting-started/#step-1-create-server-file","title":"Step 1: Create Server File","text":"<pre><code># hello_mcp.py\nimport asyncio\nfrom mcp.server import Server\nfrom mcp.server.stdio import stdio_server\nfrom mcp.types import Tool, TextContent\n\n# Create server instance\nserver = Server(\"hello-server\")\n\n@server.list_tools()\nasync def list_tools():\n    return [\n        Tool(\n            name=\"say_hello\",\n            description=\"Greet someone by name\",\n            inputSchema={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"name\"]\n            }\n        )\n    ]\n\n@server.call_tool()\nasync def call_tool(name: str, arguments: dict):\n    if name == \"say_hello\":\n        name_arg = arguments.get(\"name\", \"World\")\n        return [TextContent(type=\"text\", text=f\"Hello, {name_arg}!\")]\n    \n    raise ValueError(f\"Unknown tool: {name}\")\n\nasync def main():\n    async with stdio_server() as (read_stream, write_stream):\n        await server.run(read_stream, write_stream)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"overview/getting-started/#step-2-run-the-server","title":"Step 2: Run the Server","text":"<pre><code># STDIO mode (for development and testing)\npython hello_mcp.py\n</code></pre>"},{"location":"overview/getting-started/#step-3-test-your-server","title":"Step 3: Test Your Server","text":"<p>You can test your MCP server using:</p> <ol> <li> <p>MCP Inspector (development tool): <pre><code>npx @modelcontextprotocol/inspector python hello_mcp.py\n</code></pre></p> </li> <li> <p>Claude Desktop: Add to your configuration file</p> </li> <li> <p>Manual JSON-RPC testing: The server communicates via stdio using JSON-RPC messages</p> </li> </ol>"},{"location":"overview/getting-started/#next-steps","title":"Next Steps","text":""},{"location":"overview/getting-started/#essential-reading","title":"Essential Reading","text":"<ul> <li>\ud83d\udccb Standards - Protocol specifications</li> <li>\ud83c\udfd7\ufe0f Architecture - System design</li> <li>\ud83d\udcbb Development Guide - Language-specific guides</li> </ul>"},{"location":"overview/getting-started/#hands-on-tutorials","title":"Hands-On Tutorials","text":"<ol> <li>Building a GitHub Integration</li> <li>Creating a Database Connector</li> <li>Implementing Authentication</li> </ol>"},{"location":"overview/getting-started/#sample-projects","title":"Sample Projects","text":"<ul> <li>Time Server</li> <li>File System Server</li> <li>GitHub Tools</li> </ul>"},{"location":"overview/getting-started/#common-patterns","title":"Common Patterns","text":""},{"location":"overview/getting-started/#tool-registration","title":"Tool Registration","text":"<pre><code>@mcp.tool()\ndef my_tool(param: str) -&gt; str:\n    \"\"\"Tool description\"\"\"\n    return result\n</code></pre>"},{"location":"overview/getting-started/#resource-exposure","title":"Resource Exposure","text":"<pre><code>@mcp.resource(\"config://settings\")\ndef get_settings() -&gt; str:\n    return json.dumps(config)\n</code></pre>"},{"location":"overview/getting-started/#error-handling","title":"Error Handling","text":"<pre><code>@mcp.tool()\ndef safe_operation(data: str) -&gt; str:\n    try:\n        return process(data)\n    except Exception as e:\n        raise McpError(f\"Operation failed: {e}\")\n</code></pre>"},{"location":"overview/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"overview/getting-started/#common-issues","title":"Common Issues","text":"<p>Port Already in Use <pre><code># Find process using port\nlsof -i :8000\n# Kill process or use different port\n</code></pre></p> <p>Module Not Found <pre><code># Ensure MCP is installed\npip list | grep mcp\n# Reinstall if needed\npip install --upgrade \"mcp[cli]\"\n</code></pre></p> <p>Connection Refused - Check server is running - Verify correct port - Check firewall settings</p>"},{"location":"overview/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcda Documentation</li> <li>\ud83d\udcac Community Forum</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\u2753 FAQ</li> </ul>"},{"location":"overview/standards/","title":"MCP Standards","text":""},{"location":"overview/standards/#protocol-standards","title":"Protocol Standards","text":"<p>The Model Context Protocol follows established standards and conventions to ensure interoperability and consistency.</p>"},{"location":"overview/standards/#protocol-version","title":"Protocol Version","text":"<p>Current version: 2025-06-18</p>"},{"location":"overview/standards/#version-format","title":"Version Format","text":"<p>MCP uses date-based versioning format: <code>YYYY-MM-DD</code> - Each revision represents the protocol state at that date - Breaking changes are indicated in the changelog - Implementations must support capability negotiation</p>"},{"location":"overview/standards/#message-format","title":"Message Format","text":"<p>MCP uses JSON-RPC 2.0 specification.</p>"},{"location":"overview/standards/#request-structure","title":"Request Structure","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"tool_name\",\n    \"arguments\": {}\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"overview/standards/#response-structure","title":"Response Structure","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"content\": []\n  },\n  \"id\": 1\n}\n</code></pre>"},{"location":"overview/standards/#naming-conventions","title":"Naming Conventions","text":""},{"location":"overview/standards/#tools","title":"Tools","text":"<ul> <li>Format: <code>snake_case</code></li> <li>Examples: <code>get_user</code>, <code>create_ticket</code>, <code>fetch_data</code></li> </ul>"},{"location":"overview/standards/#resources","title":"Resources","text":"<ul> <li>Format: URI scheme</li> <li>Examples: <code>file://docs/readme</code>, <code>config://app/settings</code></li> </ul>"},{"location":"overview/standards/#environment-variables","title":"Environment Variables","text":"<ul> <li>Format: <code>SCREAMING_SNAKE_CASE</code> with role prefix</li> <li>Examples: <code>MCP_GITHUB_TOKEN</code>, <code>MCP_SERVER_PORT</code></li> </ul>"},{"location":"overview/standards/#error-codes","title":"Error Codes","text":"<p>Standard JSON-RPC error codes plus MCP-specific ranges:</p> Code Range Description -32700 to -32600 JSON-RPC protocol errors -32000 to -32099 MCP server errors -31000 to -31999 Tool execution errors -30000 to -30999 Resource access errors"},{"location":"overview/standards/#data-types","title":"Data Types","text":""},{"location":"overview/standards/#primitive-types","title":"Primitive Types","text":"<ul> <li><code>string</code>: UTF-8 text</li> <li><code>number</code>: JSON number (float/int)</li> <li><code>boolean</code>: true/false</li> <li><code>null</code>: Null value</li> </ul>"},{"location":"overview/standards/#complex-types","title":"Complex Types","text":"<ul> <li><code>object</code>: JSON object with schema</li> <li><code>array</code>: Ordered list of values</li> </ul>"},{"location":"overview/standards/#content-types","title":"Content Types","text":"<p>MCP supports multiple content types in responses:</p> Type Description Example <code>text</code> Plain text content Error messages, simple responses <code>image</code> Base64 encoded images Screenshots, diagrams <code>resource</code> Resource references File paths, URIs"},{"location":"overview/standards/#transport-standards","title":"Transport Standards","text":""},{"location":"overview/standards/#http","title":"HTTP","text":"<ul> <li>Endpoint: <code>/mcp</code></li> <li>Methods: POST only</li> <li>Content-Type: <code>application/json</code></li> <li>Authentication: Bearer token in Authorization header</li> </ul>"},{"location":"overview/standards/#websocket","title":"WebSocket","text":"<ul> <li>Subprotocol: <code>mcp.v1</code></li> <li>Ping/Pong: Every 30 seconds</li> <li>Message framing: Text frames with JSON</li> </ul>"},{"location":"overview/standards/#compliance-requirements","title":"Compliance Requirements","text":"<p>All MCP implementations must: 1. Support JSON-RPC 2.0 2. Implement capability discovery 3. Provide error handling 4. Support graceful shutdown 5. Include health checks</p>"},{"location":"package/","title":"Packaging Guide","text":""},{"location":"package/#packaging-and-distribution-for-mcp-servers","title":"Packaging and Distribution for MCP Servers","text":"<p>Proper packaging ensures MCP servers can be easily installed, deployed, and maintained across different environments.</p>"},{"location":"package/#packaging-strategies","title":"Packaging Strategies","text":""},{"location":"package/#language-specific-packages","title":"Language-Specific Packages","text":"<ul> <li>Python: PyPI packages with pip/uv</li> <li>JavaScript: NPM packages</li> <li>Go: Go modules</li> <li>Rust: Cargo crates</li> </ul>"},{"location":"package/#container-images","title":"Container Images","text":"<ul> <li>Docker/Podman containers</li> <li>OCI-compliant images</li> <li>Multi-stage builds</li> <li>Minimal base images</li> </ul>"},{"location":"package/#binary-distributions","title":"Binary Distributions","text":"<ul> <li>Platform-specific executables</li> <li>Static binaries</li> <li>Cross-compilation</li> </ul>"},{"location":"package/#package-structure","title":"Package Structure","text":""},{"location":"package/#standard-layout","title":"Standard Layout","text":"<pre><code>my-mcp-server/\n\u251c\u2500\u2500 src/                 # Source code\n\u251c\u2500\u2500 tests/              # Test files\n\u251c\u2500\u2500 docs/               # Documentation\n\u251c\u2500\u2500 configs/            # Configuration files\n\u251c\u2500\u2500 scripts/            # Build/deploy scripts\n\u251c\u2500\u2500 Containerfile       # Container definition\n\u251c\u2500\u2500 Makefile           # Build automation\n\u251c\u2500\u2500 pyproject.toml     # Python package config\n\u251c\u2500\u2500 package.json       # Node.js package config\n\u251c\u2500\u2500 go.mod             # Go module config\n\u251c\u2500\u2500 LICENSE            # License file\n\u251c\u2500\u2500 README.md          # Documentation\n\u2514\u2500\u2500 CHANGELOG.md       # Version history\n</code></pre>"},{"location":"package/#python-packaging","title":"Python Packaging","text":""},{"location":"package/#pyprojecttoml-configuration","title":"pyproject.toml Configuration","text":"<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"mcp-server-example\"\nversion = \"1.0.0\"\ndescription = \"Example MCP Server\"\nreadme = \"README.md\"\nlicense = \"MIT\"\nauthors = [\n    {name = \"Your Name\", email = \"you@example.com\"}\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3.11\",\n]\ndependencies = [\n    \"mcp[cli]&gt;=1.0.0\",\n    \"pydantic&gt;=2.0\",\n    \"aiohttp&gt;=3.9\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0\",\n    \"ruff&gt;=0.1\",\n    \"mypy&gt;=1.0\",\n]\n\n[project.scripts]\nmcp-example = \"mcp_server_example.main:cli\"\n\n[project.entry-points.\"mcp.server\"]\nexample = \"mcp_server_example:server\"\n</code></pre>"},{"location":"package/#building-python-package","title":"Building Python Package","text":"<pre><code># Install build tools\npip install build twine\n\n# Build package\npython -m build\n\n# Check package\ntwine check dist/*\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"package/#javascriptnpm-packaging","title":"JavaScript/NPM Packaging","text":""},{"location":"package/#packagejson-configuration","title":"package.json Configuration","text":"<pre><code>{\n  \"name\": \"@yourorg/mcp-server-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Example MCP Server\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"prepublishOnly\": \"npm run build &amp;&amp; npm test\",\n    \"test\": \"jest\"\n  },\n  \"files\": [\n    \"dist\",\n    \"README.md\",\n    \"LICENSE\"\n  ],\n  \"keywords\": [\"mcp\", \"server\", \"ai\"],\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.0.0\",\n    \"jest\": \"^29.0.0\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=18.0.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"registry\": \"https://registry.npmjs.org/\"\n  }\n}\n</code></pre>"},{"location":"package/#publishing-to-npm","title":"Publishing to NPM","text":"<pre><code># Login to NPM\nnpm login\n\n# Build and test\nnpm run build\nnpm test\n\n# Publish\nnpm publish --access public\n</code></pre>"},{"location":"package/#container-packaging","title":"Container Packaging","text":""},{"location":"package/#multi-stage-dockerfile","title":"Multi-Stage Dockerfile","text":"<pre><code># Build stage\nFROM python:3.11-slim as builder\n\nWORKDIR /build\n\n# Install build dependencies\nRUN pip install --no-cache-dir build\n\n# Copy source\nCOPY pyproject.toml README.md ./\nCOPY src ./src\n\n# Build wheel\nRUN python -m build --wheel\n\n# Runtime stage\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install runtime dependencies\nCOPY --from=builder /build/dist/*.whl /tmp/\nRUN pip install --no-cache-dir /tmp/*.whl &amp;&amp; rm /tmp/*.whl\n\n# Create non-root user\nRUN useradd -m -u 1000 mcp &amp;&amp; chown -R mcp:mcp /app\nUSER mcp\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD python -c \"import requests; requests.get('http://localhost:8000/health')\"\n\nEXPOSE 8000\n\nCMD [\"python\", \"-m\", \"mcp_server_example\"]\n</code></pre>"},{"location":"package/#building-container-images","title":"Building Container Images","text":"<pre><code># Build with Docker\ndocker build -t mcp-server-example:latest .\n\n# Build with Podman\npodman build -t mcp-server-example:latest .\n\n# Multi-platform build\ndocker buildx build --platform linux/amd64,linux/arm64 \\\n  -t mcp-server-example:latest .\n</code></pre>"},{"location":"package/#binary-distribution","title":"Binary Distribution","text":""},{"location":"package/#go-binary-building","title":"Go Binary Building","text":"<pre><code># Build for current platform\ngo build -o mcp-server cmd/server/main.go\n\n# Cross-compilation\nGOOS=linux GOARCH=amd64 go build -o mcp-server-linux-amd64\nGOOS=darwin GOARCH=arm64 go build -o mcp-server-darwin-arm64\nGOOS=windows GOARCH=amd64 go build -o mcp-server-windows.exe\n\n# Static binary\nCGO_ENABLED=0 go build -ldflags=\"-s -w\" -o mcp-server\n</code></pre>"},{"location":"package/#rust-binary-building","title":"Rust Binary Building","text":"<pre><code># Build release binary\ncargo build --release\n\n# Cross-compilation with cross\ncross build --target x86_64-unknown-linux-musl --release\n\n# Optimize for size\ncargo build --release --features minimal\nstrip target/release/mcp-server\n</code></pre>"},{"location":"package/#package-metadata","title":"Package Metadata","text":""},{"location":"package/#version-information","title":"Version Information","text":"<pre><code># src/mcp_server_example/__version__.py\n__version__ = \"1.0.0\"\n__author__ = \"Your Name\"\n__email__ = \"you@example.com\"\n__description__ = \"Example MCP Server\"\n\ndef get_version_info():\n    return {\n        \"version\": __version__,\n        \"author\": __author__,\n        \"description\": __description__,\n        \"build_date\": BUILD_DATE,\n        \"git_commit\": GIT_COMMIT\n    }\n</code></pre>"},{"location":"package/#license-selection","title":"License Selection","text":"<pre><code>Common Open Source Licenses:\n- MIT: Simple, permissive\n- Apache 2.0: Patent protection\n- GPL v3: Copyleft\n- BSD 3-Clause: Similar to MIT\n- MPL 2.0: File-level copyleft\n</code></pre>"},{"location":"package/#distribution-channels","title":"Distribution Channels","text":""},{"location":"package/#package-registries","title":"Package Registries","text":"<ul> <li>PyPI: Python packages</li> <li>NPM: JavaScript packages</li> <li>Docker Hub: Container images</li> <li>GitHub Packages: Multi-format registry</li> <li>Artifactory: Enterprise registry</li> </ul>"},{"location":"package/#github-releases","title":"GitHub Releases","text":"<pre><code># .github/workflows/release.yml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Build packages\n      run: |\n        make build\n        make package\n    \n    - name: Create Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          dist/*\n          binaries/*\n        generate_release_notes: true\n</code></pre>"},{"location":"package/#package-security","title":"Package Security","text":""},{"location":"package/#signing-packages","title":"Signing Packages","text":"<pre><code># GPG signing for Python packages\ngpg --detach-sign -a dist/package-1.0.0.tar.gz\n\n# NPM package signing\nnpm pack --sign\n\n# Container image signing with cosign\ncosign sign docker.io/myorg/mcp-server:latest\n</code></pre>"},{"location":"package/#sbom-generation","title":"SBOM Generation","text":"<pre><code># Generate SBOM with syft\nsyft packages dir:. -o spdx-json &gt; sbom.json\n\n# Include in container\nCOPY sbom.json /usr/share/doc/sbom.json\n</code></pre>"},{"location":"package/#installation-methods","title":"Installation Methods","text":""},{"location":"package/#quick-install-scripts","title":"Quick Install Scripts","text":"<pre><code>#!/bin/bash\n# install.sh\n\nset -e\n\n# Detect OS and architecture\nOS=$(uname -s | tr '[:upper:]' '[:lower:]')\nARCH=$(uname -m)\n\n# Download appropriate binary\nURL=\"https://github.com/org/mcp-server/releases/latest/download/mcp-server-${OS}-${ARCH}\"\ncurl -L \"$URL\" -o mcp-server\n\n# Make executable and install\nchmod +x mcp-server\nsudo mv mcp-server /usr/local/bin/\n\necho \"MCP Server installed successfully!\"\n</code></pre>"},{"location":"package/#package-managers","title":"Package Managers","text":"<pre><code># Homebrew (macOS/Linux)\nbrew tap yourorg/mcp\nbrew install mcp-server\n\n# APT (Debian/Ubuntu)\nsudo add-apt-repository ppa:yourorg/mcp\nsudo apt update\nsudo apt install mcp-server\n\n# YUM/DNF (RHEL/Fedora)\nsudo dnf config-manager --add-repo https://repo.example.com/mcp.repo\nsudo dnf install mcp-server\n</code></pre>"},{"location":"package/#versioning-strategy","title":"Versioning Strategy","text":""},{"location":"package/#semantic-versioning","title":"Semantic Versioning","text":"<pre><code>1.0.0 - Initial stable release\n1.0.1 - Bug fixes only\n1.1.0 - New features (backward compatible)\n2.0.0 - Breaking changes\n\nPre-release versions:\n1.0.0-alpha.1\n1.0.0-beta.1\n1.0.0-rc.1\n</code></pre>"},{"location":"package/#compatibility-matrix","title":"Compatibility Matrix","text":"<pre><code>| MCP Server | MCP SDK | Python | Node.js |\n|------------|---------|--------|---------|\n| 1.0.x      | &gt;=1.0   | &gt;=3.10 | &gt;=16    |\n| 1.1.x      | &gt;=1.1   | &gt;=3.11 | &gt;=18    |\n| 2.0.x      | &gt;=2.0   | &gt;=3.11 | &gt;=20    |\n</code></pre>"},{"location":"package/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udc0d Python Packaging Details</li> <li>\ud83d\udce6 NPM Packaging</li> <li>\ud83d\udc33 Container Packaging</li> <li>\ud83d\udcda Distribution Strategies</li> </ul>"},{"location":"secure/","title":"Security Guide","text":""},{"location":"secure/#security-best-practices-for-mcp-servers","title":"Security Best Practices for MCP Servers","text":"<p>Security is paramount when building MCP servers that interact with external systems and handle sensitive data.</p>"},{"location":"secure/#security-principles","title":"Security Principles","text":""},{"location":"secure/#defense-in-depth","title":"Defense in Depth","text":"<p>Implement multiple layers of security controls: 1. Network Security - Firewalls, TLS, VPNs 2. Application Security - Input validation, output encoding 3. Data Security - Encryption at rest and in transit 4. Access Control - Authentication and authorization 5. Monitoring - Logging, alerting, incident response</p>"},{"location":"secure/#zero-trust-architecture","title":"Zero Trust Architecture","text":"<ul> <li>Never trust, always verify</li> <li>Least privilege access</li> <li>Assume breach mindset</li> <li>Continuous verification</li> </ul>"},{"location":"secure/#common-security-threats","title":"Common Security Threats","text":""},{"location":"secure/#owasp-top-10-for-apis","title":"OWASP Top 10 for APIs","text":"<ol> <li>Broken Object Level Authorization</li> <li>Broken Authentication</li> <li>Excessive Data Exposure</li> <li>Lack of Resources &amp; Rate Limiting</li> <li>Broken Function Level Authorization</li> <li>Mass Assignment</li> <li>Security Misconfiguration</li> <li>Injection</li> <li>Improper Assets Management</li> <li>Insufficient Logging &amp; Monitoring</li> </ol>"},{"location":"secure/#security-checklist","title":"Security Checklist","text":""},{"location":"secure/#development-phase","title":"Development Phase","text":"<ul> <li> Input validation implemented</li> <li> Output encoding applied</li> <li> Authentication required</li> <li> Authorization checks in place</li> <li> Secrets stored securely</li> <li> Dependencies scanned</li> <li> Code reviewed for security</li> </ul>"},{"location":"secure/#deployment-phase","title":"Deployment Phase","text":"<ul> <li> TLS/SSL configured</li> <li> Firewall rules defined</li> <li> Rate limiting enabled</li> <li> Monitoring configured</li> <li> Backup strategy implemented</li> <li> Incident response plan ready</li> </ul>"},{"location":"secure/#secure-coding-practices","title":"Secure Coding Practices","text":""},{"location":"secure/#input-validation","title":"Input Validation","text":"<pre><code>from pydantic import BaseModel, validator\nimport re\n\nclass SecureInput(BaseModel):\n    email: str\n    url: str\n    \n    @validator('email')\n    def validate_email(cls, v):\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n        if not re.match(pattern, v):\n            raise ValueError('Invalid email format')\n        return v\n    \n    @validator('url')\n    def validate_url(cls, v):\n        if not v.startswith(('http://', 'https://')):\n            raise ValueError('URL must start with http:// or https://')\n        return v\n</code></pre>"},{"location":"secure/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<pre><code># BAD - Vulnerable to SQL injection\nquery = f\"SELECT * FROM users WHERE id = {user_id}\"\n\n# GOOD - Parameterized query\nquery = \"SELECT * FROM users WHERE id = %s\"\ncursor.execute(query, (user_id,))\n</code></pre>"},{"location":"secure/#xss-prevention","title":"XSS Prevention","text":"<pre><code>// BAD - Direct HTML insertion\nelement.innerHTML = userInput;\n\n// GOOD - Text content only\nelement.textContent = userInput;\n\n// GOOD - Sanitized HTML\nelement.innerHTML = DOMPurify.sanitize(userInput);\n</code></pre>"},{"location":"secure/#authentication-methods","title":"Authentication Methods","text":""},{"location":"secure/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>def verify_api_key(api_key: str) -&gt; bool:\n    hashed_key = hashlib.sha256(api_key.encode()).hexdigest()\n    return hashed_key in VALID_API_KEYS\n</code></pre>"},{"location":"secure/#jwt-authentication","title":"JWT Authentication","text":"<pre><code>import jwt\n\ndef create_token(user_id: str) -&gt; str:\n    payload = {\n        'user_id': user_id,\n        'exp': datetime.utcnow() + timedelta(hours=1)\n    }\n    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n\ndef verify_token(token: str) -&gt; dict:\n    try:\n        return jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n    except jwt.InvalidTokenError:\n        raise AuthenticationError('Invalid token')\n</code></pre>"},{"location":"secure/#rate-limiting","title":"Rate Limiting","text":""},{"location":"secure/#implementation-example","title":"Implementation Example","text":"<pre><code>from functools import wraps\nfrom collections import defaultdict\nimport time\n\nrate_limits = defaultdict(list)\n\ndef rate_limit(max_calls: int, period: int):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, *args, **kwargs):\n            client_id = get_client_id(request)\n            now = time.time()\n            \n            # Clean old entries\n            rate_limits[client_id] = [\n                t for t in rate_limits[client_id] \n                if now - t &lt; period\n            ]\n            \n            if len(rate_limits[client_id]) &gt;= max_calls:\n                raise RateLimitError('Rate limit exceeded')\n            \n            rate_limits[client_id].append(now)\n            return func(request, *args, **kwargs)\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"secure/#secrets-management","title":"Secrets Management","text":""},{"location":"secure/#environment-variables","title":"Environment Variables","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Never commit .env files\nAPI_KEY = os.getenv('MCP_API_KEY')\nif not API_KEY:\n    raise ValueError('MCP_API_KEY not configured')\n</code></pre>"},{"location":"secure/#secret-stores","title":"Secret Stores","text":"<pre><code># AWS Secrets Manager example\nimport boto3\n\ndef get_secret(secret_name: str) -&gt; str:\n    client = boto3.client('secretsmanager')\n    response = client.get_secret_value(SecretId=secret_name)\n    return response['SecretString']\n</code></pre>"},{"location":"secure/#security-headers","title":"Security Headers","text":""},{"location":"secure/#http-security-headers","title":"HTTP Security Headers","text":"<pre><code>def add_security_headers(response):\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n    response.headers['X-Frame-Options'] = 'DENY'\n    response.headers['X-XSS-Protection'] = '1; mode=block'\n    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n    response.headers['Content-Security-Policy'] = \"default-src 'self'\"\n    return response\n</code></pre>"},{"location":"secure/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"secure/#security-event-logging","title":"Security Event Logging","text":"<pre><code>import logging\n\nsecurity_logger = logging.getLogger('security')\n\ndef log_security_event(event_type: str, details: dict):\n    security_logger.warning(f\"SECURITY_EVENT: {event_type}\", extra={\n        'event_type': event_type,\n        'timestamp': datetime.utcnow().isoformat(),\n        'details': details\n    })\n\n# Usage\nlog_security_event('AUTHENTICATION_FAILED', {\n    'user': username,\n    'ip': request.remote_addr,\n    'reason': 'Invalid password'\n})\n</code></pre>"},{"location":"secure/#vulnerability-scanning","title":"Vulnerability Scanning","text":""},{"location":"secure/#dependency-scanning","title":"Dependency Scanning","text":"<pre><code># Python\npip-audit\nsafety check\n\n# JavaScript\nnpm audit\nyarn audit\n\n# Go\ngo list -m all | nancy sleuth\n</code></pre>"},{"location":"secure/#container-scanning","title":"Container Scanning","text":"<pre><code># Trivy\ntrivy image my-mcp-server:latest\n\n# Grype\ngrype my-mcp-server:latest\n</code></pre>"},{"location":"secure/#incident-response","title":"Incident Response","text":""},{"location":"secure/#response-plan","title":"Response Plan","text":"<ol> <li>Detect - Identify security incident</li> <li>Contain - Limit damage scope</li> <li>Investigate - Determine root cause</li> <li>Remediate - Fix vulnerability</li> <li>Recover - Restore normal operations</li> <li>Review - Post-incident analysis</li> </ol>"},{"location":"secure/#compliance","title":"Compliance","text":""},{"location":"secure/#common-standards","title":"Common Standards","text":"<ul> <li>GDPR - Data protection and privacy</li> <li>SOC 2 - Security controls</li> <li>ISO 27001 - Information security</li> <li>PCI DSS - Payment card security</li> <li>HIPAA - Healthcare data protection</li> </ul>"},{"location":"secure/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udd11 Authentication</li> <li>\ud83d\udeaa Authorization</li> <li>\ud83d\udd10 Secrets Management</li> <li>\ud83d\udee1\ufe0f Input Validation</li> <li>\ud83d\udd0d Security Scanning</li> </ul>"},{"location":"test/","title":"Testing Guide","text":""},{"location":"test/#comprehensive-testing-for-mcp-servers","title":"Comprehensive Testing for MCP Servers","text":"<p>Testing is crucial for ensuring MCP servers are reliable, secure, and performant. This guide covers all testing levels from unit to end-to-end.</p>"},{"location":"test/#testing-pyramid","title":"Testing Pyramid","text":"<pre><code>        /\\\n       /E2E\\\n      /------\\\n     /  Integ \\\n    /----------\\\n   /    Unit    \\\n  /--------------\\\n</code></pre> <ol> <li>Unit Tests (70%) - Fast, isolated component tests</li> <li>Integration Tests (20%) - Component interaction tests</li> <li>End-to-End Tests (10%) - Full system workflow tests</li> </ol>"},{"location":"test/#testing-strategy","title":"Testing Strategy","text":""},{"location":"test/#what-to-test","title":"What to Test","text":""},{"location":"test/#critical-paths","title":"Critical Paths","text":"<ul> <li>Tool execution and responses</li> <li>Resource access and permissions</li> <li>Error handling and recovery</li> <li>Input validation and sanitization</li> <li>Authentication and authorization</li> </ul>"},{"location":"test/#edge-cases","title":"Edge Cases","text":"<ul> <li>Empty inputs</li> <li>Maximum size inputs</li> <li>Invalid data types</li> <li>Concurrent requests</li> <li>Network failures</li> </ul>"},{"location":"test/#quick-start-testing","title":"Quick Start Testing","text":""},{"location":"test/#python-example","title":"Python Example","text":"<pre><code>import pytest\nfrom my_server import mcp\n\n@pytest.fixture\ndef client():\n    return mcp.test_client()\n\ndef test_tool_execution(client):\n    response = client.call_tool('my_tool', {'input': 'test'})\n    assert response['status'] == 'success'\n    assert 'result' in response\n</code></pre>"},{"location":"test/#javascript-example","title":"JavaScript Example","text":"<pre><code>const { TestClient } = require('@mcp/testing');\nconst server = require('./server');\n\ndescribe('MCP Server', () =&gt; {\n  let client;\n  \n  beforeAll(() =&gt; {\n    client = new TestClient(server);\n  });\n  \n  test('tool execution', async () =&gt; {\n    const result = await client.callTool('my_tool', { input: 'test' });\n    expect(result.status).toBe('success');\n  });\n});\n</code></pre>"},{"location":"test/#go-example","title":"Go Example","text":"<pre><code>func TestToolExecution(t *testing.T) {\n    server := NewTestServer()\n    defer server.Close()\n    \n    result, err := server.CallTool(\"my_tool\", map[string]interface{}{\n        \"input\": \"test\",\n    })\n    \n    assert.NoError(t, err)\n    assert.Equal(t, \"expected\", result)\n}\n</code></pre>"},{"location":"test/#test-coverage-requirements","title":"Test Coverage Requirements","text":""},{"location":"test/#minimum-coverage","title":"Minimum Coverage","text":"<ul> <li>Overall: 80% code coverage</li> <li>Critical paths: 100% coverage</li> <li>Error handling: 90% coverage</li> <li>Edge cases: 85% coverage</li> </ul>"},{"location":"test/#coverage-tools","title":"Coverage Tools","text":"Language Tool Command Python pytest-cov <code>pytest --cov=my_server --cov-report=html</code> JavaScript Jest <code>jest --coverage</code> Go Built-in <code>go test -cover ./...</code>"},{"location":"test/#test-data-management","title":"Test Data Management","text":""},{"location":"test/#fixtures","title":"Fixtures","text":"<pre><code># Python fixtures\n@pytest.fixture\ndef sample_data():\n    return {\n        'valid_input': {'name': 'test', 'value': 123},\n        'invalid_input': {'name': '', 'value': 'not_a_number'},\n        'edge_case': {'name': 'x' * 1000, 'value': float('inf')}\n    }\n</code></pre>"},{"location":"test/#mocking-external-services","title":"Mocking External Services","text":"<pre><code>// JavaScript mocking\njest.mock('./external-api', () =&gt; ({\n  fetchData: jest.fn(() =&gt; Promise.resolve({ data: 'mocked' }))\n}));\n</code></pre>"},{"location":"test/#continuous-integration","title":"Continuous Integration","text":""},{"location":"test/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Test MCP Server\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    \n    - name: Install dependencies\n      run: |\n        pip install -e \".[test]\"\n    \n    - name: Run tests\n      run: |\n        pytest --cov=my_server --cov-report=xml\n    \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"test/#testing-checklist","title":"Testing Checklist","text":""},{"location":"test/#pre-release-testing","title":"Pre-Release Testing","text":"<ul> <li> All unit tests pass</li> <li> Integration tests complete</li> <li> Security scan performed</li> <li> Performance benchmarks met</li> <li> Documentation updated</li> <li> Manual smoke tests done</li> </ul>"},{"location":"test/#test-categories","title":"Test Categories","text":"<ol> <li>Functional Testing</li> <li>Tool functionality</li> <li>Resource access</li> <li> <p>Protocol compliance</p> </li> <li> <p>Non-Functional Testing</p> </li> <li>Performance</li> <li>Security</li> <li>Usability</li> <li> <p>Reliability</p> </li> <li> <p>Regression Testing</p> </li> <li>Previous bugs fixed</li> <li>Features still working</li> <li>Backward compatibility</li> </ol>"},{"location":"test/#common-testing-patterns","title":"Common Testing Patterns","text":""},{"location":"test/#table-driven-tests","title":"Table-Driven Tests","text":"<pre><code>// Go example\ntests := []struct {\n    name    string\n    input   string\n    want    string\n    wantErr bool\n}{\n    {\"valid\", \"test\", \"TEST\", false},\n    {\"empty\", \"\", \"\", true},\n    {\"special\", \"!@#\", \"!@#\", false},\n}\n\nfor _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n        got, err := process(tt.input)\n        if (err != nil) != tt.wantErr {\n            t.Errorf(\"process() error = %v, wantErr %v\", err, tt.wantErr)\n        }\n        if got != tt.want {\n            t.Errorf(\"process() = %v, want %v\", got, tt.want)\n        }\n    })\n}\n</code></pre>"},{"location":"test/#property-based-testing","title":"Property-Based Testing","text":"<pre><code># Python hypothesis example\nfrom hypothesis import given, strategies as st\n\n@given(st.text())\ndef test_tool_handles_any_string(s):\n    result = my_tool(s)\n    assert isinstance(result, str)\n    assert len(result) &lt;= 1000  # Max length constraint\n</code></pre>"},{"location":"test/#testing-tools","title":"Testing Tools","text":""},{"location":"test/#recommended-tools-by-language","title":"Recommended Tools by Language","text":""},{"location":"test/#python","title":"Python","text":"<ul> <li>pytest - Testing framework</li> <li>pytest-asyncio - Async test support</li> <li>pytest-cov - Coverage reporting</li> <li>hypothesis - Property-based testing</li> <li>responses - HTTP mocking</li> </ul>"},{"location":"test/#javascripttypescript","title":"JavaScript/TypeScript","text":"<ul> <li>Jest - Testing framework</li> <li>Supertest - HTTP testing</li> <li>Sinon - Mocking library</li> <li>Playwright - E2E testing</li> </ul>"},{"location":"test/#go","title":"Go","text":"<ul> <li>testify - Assertions and mocks</li> <li>gomock - Mocking framework</li> <li>httptest - HTTP testing</li> <li>race detector - Concurrency testing</li> </ul>"},{"location":"test/#next-steps","title":"Next Steps","text":"<ul> <li>\u2705 Unit Testing</li> <li>\ud83d\udd04 Integration Testing</li> <li>\ud83d\ude80 End-to-End Testing</li> <li>\ud83d\udcca Performance Testing</li> <li>\ud83d\udd12 Security Testing</li> </ul>"},{"location":"use/","title":"Integration Guide","text":""},{"location":"use/#using-mcp-servers","title":"Using MCP Servers","text":"<p>Learn how to integrate MCP servers with various clients, platforms, and services.</p>"},{"location":"use/#integration-patterns","title":"Integration Patterns","text":""},{"location":"use/#direct-integration","title":"Direct Integration","text":"<p>Client connects directly to MCP server: <pre><code>Client &lt;---&gt; MCP Server\n</code></pre></p>"},{"location":"use/#gateway-integration","title":"Gateway Integration","text":"<p>Client connects through MCP Gateway: <pre><code>Client &lt;---&gt; Gateway &lt;---&gt; MCP Servers\n</code></pre></p>"},{"location":"use/#federated-integration","title":"Federated Integration","text":"<p>Multiple gateways with shared servers: <pre><code>Clients &lt;---&gt; Gateway A &lt;---&gt; Shared Servers\n         &lt;---&gt; Gateway B &lt;---&gt;\n</code></pre></p>"},{"location":"use/#client-libraries","title":"Client Libraries","text":""},{"location":"use/#python-client","title":"Python Client","text":"<pre><code>from mcp import Client\n\n# Initialize client\nclient = Client(\"http://localhost:8000/mcp\")\n\n# List available tools\ntools = client.list_tools()\nfor tool in tools:\n    print(f\"Tool: {tool.name} - {tool.description}\")\n\n# Call a tool\nresult = client.call_tool(\n    \"process_data\",\n    {\"input\": \"test data\", \"format\": \"json\"}\n)\nprint(f\"Result: {result}\")\n\n# Access resources\nresource = client.get_resource(\"config://settings\")\nprint(f\"Settings: {resource}\")\n</code></pre>"},{"location":"use/#javascript-client","title":"JavaScript Client","text":"<pre><code>import { MCPClient } from '@mcp/client';\n\n// Initialize client\nconst client = new MCPClient({\n  url: 'http://localhost:8000/mcp',\n  apiKey: process.env.MCP_API_KEY\n});\n\n// List tools\nconst tools = await client.listTools();\ntools.forEach(tool =&gt; {\n  console.log(`Tool: ${tool.name} - ${tool.description}`);\n});\n\n// Call tool\nconst result = await client.callTool('process_data', {\n  input: 'test data',\n  format: 'json'\n});\nconsole.log('Result:', result);\n\n// Get resource\nconst resource = await client.getResource('config://settings');\nconsole.log('Settings:', resource);\n</code></pre>"},{"location":"use/#go-client","title":"Go Client","text":"<pre><code>package main\n\nimport (\n    \"github.com/mcp/go-client\"\n)\n\nfunc main() {\n    // Initialize client\n    client := mcp.NewClient(\"http://localhost:8000/mcp\")\n    \n    // List tools\n    tools, err := client.ListTools()\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    for _, tool := range tools {\n        fmt.Printf(\"Tool: %s - %s\\n\", tool.Name, tool.Description)\n    }\n    \n    // Call tool\n    result, err := client.CallTool(\"process_data\", map[string]interface{}{\n        \"input\": \"test data\",\n        \"format\": \"json\",\n    })\n    \n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    fmt.Printf(\"Result: %v\\n\", result)\n}\n</code></pre>"},{"location":"use/#claude-desktop-integration","title":"Claude Desktop Integration","text":""},{"location":"use/#configuration","title":"Configuration","text":"<pre><code>// claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"my-server\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"my_mcp_server\"],\n      \"env\": {\n        \"MCP_API_KEY\": \"${MCP_API_KEY}\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"use/#installation","title":"Installation","text":"<pre><code># Install server for Claude Desktop\nuv run mcp install my_server.py --name \"My Server\"\n\n# With configuration\nuv run mcp install my_server.py \\\n  --name \"My Server\" \\\n  -v API_KEY=\"${API_KEY}\" \\\n  -v DEBUG=true\n</code></pre>"},{"location":"use/#gateway-integration_1","title":"Gateway Integration","text":""},{"location":"use/#register-with-gateway","title":"Register with Gateway","text":"<pre><code># Register server\ncurl -X POST http://gateway.example.com/servers \\\n  -H \"Authorization: Bearer ${GATEWAY_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"my-server\",\n    \"url\": \"http://my-server:8000/mcp\",\n    \"transport\": \"http\",\n    \"authentication\": {\n      \"type\": \"bearer\",\n      \"token\": \"${SERVER_TOKEN}\"\n    }\n  }'\n</code></pre>"},{"location":"use/#gateway-client-usage","title":"Gateway Client Usage","text":"<pre><code>from mcp_gateway import GatewayClient\n\n# Connect to gateway\ngateway = GatewayClient(\n    url=\"http://gateway.example.com\",\n    token=os.getenv(\"GATEWAY_TOKEN\")\n)\n\n# List available servers\nservers = gateway.list_servers()\nprint(f\"Available servers: {servers}\")\n\n# Call tool on specific server\nresult = gateway.call_tool(\n    server=\"my-server\",\n    tool=\"process_data\",\n    params={\"input\": \"test\"}\n)\n</code></pre>"},{"location":"use/#rest-api-integration","title":"REST API Integration","text":""},{"location":"use/#openapi-specification","title":"OpenAPI Specification","text":"<pre><code>openapi: 3.0.0\ninfo:\n  title: MCP Server API\n  version: 1.0.0\npaths:\n  /mcp:\n    post:\n      summary: Execute MCP request\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MCPRequest'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MCPResponse'\n\ncomponents:\n  schemas:\n    MCPRequest:\n      type: object\n      properties:\n        jsonrpc:\n          type: string\n          enum: [\"2.0\"]\n        method:\n          type: string\n        params:\n          type: object\n        id:\n          type: integer\n</code></pre>"},{"location":"use/#rest-client-example","title":"REST Client Example","text":"<pre><code>import requests\n\nclass MCPRestClient:\n    def __init__(self, base_url, api_key=None):\n        self.base_url = base_url\n        self.headers = {\"Content-Type\": \"application/json\"}\n        if api_key:\n            self.headers[\"Authorization\"] = f\"Bearer {api_key}\"\n    \n    def call_tool(self, tool_name, params):\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"tools/call\",\n            \"params\": {\n                \"name\": tool_name,\n                \"arguments\": params\n            },\n            \"id\": 1\n        }\n        \n        response = requests.post(\n            f\"{self.base_url}/mcp\",\n            json=payload,\n            headers=self.headers\n        )\n        \n        response.raise_for_status()\n        return response.json()[\"result\"]\n</code></pre>"},{"location":"use/#websocket-integration","title":"WebSocket Integration","text":""},{"location":"use/#websocket-client","title":"WebSocket Client","text":"<pre><code>class MCPWebSocketClient {\n  constructor(url) {\n    this.ws = new WebSocket(url);\n    this.requestId = 0;\n    this.pending = new Map();\n    \n    this.ws.on('message', (data) =&gt; {\n      const response = JSON.parse(data);\n      const handler = this.pending.get(response.id);\n      if (handler) {\n        handler(response);\n        this.pending.delete(response.id);\n      }\n    });\n  }\n  \n  async callTool(name, params) {\n    return new Promise((resolve, reject) =&gt; {\n      const id = ++this.requestId;\n      \n      this.pending.set(id, (response) =&gt; {\n        if (response.error) {\n          reject(new Error(response.error.message));\n        } else {\n          resolve(response.result);\n        }\n      });\n      \n      this.ws.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method: \"tools/call\",\n        params: { name, arguments: params },\n        id\n      }));\n    });\n  }\n}\n</code></pre>"},{"location":"use/#event-streaming","title":"Event Streaming","text":""},{"location":"use/#server-sent-events-sse","title":"Server-Sent Events (SSE)","text":"<pre><code>from flask import Response, Flask\nimport json\n\napp = Flask(__name__)\n\n@app.route('/mcp/stream')\ndef stream_events():\n    def generate():\n        # Subscribe to events\n        for event in mcp.subscribe_events():\n            yield f\"data: {json.dumps(event)}\\n\\n\"\n    \n    return Response(\n        generate(),\n        mimetype=\"text/event-stream\",\n        headers={\n            \"Cache-Control\": \"no-cache\",\n            \"X-Accel-Buffering\": \"no\"\n        }\n    )\n</code></pre>"},{"location":"use/#client-side-sse","title":"Client-Side SSE","text":"<pre><code>const eventSource = new EventSource('/mcp/stream');\n\neventSource.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log('Received event:', data);\n};\n\neventSource.onerror = (error) =&gt; {\n  console.error('SSE error:', error);\n  eventSource.close();\n};\n</code></pre>"},{"location":"use/#webhook-integration","title":"Webhook Integration","text":""},{"location":"use/#webhook-configuration","title":"Webhook Configuration","text":"<pre><code>@mcp.on_tool_execution\ndef webhook_handler(tool_name, params, result):\n    \"\"\"Send webhook on tool execution\"\"\"\n    webhook_url = os.getenv(\"WEBHOOK_URL\")\n    \n    payload = {\n        \"event\": \"tool_executed\",\n        \"tool\": tool_name,\n        \"params\": params,\n        \"result\": result,\n        \"timestamp\": datetime.utcnow().isoformat()\n    }\n    \n    requests.post(webhook_url, json=payload)\n</code></pre>"},{"location":"use/#webhook-receiver","title":"Webhook Receiver","text":"<pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook/mcp', methods=['POST'])\ndef receive_webhook():\n    data = request.json\n    \n    # Verify webhook signature\n    signature = request.headers.get('X-MCP-Signature')\n    if not verify_signature(request.data, signature):\n        return {'error': 'Invalid signature'}, 401\n    \n    # Process webhook\n    event_type = data.get('event')\n    if event_type == 'tool_executed':\n        process_tool_execution(data)\n    \n    return {'status': 'received'}, 200\n</code></pre>"},{"location":"use/#authentication-methods","title":"Authentication Methods","text":""},{"location":"use/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>def authenticate_api_key(api_key):\n    client = MCPClient(\n        url=\"http://localhost:8000/mcp\",\n        headers={\"X-API-Key\": api_key}\n    )\n    return client\n</code></pre>"},{"location":"use/#oauth-20-integration","title":"OAuth 2.0 Integration","text":"<pre><code>from authlib.integrations.requests_client import OAuth2Session\n\noauth = OAuth2Session(\n    client_id=CLIENT_ID,\n    client_secret=CLIENT_SECRET,\n    redirect_uri=REDIRECT_URI\n)\n\n# Get token\ntoken = oauth.fetch_token(\n    TOKEN_URL,\n    authorization_response=request.url\n)\n\n# Use token with MCP\nclient = MCPClient(\n    url=\"http://localhost:8000/mcp\",\n    headers={\"Authorization\": f\"Bearer {token['access_token']}\"}\n)\n</code></pre>"},{"location":"use/#error-handling","title":"Error Handling","text":""},{"location":"use/#client-side-error-handling","title":"Client-Side Error Handling","text":"<pre><code>class MCPClientWithRetry:\n    def __init__(self, url, max_retries=3):\n        self.url = url\n        self.max_retries = max_retries\n    \n    def call_tool_with_retry(self, tool_name, params):\n        for attempt in range(self.max_retries):\n            try:\n                return self.call_tool(tool_name, params)\n            \n            except MCPError as e:\n                if e.code == -32000:  # Server error\n                    if attempt &lt; self.max_retries - 1:\n                        time.sleep(2 ** attempt)  # Exponential backoff\n                        continue\n                raise\n            \n            except ConnectionError as e:\n                if attempt &lt; self.max_retries - 1:\n                    time.sleep(1)\n                    continue\n                raise\n</code></pre>"},{"location":"use/#usage-examples","title":"Usage Examples","text":""},{"location":"use/#data-processing-pipeline","title":"Data Processing Pipeline","text":"<pre><code># Chain multiple MCP tools\nasync def process_pipeline(data):\n    # Step 1: Validate data\n    validated = await client.call_tool(\"validate_data\", {\"data\": data})\n    \n    # Step 2: Transform data\n    transformed = await client.call_tool(\"transform_data\", {\n        \"data\": validated,\n        \"format\": \"normalized\"\n    })\n    \n    # Step 3: Analyze data\n    analysis = await client.call_tool(\"analyze_data\", {\n        \"data\": transformed,\n        \"metrics\": [\"mean\", \"median\", \"std\"]\n    })\n    \n    # Step 4: Generate report\n    report = await client.call_tool(\"generate_report\", {\n        \"analysis\": analysis,\n        \"format\": \"pdf\"\n    })\n    \n    return report\n</code></pre>"},{"location":"use/#multi-server-orchestration","title":"Multi-Server Orchestration","text":"<pre><code>async def orchestrate_servers():\n    # Connect to multiple servers\n    github_client = MCPClient(\"http://github-server:8000/mcp\")\n    jira_client = MCPClient(\"http://jira-server:8000/mcp\")\n    slack_client = MCPClient(\"http://slack-server:8000/mcp\")\n    \n    # Get GitHub issues\n    issues = await github_client.call_tool(\"list_issues\", {\n        \"repo\": \"myorg/myrepo\",\n        \"state\": \"open\"\n    })\n    \n    # Create Jira tickets\n    for issue in issues:\n        ticket = await jira_client.call_tool(\"create_ticket\", {\n            \"title\": issue[\"title\"],\n            \"description\": issue[\"body\"],\n            \"labels\": issue[\"labels\"]\n        })\n        \n        # Notify via Slack\n        await slack_client.call_tool(\"send_message\", {\n            \"channel\": \"#dev-team\",\n            \"text\": f\"Created Jira ticket {ticket['key']} for GitHub issue #{issue['number']}\"\n        })\n</code></pre>"},{"location":"use/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83e\udd16 Claude Integration</li> <li>\ud83c\udf10 Gateway Setup</li> <li>\ud83d\udce6 API Client Libraries</li> <li>\ud83d\udd17 Webhook Configuration</li> </ul>"}]}